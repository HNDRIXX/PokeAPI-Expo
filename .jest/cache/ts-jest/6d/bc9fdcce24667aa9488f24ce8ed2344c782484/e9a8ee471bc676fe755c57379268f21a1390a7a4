{"C:\\Users\\Admin\\Desktop\\cnth\\src\\pages\\BoilerplatePages\\__tests__\\step-definitions\\ComponentView.steps.tsx":{"modulePaths":["C:\\Users\\Admin\\Desktop\\cnth\\node_modules\\@types\\react\\jsx-runtime.d.ts","C:\\Users\\Admin\\Desktop\\cnth\\node_modules\\jest-cucumber\\dist\\src\\index.d.ts","C:\\Users\\Admin\\Desktop\\cnth\\node_modules\\@types\\react\\index.d.ts","C:\\Users\\Admin\\Desktop\\cnth\\node_modules\\@types\\enzyme\\index.d.ts","C:\\Users\\Admin\\Desktop\\cnth\\src\\pages\\BoilerplatePages\\ComponentView.tsx","C:\\Users\\Admin\\Desktop\\cnth\\src\\components\\index.tsx"],"testFileContent":"import { defineFeature, loadFeature } from 'jest-cucumber';\r\nimport React from 'react';\r\nimport { shallow } from 'enzyme';\r\nimport HomePage from '../../ComponentView';\r\nimport { Note, PokemonCard } from '../../../../components';\r\n\r\nconst feature = loadFeature('./src/pages/BoilerplatePages/__tests__/features/ComponentView.feature');\r\n\r\ndefineFeature(feature, test => {\r\n  let wrapper: any;\r\n\r\n  test('Display data and search results', ({ given, when, then }) => {\r\n    given('the HomePage is rendered', () => {\r\n      wrapper = shallow(<HomePage navigation={{}} />);\r\n    });\r\n\r\n    when('the data is loaded', async () => {\r\n      wrapper.setState({\r\n        data: [{ name: 'pikachu', order: 1, types: [], image: '' }],\r\n        filteredData: [{ name: 'pikachu', order: 1, types: [], image: '' }]\r\n      });\r\n      wrapper.instance().fetchData = jest.fn(); // Mock fetchData to avoid API calls\r\n      await wrapper.instance().componentDidMount();\r\n      wrapper.update();\r\n    });\r\n\r\n    when('the search term is {string}', (searchTerm) => {\r\n      (wrapper.instance() as HomePage).handleSearch(searchTerm); // Explicitly cast to HomePage\r\n      wrapper.update();\r\n    });\r\n\r\n    then('the list should display {string} related items', (searchTerm) => {\r\n      const pokemonCards = wrapper.find(PokemonCard);\r\n      expect(pokemonCards.someWhere((card: any) => card.props().item.name === searchTerm)).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('Handle error state', ({ given, when, then }) => {\r\n    given('the HomePage is rendered', () => {\r\n      wrapper = shallow(<HomePage navigation={{}} />);\r\n    });\r\n\r\n    when('there is an error while fetching data', async () => {\r\n      wrapper.setState({ error: 'Failed to fetch data' });\r\n      await wrapper.update();\r\n    });\r\n\r\n    then('an error message should be displayed', () => {\r\n      const note = wrapper.find(Note);\r\n      expect(note.exists()).toBe(true);\r\n      expect(note.props().text).toBe('No data found');\r\n    });\r\n  });\r\n});\r\n"}}