9643af8001c0b535b5705f2a3d24fd4c
"use strict";

exports.__esModule = true;
exports.default = validate;
var _warning = _interopRequireDefault(require("fbjs/lib/warning"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var invalidShortforms = {
  background: true,
  borderBottom: true,
  borderLeft: true,
  borderRight: true,
  borderTop: true,
  font: true,
  grid: true,
  outline: true,
  textDecoration: true
};
function error(message) {
  (0, _warning.default)(false, message);
}
function validate(key, styles) {
  var obj = styles[key];
  for (var k in obj) {
    var prop = k.trim();
    var value = obj[prop];
    var isInvalid = false;
    if (value === null) {
      continue;
    }
    if (typeof value === 'string' && value.indexOf('!important') > -1) {
      error("Invalid style declaration \"" + prop + ":" + value + "\". Values cannot include \"!important\"");
      isInvalid = true;
    } else {
      var suggestion = '';
      if (prop === 'animation' || prop === 'animationName') {
        suggestion = 'Did you mean "animationKeyframes"?';
        isInvalid = true;
      } else if (prop === 'direction') {
        suggestion = 'Did you mean "writingDirection"?';
        isInvalid = true;
      } else if (prop === 'verticalAlign') {
        suggestion = 'Did you mean "textAlignVertical"?';
        isInvalid = true;
      } else if (invalidShortforms[prop]) {
        suggestion = 'Please use long-form properties.';
        isInvalid = true;
      }
      if (suggestion !== '') {
        error("Invalid style property of \"" + prop + "\". " + suggestion);
      }
    }
    if (isInvalid) {
      delete obj[k];
    }
  }
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ2YWxpZGF0ZSIsIl93YXJuaW5nIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJpbnZhbGlkU2hvcnRmb3JtcyIsImJhY2tncm91bmQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiYm9yZGVyUmlnaHQiLCJib3JkZXJUb3AiLCJmb250IiwiZ3JpZCIsIm91dGxpbmUiLCJ0ZXh0RGVjb3JhdGlvbiIsImVycm9yIiwibWVzc2FnZSIsImtleSIsInN0eWxlcyIsImsiLCJwcm9wIiwidHJpbSIsInZhbHVlIiwiaXNJbnZhbGlkIiwiaW5kZXhPZiIsInN1Z2dlc3Rpb24iLCJtb2R1bGUiXSwic291cmNlcyI6WyJ2YWxpZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE5pY29sYXMgR2FsbGFnaGVyLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG52YXIgaW52YWxpZFNob3J0Zm9ybXMgPSB7XG4gIGJhY2tncm91bmQ6IHRydWUsXG4gIGJvcmRlckJvdHRvbTogdHJ1ZSxcbiAgYm9yZGVyTGVmdDogdHJ1ZSxcbiAgYm9yZGVyUmlnaHQ6IHRydWUsXG4gIGJvcmRlclRvcDogdHJ1ZSxcbiAgZm9udDogdHJ1ZSxcbiAgZ3JpZDogdHJ1ZSxcbiAgb3V0bGluZTogdHJ1ZSxcbiAgdGV4dERlY29yYXRpb246IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcbiAgKDAsIF93YXJuaW5nLmRlZmF1bHQpKGZhbHNlLCBtZXNzYWdlKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGUoa2V5LCBzdHlsZXMpIHtcbiAgdmFyIG9iaiA9IHN0eWxlc1trZXldO1xuXG4gIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgdmFyIHByb3AgPSBrLnRyaW0oKTtcbiAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcF07XG4gICAgdmFyIGlzSW52YWxpZCA9IGZhbHNlO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5pbmRleE9mKCchaW1wb3J0YW50JykgPiAtMSkge1xuICAgICAgZXJyb3IoXCJJbnZhbGlkIHN0eWxlIGRlY2xhcmF0aW9uIFxcXCJcIiArIHByb3AgKyBcIjpcIiArIHZhbHVlICsgXCJcXFwiLiBWYWx1ZXMgY2Fubm90IGluY2x1ZGUgXFxcIiFpbXBvcnRhbnRcXFwiXCIpO1xuICAgICAgaXNJbnZhbGlkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN1Z2dlc3Rpb24gPSAnJztcblxuICAgICAgaWYgKHByb3AgPT09ICdhbmltYXRpb24nIHx8IHByb3AgPT09ICdhbmltYXRpb25OYW1lJykge1xuICAgICAgICBzdWdnZXN0aW9uID0gJ0RpZCB5b3UgbWVhbiBcImFuaW1hdGlvbktleWZyYW1lc1wiPyc7IC8vIH0gZWxzZSBpZiAocHJvcCA9PT0gJ2JveFNoYWRvdycpIHtcbiAgICAgICAgLy8gIHN1Z2dlc3Rpb24gPSAnRGlkIHlvdSBtZWFuIFwic2hhZG93e0NvbG9yLE9mZnNldCxPcGFjaXR5LFJhZGl1c31cIj8nO1xuXG4gICAgICAgIGlzSW52YWxpZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT09ICdkaXJlY3Rpb24nKSB7XG4gICAgICAgIHN1Z2dlc3Rpb24gPSAnRGlkIHlvdSBtZWFuIFwid3JpdGluZ0RpcmVjdGlvblwiPyc7XG4gICAgICAgIGlzSW52YWxpZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT09ICd2ZXJ0aWNhbEFsaWduJykge1xuICAgICAgICBzdWdnZXN0aW9uID0gJ0RpZCB5b3UgbWVhbiBcInRleHRBbGlnblZlcnRpY2FsXCI/JztcbiAgICAgICAgaXNJbnZhbGlkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaW52YWxpZFNob3J0Zm9ybXNbcHJvcF0pIHtcbiAgICAgICAgc3VnZ2VzdGlvbiA9ICdQbGVhc2UgdXNlIGxvbmctZm9ybSBwcm9wZXJ0aWVzLic7XG4gICAgICAgIGlzSW52YWxpZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWdnZXN0aW9uICE9PSAnJykge1xuICAgICAgICBlcnJvcihcIkludmFsaWQgc3R5bGUgcHJvcGVydHkgb2YgXFxcIlwiICsgcHJvcCArIFwiXFxcIi4gXCIgKyBzdWdnZXN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNJbnZhbGlkKSB7XG4gICAgICBkZWxldGUgb2JqW2tdO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxRQUFRO0FBRTFCLElBQUlDLFFBQVEsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRWxFLFNBQVNELHNCQUFzQkEsQ0FBQ0Us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