728e8291deef72a4d419a13ced1229bc
"use strict";

exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
var _createElement = _interopRequireDefault(require("../createElement"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var ANIMATION_DURATION = 300;
function getAnimationStyle(animationType, visible) {
  if (animationType === 'slide') {
    return visible ? animatedSlideInStyles : animatedSlideOutStyles;
  }
  if (animationType === 'fade') {
    return visible ? animatedFadeInStyles : animatedFadeOutStyles;
  }
  return visible ? styles.container : styles.hidden;
}
function ModalAnimation(props) {
  var animationType = props.animationType,
    children = props.children,
    onDismiss = props.onDismiss,
    onShow = props.onShow,
    visible = props.visible;
  var _React$useState = React.useState(false),
    isRendering = _React$useState[0],
    setIsRendering = _React$useState[1];
  var wasVisible = React.useRef(false);
  var isAnimated = animationType && animationType !== 'none';
  var animationEndCallback = React.useCallback(function (e) {
    if (e && e.currentTarget !== e.target) {
      return;
    }
    if (visible) {
      if (onShow) {
        onShow();
      }
    } else {
      setIsRendering(false);
      if (onDismiss) {
        onDismiss();
      }
    }
  }, [onDismiss, onShow, visible]);
  React.useEffect(function () {
    if (visible) {
      setIsRendering(true);
    }
    if (visible !== wasVisible.current && !isAnimated) {
      animationEndCallback();
    }
    wasVisible.current = visible;
  }, [isAnimated, visible, animationEndCallback]);
  return isRendering || visible ? (0, _createElement.default)('div', {
    style: isRendering ? getAnimationStyle(animationType, visible) : styles.hidden,
    onAnimationEnd: animationEndCallback,
    children: children
  }) : null;
}
var styles = _StyleSheet.default.create({
  container: {
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    zIndex: 9999
  },
  animatedIn: {
    animationDuration: ANIMATION_DURATION + "ms",
    animationTimingFunction: 'ease-in'
  },
  animatedOut: {
    pointerEvents: 'none',
    animationDuration: ANIMATION_DURATION + "ms",
    animationTimingFunction: 'ease-out'
  },
  fadeIn: {
    opacity: 1,
    animationKeyframes: {
      '0%': {
        opacity: 0
      },
      '100%': {
        opacity: 1
      }
    }
  },
  fadeOut: {
    opacity: 0,
    animationKeyframes: {
      '0%': {
        opacity: 1
      },
      '100%': {
        opacity: 0
      }
    }
  },
  slideIn: {
    transform: [{
      translateY: '0%'
    }],
    animationKeyframes: {
      '0%': {
        transform: [{
          translateY: '100%'
        }]
      },
      '100%': {
        transform: [{
          translateY: '0%'
        }]
      }
    }
  },
  slideOut: {
    transform: [{
      translateY: '100%'
    }],
    animationKeyframes: {
      '0%': {
        transform: [{
          translateY: '0%'
        }]
      },
      '100%': {
        transform: [{
          translateY: '100%'
        }]
      }
    }
  },
  hidden: {
    opacity: 0
  }
});
var animatedSlideInStyles = [styles.container, styles.animatedIn, styles.slideIn];
var animatedSlideOutStyles = [styles.container, styles.animatedOut, styles.slideOut];
var animatedFadeInStyles = [styles.container, styles.animatedIn, styles.fadeIn];
var animatedFadeOutStyles = [styles.container, styles.animatedOut, styles.fadeOut];
var _default = ModalAnimation;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9TdHlsZVNoZWV0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jcmVhdGVFbGVtZW50Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiQU5JTUFUSU9OX0RVUkFUSU9OIiwiZ2V0QW5pbWF0aW9uU3R5bGUiLCJhbmltYXRpb25UeXBlIiwidmlzaWJsZSIsImFuaW1hdGVkU2xpZGVJblN0eWxlcyIsImFuaW1hdGVkU2xpZGVPdXRTdHlsZXMiLCJhbmltYXRlZEZhZGVJblN0eWxlcyIsImFuaW1hdGVkRmFkZU91dFN0eWxlcyIsInN0eWxlcyIsImNvbnRhaW5lciIsImhpZGRlbiIsIk1vZGFsQW5pbWF0aW9uIiwicHJvcHMiLCJjaGlsZHJlbiIsIm9uRGlzbWlzcyIsIm9uU2hvdyIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiaXNSZW5kZXJpbmciLCJzZXRJc1JlbmRlcmluZyIsIndhc1Zpc2libGUiLCJ1c2VSZWYiLCJpc0FuaW1hdGVkIiwiYW5pbWF0aW9uRW5kQ2FsbGJhY2siLCJ1c2VDYWxsYmFjayIsImUiLCJjdXJyZW50VGFyZ2V0IiwidGFyZ2V0IiwidXNlRWZmZWN0IiwiY3VycmVudCIsInN0eWxlIiwib25BbmltYXRpb25FbmQiLCJjcmVhdGUiLCJwb3NpdGlvbiIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInpJbmRleCIsImFuaW1hdGVkSW4iLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uIiwiYW5pbWF0ZWRPdXQiLCJwb2ludGVyRXZlbnRzIiwiZmFkZUluIiwib3BhY2l0eSIsImFuaW1hdGlvbktleWZyYW1lcyIsImZhZGVPdXQiLCJzbGlkZUluIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWSIsInNsaWRlT3V0IiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyJNb2RhbEFuaW1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9TdHlsZVNoZWV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfY3JlYXRlRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NyZWF0ZUVsZW1lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE5pY29sYXMgR2FsbGFnaGVyLlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbnZhciBBTklNQVRJT05fRFVSQVRJT04gPSAzMDA7XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvblN0eWxlKGFuaW1hdGlvblR5cGUsIHZpc2libGUpIHtcbiAgaWYgKGFuaW1hdGlvblR5cGUgPT09ICdzbGlkZScpIHtcbiAgICByZXR1cm4gdmlzaWJsZSA/IGFuaW1hdGVkU2xpZGVJblN0eWxlcyA6IGFuaW1hdGVkU2xpZGVPdXRTdHlsZXM7XG4gIH1cblxuICBpZiAoYW5pbWF0aW9uVHlwZSA9PT0gJ2ZhZGUnKSB7XG4gICAgcmV0dXJuIHZpc2libGUgPyBhbmltYXRlZEZhZGVJblN0eWxlcyA6IGFuaW1hdGVkRmFkZU91dFN0eWxlcztcbiAgfVxuXG4gIHJldHVybiB2aXNpYmxlID8gc3R5bGVzLmNvbnRhaW5lciA6IHN0eWxlcy5oaWRkZW47XG59XG5cbmZ1bmN0aW9uIE1vZGFsQW5pbWF0aW9uKHByb3BzKSB7XG4gIHZhciBhbmltYXRpb25UeXBlID0gcHJvcHMuYW5pbWF0aW9uVHlwZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBvbkRpc21pc3MgPSBwcm9wcy5vbkRpc21pc3MsXG4gICAgICBvblNob3cgPSBwcm9wcy5vblNob3csXG4gICAgICB2aXNpYmxlID0gcHJvcHMudmlzaWJsZTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgaXNSZW5kZXJpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRJc1JlbmRlcmluZyA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgd2FzVmlzaWJsZSA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBpc0FuaW1hdGVkID0gYW5pbWF0aW9uVHlwZSAmJiBhbmltYXRpb25UeXBlICE9PSAnbm9uZSc7XG4gIHZhciBhbmltYXRpb25FbmRDYWxsYmFjayA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBlLnRhcmdldCkge1xuICAgICAgLy8gSWYgdGhlIGV2ZW50IHdhcyBnZW5lcmF0ZWQgZm9yIHNvbWV0aGluZyBOT1QgdGhpcyBlbGVtZW50IHdlXG4gICAgICAvLyBzaG91bGQgaWdub3JlIGl0IGFzIGl0J3Mgbm90IHJlbGV2YW50IHRvIHVzXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHZpc2libGUpIHtcbiAgICAgIGlmIChvblNob3cpIHtcbiAgICAgICAgb25TaG93KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElzUmVuZGVyaW5nKGZhbHNlKTtcblxuICAgICAgaWYgKG9uRGlzbWlzcykge1xuICAgICAgICBvbkRpc21pc3MoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtvbkRpc21pc3MsIG9uU2hvdywgdmlzaWJsZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICBzZXRJc1JlbmRlcmluZyh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAodmlzaWJsZSAhPT0gd2FzVmlzaWJsZS5jdXJyZW50ICYmICFpc0FuaW1hdGVkKSB7XG4gICAgICAvLyBNYW51YWxseSBjYWxsIGBhbmltYXRpb25FbmRDYWxsYmFja2AgaWYgbm8gYW5pbWF0aW9uIGlzIHVzZWRcbiAgICAgIGFuaW1hdGlvbkVuZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgd2FzVmlzaWJsZS5jdXJyZW50ID0gdmlzaWJsZTtcbiAgfSwgW2lzQW5pbWF0ZWQsIHZpc2libGUsIGFuaW1hdGlvbkVuZENhbGxiYWNrXSk7XG4gIHJldHVybiBpc1JlbmRlcmluZyB8fCB2aXNpYmxlID8gKDAsIF9jcmVhdGVFbGVtZW50LmRlZmF1bHQpKCdkaXYnLCB7XG4gICAgc3R5bGU6IGlzUmVuZGVyaW5nID8gZ2V0QW5pbWF0aW9uU3R5bGUoYW5pbWF0aW9uVHlwZSwgdmlzaWJsZSkgOiBzdHlsZXMuaGlkZGVuLFxuICAgIG9uQW5pbWF0aW9uRW5kOiBhbmltYXRpb25FbmRDYWxsYmFjayxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkgOiBudWxsO1xufVxuXG52YXIgc3R5bGVzID0gX1N0eWxlU2hlZXQuZGVmYXVsdC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgekluZGV4OiA5OTk5XG4gIH0sXG4gIGFuaW1hdGVkSW46IHtcbiAgICBhbmltYXRpb25EdXJhdGlvbjogQU5JTUFUSU9OX0RVUkFUSU9OICsgXCJtc1wiLFxuICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiAnZWFzZS1pbidcbiAgfSxcbiAgYW5pbWF0ZWRPdXQ6IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IEFOSU1BVElPTl9EVVJBVElPTiArIFwibXNcIixcbiAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogJ2Vhc2Utb3V0J1xuICB9LFxuICBmYWRlSW46IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIGFuaW1hdGlvbktleWZyYW1lczoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGZhZGVPdXQ6IHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIGFuaW1hdGlvbktleWZyYW1lczoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNsaWRlSW46IHtcbiAgICB0cmFuc2Zvcm06IFt7XG4gICAgICB0cmFuc2xhdGVZOiAnMCUnXG4gICAgfV0sXG4gICAgYW5pbWF0aW9uS2V5ZnJhbWVzOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogW3tcbiAgICAgICAgICB0cmFuc2xhdGVZOiAnMTAwJSdcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBbe1xuICAgICAgICAgIHRyYW5zbGF0ZVk6ICcwJSdcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNsaWRlT3V0OiB7XG4gICAgdHJhbnNmb3JtOiBbe1xuICAgICAgdHJhbnNsYXRlWTogJzEwMCUnXG4gICAgfV0sXG4gICAgYW5pbWF0aW9uS2V5ZnJhbWVzOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogW3tcbiAgICAgICAgICB0cmFuc2xhdGVZOiAnMCUnXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogW3tcbiAgICAgICAgICB0cmFuc2xhdGVZOiAnMTAwJSdcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGhpZGRlbjoge1xuICAgIG9wYWNpdHk6IDBcbiAgfVxufSk7XG5cbnZhciBhbmltYXRlZFNsaWRlSW5TdHlsZXMgPSBbc3R5bGVzLmNvbnRhaW5lciwgc3R5bGVzLmFuaW1hdGVkSW4sIHN0eWxlcy5zbGlkZUluXTtcbnZhciBhbmltYXRlZFNsaWRlT3V0U3R5bGVzID0gW3N0eWxlcy5jb250YWluZXIsIHN0eWxlcy5hbmltYXRlZE91dCwgc3R5bGVzLnNsaWRlT3V0XTtcbnZhciBhbmltYXRlZEZhZGVJblN0eWxlcyA9IFtzdHlsZXMuY29udGFpbmVyLCBzdHlsZXMuYW5pbWF0ZWRJbiwgc3R5bGVzLmZhZGVJbl07XG52YXIgYW5pbWF0ZWRGYWRlT3V0U3R5bGVzID0gW3N0eWxlcy5jb250YWluZXIsIHN0eWxlcy5hbmltYXRlZE91dCwgc3R5bGVzLmZhZGVPdXRdO1xudmFyIF9kZWZhdWx0ID0gTW9kYWxBbmltYXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDQyxVQUFVLEdBQUcsSUFBSTtBQUN6QkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBRXhCLElBQUlDLEtBQUssR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVyRCxJQUFJQyxXQUFXLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLGdCQUFnQixDQUFDLENBQUM7QUFFbEUsSUFBSUcsY0FBYyxHQUFHRCxzQkFBc0IsQ0FBQ0YsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDO0FBRXhFLFNBQVNFLHNCQUFzQkEsQ0FBQ0UsR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNSLFVBQVUsR0FBR1EsR0FBRyxHQUFHO0lBQUVQLE9BQU8sRUFBRU87RUFBSSxDQUFDO0FBQUU7QUFFOUYsU0FBU0Msd0JBQXdCQSxDQUFBLEVBQUc7RUFBRSxJQUFJLE9BQU9DLE9BQU8sS0FBSyxVQUFVLEVBQUUsT0FBTyxJQUFJO0VBQUUsSUFBSUMsS0FBSyxHQUFHLElBQUlELE9BQU8sQ0FBQyxDQUFDO0VBQUVELHdCQUF3QixHQUFHLFNBQVNBLHdCQUF3QkEsQ0FBQSxFQUFHO0lBQUUsT0FBT0UsS0FBSztFQUFFLENBQUM7RUFBRSxPQUFPQSxLQUFLO0FBQUU7QUFFak4sU0FBU1IsdUJBQXVCQSxDQUFDSyxHQUFHLEVBQUU7RUFBRSxJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1IsVUFBVSxFQUFFO0lBQUUsT0FBT1EsR0FBRztFQUFFO0VBQUUsSUFBSUEsR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxVQUFVLEVBQUU7SUFBRSxPQUFP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