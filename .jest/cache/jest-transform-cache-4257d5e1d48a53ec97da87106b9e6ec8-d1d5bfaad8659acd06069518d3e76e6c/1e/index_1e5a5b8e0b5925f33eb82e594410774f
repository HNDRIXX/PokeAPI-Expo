c4a1653de5976376e8b4e97ead90e4f1
"use strict";

exports.__esModule = true;
exports.default = void 0;
var _View = _interopRequireDefault(require("../../exports/View"));
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
var UnimplementedView = function (_React$Component) {
  _inheritsLoose(UnimplementedView, _React$Component);
  function UnimplementedView() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = UnimplementedView.prototype;
  _proto.setNativeProps = function setNativeProps() {};
  _proto.render = function render() {
    return _react.default.createElement(_View.default, {
      style: [unimplementedViewStyles, this.props.style]
    }, this.props.children);
  };
  return UnimplementedView;
}(_react.default.Component);
var unimplementedViewStyles = process.env.NODE_ENV !== 'production' ? {
  alignSelf: 'flex-start',
  borderColor: 'red',
  borderWidth: 1
} : {};
var _default = UnimplementedView;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0Iiwib2JqIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJVbmltcGxlbWVudGVkVmlldyIsIl9SZWFjdCRDb21wb25lbnQiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9wcm90byIsInNldE5hdGl2ZVByb3BzIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwidW5pbXBsZW1lbnRlZFZpZXdTdHlsZXMiLCJwcm9wcyIsImNoaWxkcmVuIiwiQ29tcG9uZW50IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiYWxpZ25TZWxmIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfVmlldyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL2V4cG9ydHMvVmlld1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG4vKipcbiAqIENvbW1vbiBpbXBsZW1lbnRhdGlvbiBmb3IgYSBzaW1wbGUgc3R1YmJlZCB2aWV3LlxuICovXG52YXIgVW5pbXBsZW1lbnRlZFZpZXcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVW5pbXBsZW1lbnRlZFZpZXcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFVuaW1wbGVtZW50ZWRWaWV3KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBVbmltcGxlbWVudGVkVmlldy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldE5hdGl2ZVByb3BzID0gZnVuY3Rpb24gc2V0TmF0aXZlUHJvcHMoKSB7Ly8gRG8gbm90aGluZy5cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVmlldy5kZWZhdWx0LCB7XG4gICAgICBzdHlsZTogW3VuaW1wbGVtZW50ZWRWaWV3U3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlXVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBVbmltcGxlbWVudGVkVmlldztcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIHVuaW1wbGVtZW50ZWRWaWV3U3R5bGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYWxpZ25TZWxmOiAnZmxleC1zdGFydCcsXG4gIGJvcmRlckNvbG9yOiAncmVkJyxcbiAgYm9yZGVyV2lkdGg6IDFcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFVuaW1wbGVtZW50ZWRWaWV3O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLHFCQUFxQixDQUFDLENBQUM7QUFFakUsSUFBSUMsTUFBTSxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXJELFNBQVNELHNCQUFzQkEsQ0FBQ0csR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNOLFVBQVUsR0FBR00sR0FBRyxHQUFHO0lBQUVMLE9BQU8sRUFBRUs7RUFBSSxDQUFDO0FBQUU7QUFFOUYsU0FBU0MsY0FBY0EsQ0FBQ0MsUUFBUSxFQUFFQyxVQUFVLEVBQUU7RUFBRUQsUUFBUSxDQUFDRSxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSCxVQUFVLENBQUNDLFNBQVMsQ0FBQztFQUFFRixRQUFRLENBQUNFLFNBQVMsQ0FBQ0csV0FBVyxHQUFHTCxRQUFRO0VBQUVNLGVBQWUsQ0FBQ04sUUFBUSxFQUFFQyxVQUFVLENBQUM7QUFBRTtBQUU1TCxTQUFTSyxlQUFlQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUFFRixlQUFlLEdBQUdILE1BQU0sQ0FBQ00sY0FBYyxJQUFJLFNBQVNILGVBQWVBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0lBQUVELENBQUMsQ0FBQ0csU0FBUyxHQUFHRixDQUFDO0lBQUUsT0FBT0QsQ0FBQztFQUFFLENBQUM7RUFBRSxPQUFPRCxlQUFlLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0FBQUU7QUFLekssSUFBSUcsaUJBQWlCLEdBQWdCLFVBQVVDLGdCQUFnQixFQUFFO0VBQy9EYixjQUFjLENBQUNZLGlCQUFpQixFQUFFQyxnQkFBZ0IsQ0FBQztFQUVuRCxTQUFTRCxpQkFBaUJBLENBQUEsRUFBRztJQUMzQixPQUFPQyxnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDLElBQUksSUFBSTtFQUN4RDtFQUVBLElBQUlDLE1BQU0sR0FBR0osaUJBQWlCLENBQUNULFNBQVM7RUFFeENhLE1BQU0sQ0FBQ0MsY0FBYyxHQUFHLFNBQVNBLGNBQWNBLENBQUEsRUFBRyxDQUNsRCxDQUFDO0VBRURELE1BQU0sQ0FBQ0UsTUFBTSxHQUFHLFNBQVNBLE1BQU1BLENBQUEsRUFBRztJQUNoQyxPQUFvQnBCLE1BQU0sQ0FBQ0osT0FBTyxDQUFDeUIsYUFBYSxDQUFDeEIsS0FBSyxDQUFDRCxPQUFPLEVBQUU7TUFDOUQwQixLQUFLLEVBQUUsQ0FBQ0MsdUJBQXVCLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNGLEtBQUs7SUFDbkQsQ0FBQyxFQUFFLElBQUksQ0FBQ0UsS0FBSyxDQUFDQyxRQUFRLENBQUM7RUFDekIsQ0FBQztFQUVELE9BQU9YLGlCQUFpQjtBQUMxQixDQUFDLENBQUNkLE1BQU0sQ0FBQ0osT0FBTyxDQUFDOEIsU0FBUyxDQUFDO0FBRTNCLElBQUlILHVCQUF1QixHQUFHSSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksR0FBRztFQUNwRUMsU0FBUyxFQUFFLFlBQVk7RUFDdkJDLFdBQVcsRUFBRSxLQUFLO0VBQ2xCQyxXQUFXLEVBQUU7QUFDZixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ04sSUFBSUMsUUFBUSxHQUFHbkIsaUJBQWlCO0FBQ2hDcEIsT0FBTyxDQUFDRSxPQUFPLEdBQUdxQyxRQUFRO0FBQzFCQyxNQUFNLENBQUN4QyxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0UsT0FBTyIsImlnbm9yZUxpc3QiOltdfQ==