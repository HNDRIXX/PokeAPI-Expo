e106739e7a7122273c0ee8d237af5bfa
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_native_1 = require("react-native");
var Colors_1 = __importDefault(require("./Colors"));
var Main = react_native_1.StyleSheet.create({
    darkContainer: {
        flex: 1,
        backgroundColor: '#000',
        alignItems: 'center',
        justifyContent: 'center',
    },
    roundBorder: {
        borderRadius: 20,
        overflow: 'hidden'
    },
    alignJustify: {
        alignItems: 'center',
        justifyContent: 'center',
    },
    alignCenter: { alignItems: 'center' },
    flexRow: { flexDirection: 'row' },
    // Text
    textWhiteCenter: {
        color: '#fff',
        textAlign: 'center'
    },
    textWhiteCapitalize: {
        textTransform: 'capitalize',
        color: '#fff',
    },
});
var CardStyle = react_native_1.StyleSheet.create({
    // Pokemon Card Item
    button: {
        width: 170,
        padding: 20,
        margin: 10,
        backgroundColor: '#202020',
    },
    container: {
        width: 80,
        backgroundColor: '#646464',
        paddingVertical: 6,
        // gap: 10
    },
    imageBadge: {
        width: 20,
        height: 20,
        marginRight: 5
    },
    imageCard: {
        width: 100,
        height: 100,
        marginVertical: 10
    },
    imageType: {
        width: 50,
        height: 20,
        marginHorizontal: 5
    },
    textName: {
        marginBottom: 10
    },
});
var StyleDetails = react_native_1.StyleSheet.create({
    container: __assign(__assign({}, Main.darkContainer), { paddingVertical: 20, flex: 1 }),
    wrapper: __assign(__assign({}, Main.roundBorder), { paddingHorizontal: 15, marginHorizontal: 10, backgroundColor: Colors_1.default.dark.gray }),
    contentWrapper: __assign(__assign(__assign({}, Main.alignCenter), Main.roundBorder), { backgroundColor: '#202020', width: '100%', padding: 15, marginBottom: 15 }),
    typeContainer: {
        marginBottom: 10,
    },
    abilitiesContainer: {
        alignItems: 'flex-start',
        width: '100%',
        // gap: 10,
        marginBottom: 15,
    },
    typeWrapper: __assign({}, Main.flexRow),
    twoColContainer: {
        flexDirection: "row",
        flexWrap: "wrap"
    },
    twoColWrapper: {
        justifyContent: 'space-between',
        width: '50%',
        padding: 5
    },
    imagePokemon: {
        width: 200,
        height: 200,
        marginVertical: 10,
    },
    imageType: {
        marginHorizontal: 5,
        width: 80,
        height: 30
    },
    textName: __assign(__assign({}, Main.textWhiteCapitalize), { fontSize: 20, fontWeight: 'bold', marginBottom: 10 }),
    textTitleType: {
        textAlign: 'left',
        fontWeight: 'bold',
        fontSize: 15,
        marginBottom: 5,
        color: '#fff',
    },
    textValue: __assign(__assign({}, Main.textWhiteCapitalize), { fontSize: 16, fontWeight: 'bold' }),
    textFlavor: __assign(__assign(__assign({}, Main.textWhiteCapitalize), Main.textWhiteCenter), { fontStyle: 'italic', marginVertical: 15 }),
    textAbilities: __assign(__assign(__assign({}, Main.roundBorder), Main.textWhiteCapitalize), { width: '100%', paddingVertical: 10, paddingHorizontal: 15, borderColor: Colors_1.default.light.icon, borderWidth: 1 }),
    textGapColumn: __assign(__assign({}, Main.textWhiteCapitalize), { fontSize: 13, marginBottom: 2 })
});
var StyleBadge = react_native_1.StyleSheet.create({
    container: __assign(__assign(__assign(__assign({}, CardStyle.container), Main.alignJustify), Main.flexRow), Main.roundBorder)
});
exports.default = { Main: Main, CardStyle: CardStyle, StyleDetails: StyleDetails, StyleBadge: StyleBadge };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,