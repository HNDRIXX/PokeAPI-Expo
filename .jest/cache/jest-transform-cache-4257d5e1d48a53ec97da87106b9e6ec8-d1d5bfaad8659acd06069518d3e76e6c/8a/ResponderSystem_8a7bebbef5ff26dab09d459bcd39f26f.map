{"version":3,"names":["exports","__esModule","attachListeners","addNode","removeNode","terminateResponder","getResponderNode","_ExecutionEnvironment","require","_createResponderEvent","_interopRequireDefault","_ResponderEventTypes","_utils","_ResponderTouchHistoryStore","obj","default","emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","Map","isEmulatingMouseEvents","trackedTouchCount","currentResponder","changeCurrentResponder","responder","getResponderConfig","config","get","eventListener","domEvent","eventType","type","eventTarget","target","isStartEvent","isStartish","isPrimaryPointerDown","isMoveEvent","isMoveish","isEndEvent","isEndish","isScrollEvent","isScroll","isSelectionChangeEvent","isSelectionChange","responderEvent","touches","length","recordTouchTrack","nativeEvent","eventPaths","getResponderPaths","wasNegotiated","wantsResponder","currentResponderIdPath","eventIdPath","lowestCommonAncestor","getLowestCommonAncestor","indexOfLowestCommonAncestor","indexOf","index","slice","nodePath","findWantsResponder","attemptTransfer","_currentResponder","_getResponderConfig","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","currentTarget","dispatchConfig","registrationName","isTerminateEvent","isCancelish","window","contains","relatedTarget","hasValidSelection","isReleaseEvent","hasTargetTouches","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","callbackName","shouldSetCallback","prunedIdPath","i","result","isPropagationStopped","_i","_id","_node","_result","_id2","_node2","_currentResponder2","currentId","currentNode","_getResponderConfig2","onResponderGrant","onResponderReject","_getResponderConfig3","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","canUseDOM","__reactResponderSystemActive","addEventListener","forEach","document","setResponderId","set","has","delete","_currentResponder3","_getResponderConfig4","event"],"sources":["ResponderSystem.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.attachListeners = attachListeners;\nexports.addNode = addNode;\nexports.removeNode = removeNode;\nexports.terminateResponder = terminateResponder;\nexports.getResponderNode = getResponderNode;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _createResponderEvent = _interopRequireDefault(require(\"./createResponderEvent\"));\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\nvar _utils = require(\"./utils\");\n\nvar _ResponderTouchHistoryStore = _interopRequireDefault(require(\"./ResponderTouchHistoryStore\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * RESPONDER EVENT SYSTEM\n *\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n * that pointer interactions are exclusive to that view and none other. The \"interaction\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n * pointers continue to be active.\n *\n * Responder being granted:\n *\n * A view can become the \"responder\" after the following events:\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n *  * \"scroll\" (while a pointer is down)\n *  * \"selectionchange\" (while a pointer is down)\n *\n * If nothing is already the \"responder\", the event propagates to (capture) and from\n * (bubble) the event target until a view returns `true` for\n * `on*ShouldSetResponder(Capture)`.\n *\n * If something is already the responder, the event propagates to (capture) and from\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n * Then negotiation happens between the current \"responder\" and a view that wants to\n * become the \"responder\": see the timing diagram below.\n *\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\n * system must result in the current \"responder\" being notified that it no longer has\n * the \"interaction lock\" - the native system has taken over.\n *\n * Responder being released:\n *\n * As soon as there are no more active pointers that *started* inside descendants\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n * current \"responder\", and the responder lock is released.\n *\n * Typical sequence of events:\n *  * startShouldSetResponder\n *  * responderGrant/Reject\n *  * responderStart\n *  * responderMove\n *  * responderEnd\n *  * responderRelease\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +--------------+          |                            |\n     | onTouchStart |          |                            |\n     +------+-------+    none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | | onResponder            | |\n            +------------------->|    TerminationRequest  | |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | | onResponderTerminate   |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\nvar emptyObject = {};\n/* ------------ IMPLEMENTATION ------------ */\n\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n/**\n * Process native events\n *\n * A single event listener is used to manage the responder system.\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n * are interpreted in terms of the Responder System and checked to see if\n * the responder should be transferred. Each host node that is attached to\n * the Responder System has an ID, which is used to look up its associated\n * callbacks.\n */\n\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n  /**\n   * Manage emulated events and early bailout.\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\n   * necessary to manually manage the mess of browser touch/mouse events.\n   * And bailout early for termination events when there is no active responder.\n   */\n  // Flag when browser may produce emulated events\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  } // Remove flag when browser will not produce emulated events\n\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  } // Ignore various events in particular circumstances\n\n\n  if ( // Ignore browser emulated mouse events\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first\n  eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  } // Remove flag after emulated events are finished\n\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = (0, _ResponderEventTypes.isStartish)(eventType) && (0, _utils.isPrimaryPointerDown)(domEvent);\n  var isMoveEvent = (0, _ResponderEventTypes.isMoveish)(eventType);\n  var isEndEvent = (0, _ResponderEventTypes.isEndish)(eventType);\n  var isScrollEvent = (0, _ResponderEventTypes.isScroll)(eventType);\n  var isSelectionChangeEvent = (0, _ResponderEventTypes.isSelectionChange)(eventType);\n  var responderEvent = (0, _createResponderEvent.default)(domEvent);\n  /**\n   * Record the state of active pointers\n   */\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    _ResponderTouchHistoryStore.default.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n  /**\n   * Responder System logic\n   */\n\n\n  var eventPaths = (0, _utils.getResponderPaths)(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder; // If an event occured that might change the current responder...\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    // If there is already a responder, prune the event paths to the lowest common ancestor\n    // of the existing responder and deepest target of the event.\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = (0, _utils.getLowestCommonAncestor)(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor); // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      // If a node wants to become the responder, attempt to transfer.\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        // Sets responder if none exists, or negotates with existing responder.\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  } // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node; // Start\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } // Move\n    else if (isMoveEvent) {\n        if (onResponderMove != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n          onResponderMove(responderEvent);\n        }\n      } else {\n        var isTerminateEvent = (0, _ResponderEventTypes.isCancelish)(eventType) || // native context menu\n        eventType === 'contextmenu' || // window blur\n        eventType === 'blur' && eventTarget === window || // responder (or ancestors) blur\n        eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer\n        isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)\n        isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node\n        isSelectionChangeEvent && (0, _utils.hasValidSelection)(domEvent);\n        var isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, _utils.hasTargetTouches)(node, domEvent.touches); // End\n\n        if (isEndEvent) {\n          if (onResponderEnd != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n            onResponderEnd(responderEvent);\n          }\n        } // Release\n\n\n        if (isReleaseEvent) {\n          if (onResponderRelease != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n            onResponderRelease(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n        } // Terminate\n\n\n        if (isTerminateEvent) {\n          var shouldTerminate = true; // Responders can still avoid termination but only for these events.\n\n          if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n            // Only call this function is it wasn't already called during negotiation.\n            if (wasNegotiated) {\n              shouldTerminate = false;\n            } else if (onResponderTerminationRequest != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n              if (onResponderTerminationRequest(responderEvent) === false) {\n                shouldTerminate = false;\n              }\n            }\n          }\n\n          if (shouldTerminate) {\n            if (onResponderTerminate != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n              onResponderTerminate(responderEvent);\n            }\n\n            changeCurrentResponder(emptyResponder);\n            isEmulatingMouseEvents = false;\n            trackedTouchCount = 0;\n          }\n        }\n      }\n  }\n}\n/**\n * Walk the event path to/from the target node. At each node, stop and call the\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\n * call \"stopPropagation\" on the event, stop searching for a responder.\n */\n\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          // Start the path from the potential responder\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    }; // capture\n\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    } // bubble\n\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n/**\n * Attempt to transfer the responder.\n */\n\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node; // Set responder\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } // Negotiate with current responder\n  else {\n      var _getResponderConfig3 = getResponderConfig(currentId),\n          onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n          onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n      var allowTransfer = true;\n\n      if (onResponderTerminationRequest != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n        if (onResponderTerminationRequest(responderEvent) === false) {\n          allowTransfer = false;\n        }\n      }\n\n      if (allowTransfer) {\n        // Terminate existing responder\n        if (onResponderTerminate != null) {\n          responderEvent.currentTarget = currentNode;\n          responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n          onResponderTerminate(responderEvent);\n        } // Grant next responder\n\n\n        if (onResponderGrant != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n          onResponderGrant(responderEvent);\n        }\n\n        changeCurrentResponder(wantsResponder);\n      } else {\n        // Reject responder request\n        if (onResponderReject != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n          onResponderReject(responderEvent);\n        }\n      }\n    }\n}\n/* ------------ PUBLIC API ------------ */\n\n/**\n * Attach Listeners\n *\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\n * this system.\n */\n\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = [// mouse\n'mousedown', 'mousemove', 'mouseup', 'dragstart', // touch\n'touchstart', 'touchmove', 'touchend', 'touchcancel', // other\n'contextmenu', 'select', 'selectionchange'];\n\nfunction attachListeners() {\n  if (_ExecutionEnvironment.canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n/**\n * Register a node with the ResponderSystem.\n */\n\n\nfunction addNode(id, node, config) {\n  (0, _utils.setResponderId)(node, id);\n  responderListenersMap.set(id, config);\n}\n/**\n * Unregister a node with the ResponderSystem.\n */\n\n\nfunction removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n/**\n * Allow the current responder to be terminated from within components to support\n * more complex requirements, such as use with other React libraries for working\n * with scroll views, input views, etc.\n */\n\n\nfunction terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = (0, _createResponderEvent.default)({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n/**\n * Allow unit tests to inspect the current responder in the system.\n * FOR TESTING ONLY.\n */\n\n\nfunction getResponderNode() {\n  return currentResponder.node;\n}"],"mappings":"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","ignoreList":[]}