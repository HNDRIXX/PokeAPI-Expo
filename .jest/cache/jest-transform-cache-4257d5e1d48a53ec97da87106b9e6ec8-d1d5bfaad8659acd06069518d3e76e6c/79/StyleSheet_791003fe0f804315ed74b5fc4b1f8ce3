c6bd680721dd3b9f3db751837c748708
"use strict";

exports.__esModule = true;
exports.default = void 0;
var _ReactNativePropRegistry = _interopRequireDefault(require("./ReactNativePropRegistry"));
var _flattenStyle = _interopRequireDefault(require("./flattenStyle"));
var _validate = _interopRequireDefault(require("./validate"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var absoluteFillObject = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
var absoluteFill = _ReactNativePropRegistry.default.register(absoluteFillObject);
var StyleSheet = {
  absoluteFill: absoluteFill,
  absoluteFillObject: absoluteFillObject,
  compose: function compose(style1, style2) {
    if (process.env.NODE_ENV !== 'production') {
      var len = arguments.length;
      if (len > 2) {
        var readableStyles = Array.prototype.slice.call(arguments).map(function (a) {
          return (0, _flattenStyle.default)(a);
        });
        throw new Error("StyleSheet.compose() only accepts 2 arguments, received " + len + ": " + JSON.stringify(readableStyles));
      }
    }
    if (style1 && style2) {
      return [style1, style2];
    } else {
      return style1 || style2;
    }
  },
  create: function create(styles) {
    var result = {};
    Object.keys(styles).forEach(function (key) {
      if (process.env.NODE_ENV !== 'production') {
        (0, _validate.default)(key, styles);
      }
      var id = styles[key] && _ReactNativePropRegistry.default.register(styles[key]);
      result[key] = id;
    });
    return result;
  },
  flatten: _flattenStyle.default,
  hairlineWidth: 1
};
var _default = StyleSheet;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9mbGF0dGVuU3R5bGUiLCJfdmFsaWRhdGUiLCJvYmoiLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJwb3NpdGlvbiIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImFic29sdXRlRmlsbCIsInJlZ2lzdGVyIiwiU3R5bGVTaGVldCIsImNvbXBvc2UiLCJzdHlsZTEiLCJzdHlsZTIiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJsZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZWFkYWJsZVN0eWxlcyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwibWFwIiwiYSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZSIsInN0eWxlcyIsInJlc3VsdCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiaWQiLCJmbGF0dGVuIiwiaGFpcmxpbmVXaWR0aCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiU3R5bGVTaGVldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9SZWFjdE5hdGl2ZVByb3BSZWdpc3RyeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnlcIikpO1xuXG52YXIgX2ZsYXR0ZW5TdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZmxhdHRlblN0eWxlXCIpKTtcblxudmFyIF92YWxpZGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmFsaWRhdGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTmljb2xhcyBHYWxsYWdoZXIuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbnZhciBhYnNvbHV0ZUZpbGxPYmplY3QgPSB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICByaWdodDogMCxcbiAgdG9wOiAwLFxuICBib3R0b206IDBcbn07XG5cbnZhciBhYnNvbHV0ZUZpbGwgPSBfUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnkuZGVmYXVsdC5yZWdpc3RlcihhYnNvbHV0ZUZpbGxPYmplY3QpO1xuXG52YXIgU3R5bGVTaGVldCA9IHtcbiAgYWJzb2x1dGVGaWxsOiBhYnNvbHV0ZUZpbGwsXG4gIGFic29sdXRlRmlsbE9iamVjdDogYWJzb2x1dGVGaWxsT2JqZWN0LFxuICBjb21wb3NlOiBmdW5jdGlvbiBjb21wb3NlKHN0eWxlMSwgc3R5bGUyKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuICAgICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICAgIHZhciByZWFkYWJsZVN0eWxlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfZmxhdHRlblN0eWxlLmRlZmF1bHQpKGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3R5bGVTaGVldC5jb21wb3NlKCkgb25seSBhY2NlcHRzIDIgYXJndW1lbnRzLCByZWNlaXZlZCBcIiArIGxlbiArIFwiOiBcIiArIEpTT04uc3RyaW5naWZ5KHJlYWRhYmxlU3R5bGVzKSk7XG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuXG4gICAgfVxuXG4gICAgaWYgKHN0eWxlMSAmJiBzdHlsZTIpIHtcbiAgICAgIHJldHVybiBbc3R5bGUxLCBzdHlsZTJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3R5bGUxIHx8IHN0eWxlMjtcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHN0eWxlcykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgKDAsIF92YWxpZGF0ZS5kZWZhdWx0KShrZXksIHN0eWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZCA9IHN0eWxlc1trZXldICYmIF9SZWFjdE5hdGl2ZVByb3BSZWdpc3RyeS5kZWZhdWx0LnJlZ2lzdGVyKHN0eWxlc1trZXldKTtcblxuICAgICAgcmVzdWx0W2tleV0gPSBpZDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBmbGF0dGVuOiBfZmxhdHRlblN0eWxlLmRlZmF1bHQsXG4gIC8vIGBoYWlybGluZVdpZHRoYCBpcyBub3QgaW1wbGVtZW50ZWQgdXNpbmcgc2NyZWVuIGRlbnNpdHkgYXMgYnJvd3NlcnMgbWF5XG4gIC8vIHJvdW5kIHN1Yi1waXhlbCB2YWx1ZXMgZG93biB0byBgMGAsIGNhdXNpbmcgdGhlIGxpbmUgbm90IHRvIGJlIHJlbmRlcmVkLlxuICBoYWlybGluZVdpZHRoOiAxXG59O1xudmFyIF9kZWZhdWx0ID0gU3R5bGVTaGVldDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsd0JBQXdCLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLDRCQUE0QixDQUFDLENBQUM7QUFFM0YsSUFBSUMsYUFBYSxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXJFLElBQUlFLFNBQVMsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sYUFBYSxDQUFDLENBQUM7QUFFN0QsU0FBU0Qsc0JBQXNCQSxDQUFDSSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1AsVUFBVSxHQUFHTyxHQUFHLEdBQUc7SUFBRU4sT0FBTyxFQUFFTTtFQUFJLENBQUM7QUFBRTtBQVU5RixJQUFJQyxrQkFBa0IsR0FBRztFQUN2QkMsUUFBUSxFQUFFLFVBQVU7RUFDcEJDLElBQUksRUFBRSxDQUFDO0VBQ1BDLEtBQUssRUFBRSxDQUFDO0VBQ1JDLEdBQUcsRUFBRSxDQUFDO0VBQ05DLE1BQU0sRUFBRTtBQUNWLENBQUM7QUFFRCxJQUFJQyxZQUFZLEdBQUdaLHdCQUF3QixDQUFDRCxPQUFPLENBQUNjLFFBQVEsQ0FBQ1Asa0JBQWtCLENBQUM7QUFFaEYsSUFBSVEsVUFBVSxHQUFHO0VBQ2ZGLFlBQVksRUFBRUEsWUFBWTtFQUMxQk4sa0JBQWtCLEVBQUVBLGtCQUFrQjtFQUN0Q1MsT0FBTyxFQUFFLFNBQVNBLE9BQU9BLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO0lBQ3hDLElBQUlDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEtBQUssWUFBWSxFQUFFO01BRXpDLElBQUlDLEdBQUcsR0FBR0MsU0FBUyxDQUFDQyxNQUFNO01BRTFCLElBQUlGLEdBQUcsR0FBRyxDQUFDLEVBQUU7UUFDWCxJQUFJRyxjQUFjLEdBQUdDLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ04sU0FBUyxDQUFDLENBQUNPLEdBQUcsQ0FBQyxVQUFVQyxDQUFDLEVBQUU7VUFDMUUsT0FBTyxDQUFDLENBQUMsRUFBRTNCLGFBQWEsQ0FBQ0osT0FBTyxFQUFFK0IsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQztRQUNGLE1BQU0sSUFBSUMsS0FBSyxDQUFDLDBEQUEwRCxHQUFHVixHQUFHLEdBQUcsSUFBSSxHQUFHVyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1QsY0FBYyxDQUFDLENBQUM7TUFDM0g7SUFHRjtJQUVBLElBQUlSLE1BQU0sSUFBSUMsTUFBTSxFQUFFO01BQ3BCLE9BQU8sQ0FBQ0QsTUFBTSxFQUFFQyxNQUFNLENBQUM7SUFDekIsQ0FBQyxNQUFNO01BQ0wsT0FBT0QsTUFBTSxJQUFJQyxNQUFNO0lBQ3pCO0VBQ0YsQ0FBQztFQUNEaUIsTUFBTSxFQUFFLFNBQVNBLE1BQU1BLENBQUNDLE1BQU0sRUFBRTtJQUM5QixJQUFJQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2ZDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxNQUFNLENBQUMsQ0FBQ0ksT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtNQUN6QyxJQUFJdEIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEVBQUU7UUFDekMsQ0FBQyxDQUFDLEVBQUVoQixTQUFTLENBQUNMLE9BQU8sRUFBRXlDLEdBQUcsRUFBRUwsTUFBTSxDQUFDO01BQ3JDO01BRUEsSUFBSU0sRUFBRSxHQUFHTixNQUFNLENBQUNLLEdBQUcsQ0FBQyxJQUFJeEMsd0JBQXdCLENBQUNELE9BQU8sQ0FBQ2MsUUFBUSxDQUFDc0IsTUFBTSxDQUFDSyxHQUFHLENBQUMsQ0FBQztNQUU5RUosTUFBTSxDQUFDSSxHQUFHLENBQUMsR0FBR0MsRUFBRTtJQUNsQixDQUFDLENBQUM7SUFDRixPQUFPTCxNQUFNO0VBQ2YsQ0FBQztFQUNETSxPQUFPLEVBQUV2QyxhQUFhLENBQUNKLE9BQU87RUFHOUI0QyxhQUFhLEVBQUU7QUFDakIsQ0FBQztBQUNELElBQUlDLFFBQVEsR0FBRzlCLFVBQVU7QUFDekJqQixPQUFPLENBQUNFLE9BQU8sR0FBRzZDLFFBQVE7QUFDMUJDLE1BQU0sQ0FBQ2hELE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxPQUFPIiwiaWdub3JlTGlzdCI6W119