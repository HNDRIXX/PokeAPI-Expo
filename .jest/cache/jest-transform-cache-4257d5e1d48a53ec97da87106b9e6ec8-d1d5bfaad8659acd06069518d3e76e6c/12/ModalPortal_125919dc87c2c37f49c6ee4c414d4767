d22fd456327b242ae55b6f5eb917a232
"use strict";

exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");
var _reactDom = _interopRequireDefault(require("react-dom"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function ModalPortal(props) {
  var children = props.children;
  var elementRef = React.useRef(null);
  if (_ExecutionEnvironment.canUseDOM && !elementRef.current) {
    var element = document.createElement('div');
    if (element && document.body) {
      document.body.appendChild(element);
      elementRef.current = element;
    }
  }
  React.useEffect(function () {
    if (_ExecutionEnvironment.canUseDOM) {
      return function () {
        if (document.body && elementRef.current) {
          document.body.removeChild(elementRef.current);
          elementRef.current = null;
        }
      };
    }
  }, []);
  return elementRef.current && _ExecutionEnvironment.canUseDOM ? _reactDom.default.createPortal(children, elementRef.current) : null;
}
var _default = ModalPortal;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9FeGVjdXRpb25FbnZpcm9ubWVudCIsIl9yZWFjdERvbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJNb2RhbFBvcnRhbCIsInByb3BzIiwiY2hpbGRyZW4iLCJlbGVtZW50UmVmIiwidXNlUmVmIiwiY2FuVXNlRE9NIiwiY3VycmVudCIsImVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ1c2VFZmZlY3QiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZVBvcnRhbCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiTW9kYWxQb3J0YWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE5pY29sYXMgR2FsbGFnaGVyLlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbmZ1bmN0aW9uIE1vZGFsUG9ydGFsKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICB2YXIgZWxlbWVudFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBpZiAoX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAhZWxlbWVudFJlZi5jdXJyZW50KSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGlmIChlbGVtZW50ICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICBlbGVtZW50UmVmLmN1cnJlbnQgPSBlbGVtZW50O1xuICAgIH1cbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5ICYmIGVsZW1lbnRSZWYuY3VycmVudCkge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudFJlZi5jdXJyZW50KTtcbiAgICAgICAgICBlbGVtZW50UmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gZWxlbWVudFJlZi5jdXJyZW50ICYmIF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyAvKiNfX1BVUkVfXyovX3JlYWN0RG9tLmRlZmF1bHQuY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBlbGVtZW50UmVmLmN1cnJlbnQpIDogbnVsbDtcbn1cblxudmFyIF9kZWZhdWx0ID0gTW9kYWxQb3J0YWw7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDQyxVQUFVLEdBQUcsSUFBSTtBQUN6QkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBRXhCLElBQUlDLEtBQUssR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVyRCxJQUFJQyxxQkFBcUIsR0FBR0QsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBRXBFLElBQUlFLFNBQVMsR0FBR0Msc0JBQXNCLENBQUNILE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUU1RCxTQUFTRyxzQkFBc0JBLENBQUNDLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDUixVQUFVLEdBQUdRLEdBQUcsR0FBRztJQUFFUCxPQUFPLEVBQUVPO0VBQUksQ0FBQztBQUFFO0FBRTlGLFNBQVNDLHdCQUF3QkEsQ0FBQSxFQUFHO0VBQUUsSUFBSSxPQUFPQyxPQUFPLEtBQUssVUFBVSxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlDLEtBQUssR0FBRyxJQUFJRCxPQUFPLENBQUMsQ0FBQztFQUFFRCx3QkFBd0IsR0FBRyxTQUFTQSx3QkFBd0JBLENBQUEsRUFBRztJQUFFLE9BQU9FLEtBQUs7RUFBRSxDQUFDO0VBQUUsT0FBT0EsS0FBSztBQUFFO0FBRWpOLFNBQVNSLHVCQUF1QkEsQ0FBQ0ssR0FBRyxFQUFFO0VBQUUsSUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNSLFVBQVUsRUFBRTtJQUFFLE9BQU9RLEdBQUc7RUFBRTtFQUFFLElBQUlBLEdBQUcsS0FBSyxJQUFJLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPQSxHQUFHLEtBQUssVUFBVSxFQUFFO0lBQUUsT0FBTztNQUFFUCxPQUFPLEVBQUVPO0lBQUksQ0FBQztFQUFFO0VBQUUsSUFBSUcsS0FBSyxHQUFHRix3QkFBd0IsQ0FBQyxDQUFDO0VBQUUsSUFBSUUsS0FBSyxJQUFJQSxLQUFLLENBQUNDLEdBQUcsQ0FBQ0osR0FBRyxDQUFDLEVBQUU7SUFBRSxPQUFPRyxLQUFLLENBQUNFLEdBQUcsQ0FBQ0wsR0FBRyxDQUFDO0VBQUU7RUFBRSxJQUFJTSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQUUsSUFBSUMscUJBQXFCLEdBQUdDLE1BQU0sQ0FBQ0MsY0FBYyxJQUFJRCxNQUFNLENBQUNFLHdCQUF3QjtFQUFFLEtBQUssSUFBSUMsR0FBRyxJQUFJWCxHQUFHLEVBQUU7SUFBRSxJQUFJUSxNQUFNLENBQUNJLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNkLEdBQUcsRUFBRVcsR0FBRyxDQUFDLEVBQUU7TUFBRSxJQUFJSSxJQUFJLEdBQUdSLHFCQUFxQixHQUFHQyxNQUFNLENBQUNFLHdCQUF3QixDQUFDVixHQUFHLEVBQUVXLEdBQUcsQ0FBQyxHQUFHLElBQUk7TUFBRSxJQUFJSSxJQUFJLEtBQUtBLElBQUksQ0FBQ1YsR0FBRyxJQUFJVSxJQUFJLENBQUNDLEdBQUcsQ0FBQyxFQUFFO1FBQUVSLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDSCxNQUFNLEVBQUVLLEdBQUcsRUFBRUksSUFBSSxDQUFDO01BQUUsQ0FBQyxNQUFNO1FBQUVULE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLEdBQUdYLEdBQUcsQ0FBQ1csR0FBRyxDQUFDO01BQUU7SUFBRTtFQUFFO0VBQUVMLE1BQU0sQ0FBQ2IsT0FBTyxHQUFHTyxHQUFHO0VBQUUsSUFBSUcsS0FBSyxFQUFFO0lBQUVBLEtBQUssQ0FBQ2EsR0FBRyxDQUFDaEIsR0FBRyxFQUFFTSxNQUFNLENBQUM7RUFBRTtFQUFFLE9BQU9BLE1BQU07QUFBRTtBQVd0dUIsU0FBU1csV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFO0VBQzFCLElBQUlDLFFBQVEsR0FBR0QsS0FBSyxDQUFDQyxRQUFRO0VBQzdCLElBQUlDLFVBQVUsR0FBRzFCLEtBQUssQ0FBQzJCLE1BQU0sQ0FBQyxJQUFJLENBQUM7RUFFbkMsSUFBSXhCLHFCQUFxQixDQUFDeUIsU0FBUyxJQUFJLENBQUNGLFVBQVUsQ0FBQ0csT0FBTyxFQUFFO0lBQzFELElBQUlDLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBRTNDLElBQUlGLE9BQU8sSUFBSUMsUUFBUSxDQUFDRSxJQUFJLEVBQUU7TUFDNUJGLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDQyxXQUFXLENBQUNKLE9BQU8sQ0FBQztNQUNsQ0osVUFBVSxDQUFDRyxPQUFPLEdBQUdDLE9BQU87SUFDOUI7RUFDRjtFQUVBOUIsS0FBSyxDQUFDbUMsU0FBUyxDQUFDLFlBQVk7SUFDMUIsSUFBSWhDLHFCQUFxQixDQUFDeUIsU0FBUyxFQUFFO01BQ25DLE9BQU8sWUFBWTtRQUNqQixJQUFJRyxRQUFRLENBQUNFLElBQUksSUFBSVAsVUFBVSxDQUFDRyxPQUFPLEVBQUU7VUFDdkNFLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDRyxXQUFXLENBQUNWLFVBQVUsQ0FBQ0csT0FBTyxDQUFDO1VBQzdDSCxVQUFVLENBQUNHLE9BQU8sR0FBRyxJQUFJO1FBQzNCO01BQ0YsQ0FBQztJQUNIO0VBQ0YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUNOLE9BQU9ILFVBQVUsQ0FBQ0csT0FBTyxJQUFJMUIscUJBQXFCLENBQUN5QixTQUFTLEdBQWdCeEIsU0FBUyxDQUFDTCxPQUFPLENBQUNzQyxZQUFZLENBQUNaLFFBQVEsRUFBRUMsVUFBVSxDQUFDRyxPQUFPLENBQUMsR0FBRyxJQUFJO0FBQ2pKO0FBRUEsSUFBSVMsUUFBUSxHQUFHZixXQUFXO0FBQzFCMUIsT0FBTyxDQUFDRSxPQUFPLEdBQUd1QyxRQUFRO0FBQzFCQyxNQUFNLENBQUMxQyxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0UsT0FBTyIsImlnbm9yZUxpc3QiOltdfQ==