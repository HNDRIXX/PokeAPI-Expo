5475e7cc958c78044a1ccf1dab56301d
"use strict";

exports.__esModule = true;
exports.default = void 0;
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var Share = function () {
  function Share() {}
  Share.share = function share(content, options) {
    if (options === void 0) {
      options = {};
    }
    (0, _invariant.default)(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
    (0, _invariant.default)(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
    (0, _invariant.default)(typeof options === 'object' && options !== null, 'Options must be a valid object');
    (0, _invariant.default)(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
    if (window.navigator.share !== undefined) {
      return window.navigator.share({
        title: content.title,
        text: content.message,
        url: content.url
      });
    } else {
      return Promise.reject(new Error('Share is not supported in this browser'));
    }
  };
  _createClass(Share, null, [{
    key: "sharedAction",
    get: function get() {
      return 'sharedAction';
    }
  }, {
    key: "dismissedAction",
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return Share;
}();
var _default = Share;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiU2hhcmUiLCJzaGFyZSIsImNvbnRlbnQiLCJvcHRpb25zIiwidXJsIiwibWVzc2FnZSIsInRpdGxlIiwid2luZG93IiwibmF2aWdhdG9yIiwidW5kZWZpbmVkIiwidGV4dCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsImdldCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgU2hhcmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGFyZSgpIHt9XG5cbiAgU2hhcmUuc2hhcmUgPSBmdW5jdGlvbiBzaGFyZShjb250ZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiBjb250ZW50ICE9PSBudWxsLCAnQ29udGVudCB0byBzaGFyZSBtdXN0IGJlIGEgdmFsaWQgb2JqZWN0Jyk7XG4gICAgKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkodHlwZW9mIGNvbnRlbnQudXJsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY29udGVudC5tZXNzYWdlID09PSAnc3RyaW5nJywgJ0F0IGxlYXN0IG9uZSBvZiBVUkwgYW5kIG1lc3NhZ2UgaXMgcmVxdWlyZWQnKTtcbiAgICAoMCwgX2ludmFyaWFudC5kZWZhdWx0KSh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucyAhPT0gbnVsbCwgJ09wdGlvbnMgbXVzdCBiZSBhIHZhbGlkIG9iamVjdCcpO1xuICAgICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKCFjb250ZW50LnRpdGxlIHx8IHR5cGVvZiBjb250ZW50LnRpdGxlID09PSAnc3RyaW5nJywgJ0ludmFsaWQgdGl0bGU6IHRpdGxlIHNob3VsZCBiZSBhIHN0cmluZy4nKTtcblxuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnNoYXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnNoYXJlKHtcbiAgICAgICAgdGl0bGU6IGNvbnRlbnQudGl0bGUsXG4gICAgICAgIHRleHQ6IGNvbnRlbnQubWVzc2FnZSxcbiAgICAgICAgdXJsOiBjb250ZW50LnVybFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1NoYXJlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJykpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgd2FzIHN1Y2Nlc3NmdWxseSBzaGFyZWQuXG4gICAqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKFNoYXJlLCBudWxsLCBbe1xuICAgIGtleTogXCJzaGFyZWRBY3Rpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnc2hhcmVkQWN0aW9uJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGRpYWxvZyBoYXMgYmVlbiBkaXNtaXNzZWQuXG4gICAgICogQHBsYXRmb3JtIGlvc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzbWlzc2VkQWN0aW9uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ2Rpc21pc3NlZEFjdGlvbic7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoYXJlO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBTaGFyZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsVUFBVSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFdEUsU0FBU0Qsc0JBQXNCQSxDQUFDRSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0wsVUFBVSxHQUFHSyxHQUFHLEdBQUc7SUFBRUosT0FBTyxFQUFFSTtFQUFJLENBQUM7QUFBRTtBQUU5RixTQUFTQyxpQkFBaUJBLENBQUNDLE1BQU0sRUFBRUMsS0FBSyxFQUFFO0VBQUUsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUFFLElBQUlFLFVBQVUsR0FBR0gsS0FBSyxDQUFDQyxDQUFDLENBQUM7SUFBRUUsVUFBVSxDQUFDQyxVQUFVLEdBQUdELFVBQVUsQ0FBQ0MsVUFBVSxJQUFJLEtBQUs7SUFBRUQsVUFBVSxDQUFDRSxZQUFZLEdBQUcsSUFBSTtJQUFFLElBQUksT0FBTyxJQUFJRixVQUFVLEVBQUVBLFVBQVUsQ0FBQ0csUUFBUSxHQUFHLElBQUk7SUFBRUMsTUFBTSxDQUFDQyxjQUFjLENBQUNULE1BQU0sRUFBRUksVUFBVSxDQUFDTSxHQUFHLEVBQUVOLFVBQVUsQ0FBQztFQUFFO0FBQUU7QUFFNVQsU0FBU08sWUFBWUEsQ0FBQ0MsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFdBQVcsRUFBRTtFQUFFLElBQUlELFVBQVUsRUFBRWQsaUJBQWlCLENBQUNhLFdBQVcsQ0FBQ0csU0FBUyxFQUFFRixVQUFVLENBQUM7RUFBRSxJQUFJQyxXQUFXLEVBQUVmLGlCQUFpQixDQUFDYSxXQUFXLEVBQUVFLFdBQVcsQ0FBQztFQUFFLE9BQU9GLFdBQVc7QUFBRTtBQUV0TixJQUFJSSxLQUFLLEdBQWdCLFlBQVk7RUFDbkMsU0FBU0EsS0FBS0EsQ0FBQSxFQUFHLENBQUM7RUFFbEJBLEtBQUssQ0FBQ0MsS0FBSyxHQUFHLFNBQVNBLEtBQUtBLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0lBQzdDLElBQUlBLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtNQUN0QkEsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNkO0lBRUEsQ0FBQyxDQUFDLEVBQUV4QixVQUFVLENBQUNELE9BQU8sRUFBRSxPQUFPd0IsT0FBTyxLQUFLLFFBQVEsSUFBSUEsT0FBTyxLQUFLLElBQUksRUFBRSx5Q0FBeUMsQ0FBQztJQUNuSCxDQUFDLENBQUMsRUFBRXZCLFVBQVUsQ0FBQ0QsT0FBTyxFQUFFLE9BQU93QixPQUFPLENBQUNFLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBT0YsT0FBTyxDQUFDRyxPQUFPLEtBQUssUUFBUSxFQUFFLDZDQUE2QyxDQUFDO0lBQzlJLENBQUMsQ0FBQyxFQUFFMUIsVUFBVSxDQUFDRCxPQUFPLEVBQUUsT0FBT3lCLE9BQU8sS0FBSyxRQUFRLElBQUlBLE9BQU8sS0FBSyxJQUFJLEVBQUUsZ0NBQWdDLENBQUM7SUFDMUcsQ0FBQyxDQUFDLEVBQUV4QixVQUFVLENBQUNELE9BQU8sRUFBRSxDQUFDd0IsT0FBTyxDQUFDSSxLQUFLLElBQUksT0FBT0osT0FBTyxDQUFDSSxLQUFLLEtBQUssUUFBUSxFQUFFLDBDQUEwQyxDQUFDO0lBRXhILElBQUlDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDUCxLQUFLLEtBQUtRLFNBQVMsRUFBRTtNQUN4QyxPQUFPRixNQUFNLENBQUNDLFNBQVMsQ0FBQ1AsS0FBSyxDQUFDO1FBQzVCSyxLQUFLLEVBQUVKLE9BQU8sQ0FBQ0ksS0FBSztRQUNwQkksSUFBSSxFQUFFUixPQUFPLENBQUNHLE9BQU87UUFDckJELEdBQUcsRUFBRUYsT0FBTyxDQUFDRTtNQUNmLENBQUMsQ0FBQztJQUNKLENBQUMsTUFBTTtNQUNMLE9BQU9PLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLElBQUlDLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0lBQzVFO0VBQ0YsQ0FBQztFQU1EbEIsWUFBWSxDQUFDSyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDekJOLEdBQUcsRUFBRSxjQUFjO0lBQ25Cb0IsR0FBRyxFQUFFLFNBQVNBLEdBQUdBLENBQUEsRUFBRztNQUNsQixPQUFPLGNBQWM7SUFDdkI7RUFNRixDQUFDLEVBQUU7SUFDRHBCLEdBQUcsRUFBRSxpQkFBaUI7SUFDdEJvQixHQUFHLEVBQUUsU0FBU0EsR0FBR0EsQ0FBQSxFQUFHO01BQ2xCLE9BQU8saUJBQWlCO0lBQzFCO0VBQ0YsQ0FBQyxDQUFDLENBQUM7RUFFSCxPQUFPZCxLQUFLO0FBQ2QsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJZSxRQUFRLEdBQUdmLEtBQUs7QUFDcEJ4QixPQUFPLENBQUNFLE9BQU8sR0FBR3FDLFFBQVE7QUFDMUJDLE1BQU0sQ0FBQ3hDLE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxPQUFPIiwiaWdub3JlTGlzdCI6W119