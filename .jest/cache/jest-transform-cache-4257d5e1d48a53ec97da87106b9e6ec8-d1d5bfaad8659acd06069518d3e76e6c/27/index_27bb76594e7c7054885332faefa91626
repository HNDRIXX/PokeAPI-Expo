3b779ab329645e80b7432eafd89d8401
"use strict";

exports.__esModule = true;
exports.default = useColorScheme;
var React = _interopRequireWildcard(require("react"));
var _Appearance = _interopRequireDefault(require("../Appearance"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function useColorScheme() {
  var _React$useState = React.useState(_Appearance.default.getColorScheme()),
    colorScheme = _React$useState[0],
    setColorScheme = _React$useState[1];
  React.useEffect(function () {
    function listener(appearance) {
      setColorScheme(appearance.colorScheme);
    }
    _Appearance.default.addChangeListener(listener);
    return function () {
      return _Appearance.default.removeChangeListener(listener);
    };
  });
  return colorScheme;
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ1c2VDb2xvclNjaGVtZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX0FwcGVhcmFuY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX1JlYWN0JHVzZVN0YXRlIiwidXNlU3RhdGUiLCJnZXRDb2xvclNjaGVtZSIsImNvbG9yU2NoZW1lIiwic2V0Q29sb3JTY2hlbWUiLCJ1c2VFZmZlY3QiLCJsaXN0ZW5lciIsImFwcGVhcmFuY2UiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsInJlbW92ZUNoYW5nZUxpc3RlbmVyIiwibW9kdWxlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VDb2xvclNjaGVtZTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9BcHBlYXJhbmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQXBwZWFyYW5jZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTmljb2xhcyBHYWxsYWdoZXIuXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuZnVuY3Rpb24gdXNlQ29sb3JTY2hlbWUoKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShfQXBwZWFyYW5jZS5kZWZhdWx0LmdldENvbG9yU2NoZW1lKCkpLFxuICAgICAgY29sb3JTY2hlbWUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRDb2xvclNjaGVtZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKGFwcGVhcmFuY2UpIHtcbiAgICAgIHNldENvbG9yU2NoZW1lKGFwcGVhcmFuY2UuY29sb3JTY2hlbWUpO1xuICAgIH1cblxuICAgIF9BcHBlYXJhbmNlLmRlZmF1bHQuYWRkQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfQXBwZWFyYW5jZS5kZWZhdWx0LnJlbW92ZUNoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGNvbG9yU2NoZW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxjQUFjO0FBRWhDLElBQUlDLEtBQUssR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVyRCxJQUFJQyxXQUFXLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLGdCQUFnQixDQUFDLENBQUM7QUFFbEUsU0FBU0Usc0JBQXNCQSxDQUFDQyxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1IsVUFBVSxHQUFHUSxHQUFHLEdBQUc7SUFBRVAsT0FBTyxFQUFFTztFQUFJLENBQUM7QUFBRTtBQUU5RixTQUFTQyx3QkFBd0JBLENBQUEsRUFBRztFQUFFLElBQUksT0FBT0MsT0FBTyxLQUFLLFVBQVUsRUFBRSxPQUFPLElBQUk7RUFBRSxJQUFJQyxLQUFLLEdBQUcsSUFBSUQsT0FBTyxDQUFDLENBQUM7RUFBRUQsd0JBQXdCLEdBQUcsU0FBU0Esd0JBQXdCQSxDQUFBLEVBQUc7SUFBRSxPQUFPRSxLQUFLO0VBQUUsQ0FBQztFQUFFLE9BQU9BLEtBQUs7QUFBRTtBQUVqTixTQUFTUCx1QkFBdUJBLENBQUNJLEdBQUcsRUFBRTtFQUFFLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDUixVQUFVLEVBQUU7SUFBRSxPQUFPUSxHQUFHO0VBQUU7RUFBRSxJQUFJQSxHQUFHLEtBQUssSUFBSSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBT0EsR0FBRyxLQUFLLFVBQVUsRUFBRTtJQUFFLE9BQU87TUFBRVAsT0FBTyxFQUFFTztJQUFJLENBQUM7RUFBRTtFQUFFLElBQUlHLEtBQUssR0FBR0Ysd0JBQXdCLENBQUMsQ0FBQztFQUFFLElBQUlFLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxHQUFHLENBQUNKLEdBQUcsQ0FBQyxFQUFFO0lBQUUsT0FBT0csS0FBSyxDQUFDRSxHQUFHLENBQUNMLEdBQUcsQ0FBQztFQUFFO0VBQUUsSUFBSU0sTUFBTSxHQUFHLENBQUMsQ0FBQztFQUFFLElBQUlDLHFCQUFxQixHQUFHQyxNQUFNLENBQUNDLGNBQWMsSUFBSUQsTUFBTSxDQUFDRSx3QkFBd0I7RUFBRSxLQUFLLElBQUlDLEdBQUcsSUFBSVgsR0FBRyxFQUFFO0lBQUUsSUFBSVEsTUFBTSxDQUFDSSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDZCxHQUFHLEVBQUVXLEdBQUcsQ0FBQyxFQUFFO01BQUUsSUFBSUksSUFBSSxHQUFHUixxQkFBcUIsR0FBR0MsTUFBTSxDQUFDRSx3QkFBd0IsQ0FBQ1YsR0FBRyxFQUFFVyxHQUFHLENBQUMsR0FBRyxJQUFJO01BQUUsSUFBSUksSUFBSSxLQUFLQSxJQUFJLENBQUNWLEdBQUcsSUFBSVUsSUFBSSxDQUFDQyxHQUFHLENBQUMsRUFBRTtRQUFFUixNQUFNLENBQUNDLGNBQWMsQ0FBQ0gsTUFBTSxFQUFFSyxHQUFHLEVBQUVJLElBQUksQ0FBQztNQUFFLENBQUMsTUFBTTtRQUFFVCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxHQUFHWCxHQUFHLENBQUNXLEdBQUcsQ0FBQztNQUFFO0lBQUU7RUFBRTtFQUFFTCxNQUFNLENBQUNiLE9BQU8sR0FBR08sR0FBRztFQUFFLElBQUlHLEtBQUssRUFBRTtJQUFFQSxLQUFLLENBQUNhLEdBQUcsQ0FBQ2hCLEdBQUcsRUFBRU0sTUFBTSxDQUFDO0VBQUU7RUFBRSxPQUFPQSxNQUFNO0FBQUU7QUFXdHVCLFNBQVNaLGNBQWNBLENBQUEsRUFBRztFQUN4QixJQUFJdUIsZUFBZSxHQUFHdEIsS0FBSyxDQUFDdUIsUUFBUSxDQUFDcEIsV0FBVyxDQUFDTCxPQUFPLENBQUMwQixjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3RFQyxXQUFXLEdBQUdILGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDaENJLGNBQWMsR0FBR0osZUFBZSxDQUFDLENBQUMsQ0FBQztFQUV2Q3RCLEtBQUssQ0FBQzJCLFNBQVMsQ0FBQyxZQUFZO0lBQzFCLFNBQVNDLFFBQVFBLENBQUNDLFVBQVUsRUFBRTtNQUM1QkgsY0FBYyxDQUFDRyxVQUFVLENBQUNKLFdBQVcsQ0FBQztJQUN4QztJQUVBdEIsV0FBVyxDQUFDTCxPQUFPLENBQUNnQyxpQkFBaUIsQ0FBQ0YsUUFBUSxDQUFDO0lBRS9DLE9BQU8sWUFBWTtNQUNqQixPQUFPekIsV0FBVyxDQUFDTCxPQUFPLENBQUNpQyxvQkFBb0IsQ0FBQ0gsUUFBUSxDQUFDO0lBQzNELENBQUM7RUFDSCxDQUFDLENBQUM7RUFDRixPQUFPSCxXQUFXO0FBQ3BCO0FBRUFPLE1BQU0sQ0FBQ3BDLE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxPQUFPIiwiaWdub3JlTGlzdCI6W119