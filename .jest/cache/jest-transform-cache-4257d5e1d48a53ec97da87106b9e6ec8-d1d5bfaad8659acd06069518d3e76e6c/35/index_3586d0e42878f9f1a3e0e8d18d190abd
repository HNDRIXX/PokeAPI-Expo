2eea5b3c503eb0f23cc7d2992c652e73
'use strict';

exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _useMergeRefs = _interopRequireDefault(require("../../modules/useMergeRefs"));
var _usePressEvents = _interopRequireDefault(require("../../modules/usePressEvents"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
var _View = _interopRequireDefault(require("../View"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function TouchableOpacity(props, forwardedRef) {
  var activeOpacity = props.activeOpacity,
    delayPressIn = props.delayPressIn,
    delayPressOut = props.delayPressOut,
    delayLongPress = props.delayLongPress,
    disabled = props.disabled,
    focusable = props.focusable,
    onLongPress = props.onLongPress,
    onPress = props.onPress,
    onPressIn = props.onPressIn,
    onPressOut = props.onPressOut,
    rejectResponderTermination = props.rejectResponderTermination,
    style = props.style,
    rest = _objectWithoutPropertiesLoose(props, ["activeOpacity", "delayPressIn", "delayPressOut", "delayLongPress", "disabled", "focusable", "onLongPress", "onPress", "onPressIn", "onPressOut", "rejectResponderTermination", "style"]);
  var hostRef = (0, React.useRef)(null);
  var setRef = (0, _useMergeRefs.default)(forwardedRef, hostRef);
  var _useState = (0, React.useState)('0s'),
    duration = _useState[0],
    setDuration = _useState[1];
  var _useState2 = (0, React.useState)(null),
    opacityOverride = _useState2[0],
    setOpacityOverride = _useState2[1];
  var setOpacityTo = (0, React.useCallback)(function (value, duration) {
    setOpacityOverride(value);
    setDuration(duration ? duration / 1000 + "s" : '0s');
  }, [setOpacityOverride, setDuration]);
  var setOpacityActive = (0, React.useCallback)(function (duration) {
    setOpacityTo(activeOpacity !== null && activeOpacity !== void 0 ? activeOpacity : 0.2, duration);
  }, [activeOpacity, setOpacityTo]);
  var setOpacityInactive = (0, React.useCallback)(function (duration) {
    setOpacityTo(null, duration);
  }, [setOpacityTo]);
  var pressConfig = (0, React.useMemo)(function () {
    return {
      cancelable: !rejectResponderTermination,
      disabled: disabled,
      delayLongPress: delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressStart: function onPressStart(event) {
        var isGrant = event.dispatchConfig != null ? event.dispatchConfig.registrationName === 'onResponderGrant' : event.type === 'keydown';
        setOpacityActive(isGrant ? 0 : 150);
        if (onPressIn != null) {
          onPressIn(event);
        }
      },
      onPressEnd: function onPressEnd(event) {
        setOpacityInactive(250);
        if (onPressOut != null) {
          onPressOut(event);
        }
      }
    };
  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, setOpacityActive, setOpacityInactive]);
  var pressEventHandlers = (0, _usePressEvents.default)(hostRef, pressConfig);
  return React.createElement(_View.default, _extends({}, rest, pressEventHandlers, {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== false,
    ref: setRef,
    style: [styles.root, !disabled && styles.actionable, style, opacityOverride != null && {
      opacity: opacityOverride
    }, {
      transitionDuration: duration
    }]
  }));
}
var styles = _StyleSheet.default.create({
  root: {
    transitionProperty: 'opacity',
    transitionDuration: '0.15s',
    userSelect: 'none'
  },
  actionable: {
    cursor: 'pointer',
    touchAction: 'manipulation'
  }
});
var MemoedTouchableOpacity = React.memo(React.forwardRef(TouchableOpacity));
MemoedTouchableOpacity.displayName = 'TouchableOpacity';
var _default = MemoedTouchableOpacity;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91c2VNZXJnZVJlZnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3VzZVByZXNzRXZlbnRzIiwiX1N0eWxlU2hlZXQiLCJfVmlldyIsIm9iaiIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsIlRvdWNoYWJsZU9wYWNpdHkiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsImFjdGl2ZU9wYWNpdHkiLCJkZWxheVByZXNzSW4iLCJkZWxheVByZXNzT3V0IiwiZGVsYXlMb25nUHJlc3MiLCJkaXNhYmxlZCIsImZvY3VzYWJsZSIsIm9uTG9uZ1ByZXNzIiwib25QcmVzcyIsIm9uUHJlc3NJbiIsIm9uUHJlc3NPdXQiLCJyZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbiIsInN0eWxlIiwicmVzdCIsImhvc3RSZWYiLCJ1c2VSZWYiLCJzZXRSZWYiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsImR1cmF0aW9uIiwic2V0RHVyYXRpb24iLCJfdXNlU3RhdGUyIiwib3BhY2l0eU92ZXJyaWRlIiwic2V0T3BhY2l0eU92ZXJyaWRlIiwic2V0T3BhY2l0eVRvIiwidXNlQ2FsbGJhY2siLCJ2YWx1ZSIsInNldE9wYWNpdHlBY3RpdmUiLCJzZXRPcGFjaXR5SW5hY3RpdmUiLCJwcmVzc0NvbmZpZyIsInVzZU1lbW8iLCJjYW5jZWxhYmxlIiwiZGVsYXlQcmVzc1N0YXJ0IiwiZGVsYXlQcmVzc0VuZCIsIm9uUHJlc3NTdGFydCIsImV2ZW50IiwiaXNHcmFudCIsImRpc3BhdGNoQ29uZmlnIiwicmVnaXN0cmF0aW9uTmFtZSIsInR5cGUiLCJvblByZXNzRW5kIiwicHJlc3NFdmVudEhhbmRsZXJzIiwiY3JlYXRlRWxlbWVudCIsImFjY2Vzc2liaWxpdHlEaXNhYmxlZCIsInJlZiIsInN0eWxlcyIsInJvb3QiLCJhY3Rpb25hYmxlIiwib3BhY2l0eSIsInRyYW5zaXRpb25EdXJhdGlvbiIsImNyZWF0ZSIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsInVzZXJTZWxlY3QiLCJjdXJzb3IiLCJ0b3VjaEFjdGlvbiIsIk1lbW9lZFRvdWNoYWJsZU9wYWNpdHkiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdXNlTWVyZ2VSZWZzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy91c2VNZXJnZVJlZnNcIikpO1xuXG52YXIgX3VzZVByZXNzRXZlbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy91c2VQcmVzc0V2ZW50c1wiKSk7XG5cbnZhciBfU3R5bGVTaGVldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1N0eWxlU2hlZXRcIikpO1xuXG52YXIgX1ZpZXcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9WaWV3XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuLyoqXG4gKiBBIHdyYXBwZXIgZm9yIG1ha2luZyB2aWV3cyByZXNwb25kIHByb3Blcmx5IHRvIHRvdWNoZXMuXG4gKiBPbiBwcmVzcyBkb3duLCB0aGUgb3BhY2l0eSBvZiB0aGUgd3JhcHBlZCB2aWV3IGlzIGRlY3JlYXNlZCwgZGltbWluZyBpdC5cbiAqL1xuZnVuY3Rpb24gVG91Y2hhYmxlT3BhY2l0eShwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBhY3RpdmVPcGFjaXR5ID0gcHJvcHMuYWN0aXZlT3BhY2l0eSxcbiAgICAgIGRlbGF5UHJlc3NJbiA9IHByb3BzLmRlbGF5UHJlc3NJbixcbiAgICAgIGRlbGF5UHJlc3NPdXQgPSBwcm9wcy5kZWxheVByZXNzT3V0LFxuICAgICAgZGVsYXlMb25nUHJlc3MgPSBwcm9wcy5kZWxheUxvbmdQcmVzcyxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBmb2N1c2FibGUgPSBwcm9wcy5mb2N1c2FibGUsXG4gICAgICBvbkxvbmdQcmVzcyA9IHByb3BzLm9uTG9uZ1ByZXNzLFxuICAgICAgb25QcmVzcyA9IHByb3BzLm9uUHJlc3MsXG4gICAgICBvblByZXNzSW4gPSBwcm9wcy5vblByZXNzSW4sXG4gICAgICBvblByZXNzT3V0ID0gcHJvcHMub25QcmVzc091dCxcbiAgICAgIHJlamVjdFJlc3BvbmRlclRlcm1pbmF0aW9uID0gcHJvcHMucmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24sXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJhY3RpdmVPcGFjaXR5XCIsIFwiZGVsYXlQcmVzc0luXCIsIFwiZGVsYXlQcmVzc091dFwiLCBcImRlbGF5TG9uZ1ByZXNzXCIsIFwiZGlzYWJsZWRcIiwgXCJmb2N1c2FibGVcIiwgXCJvbkxvbmdQcmVzc1wiLCBcIm9uUHJlc3NcIiwgXCJvblByZXNzSW5cIiwgXCJvblByZXNzT3V0XCIsIFwicmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb25cIiwgXCJzdHlsZVwiXSk7XG5cbiAgdmFyIGhvc3RSZWYgPSAoMCwgUmVhY3QudXNlUmVmKShudWxsKTtcbiAgdmFyIHNldFJlZiA9ICgwLCBfdXNlTWVyZ2VSZWZzLmRlZmF1bHQpKGZvcndhcmRlZFJlZiwgaG9zdFJlZik7XG5cbiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBSZWFjdC51c2VTdGF0ZSkoJzBzJyksXG4gICAgICBkdXJhdGlvbiA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldER1cmF0aW9uID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUyID0gKDAsIFJlYWN0LnVzZVN0YXRlKShudWxsKSxcbiAgICAgIG9wYWNpdHlPdmVycmlkZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRPcGFjaXR5T3ZlcnJpZGUgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBzZXRPcGFjaXR5VG8gPSAoMCwgUmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICBzZXRPcGFjaXR5T3ZlcnJpZGUodmFsdWUpO1xuICAgIHNldER1cmF0aW9uKGR1cmF0aW9uID8gZHVyYXRpb24gLyAxMDAwICsgXCJzXCIgOiAnMHMnKTtcbiAgfSwgW3NldE9wYWNpdHlPdmVycmlkZSwgc2V0RHVyYXRpb25dKTtcbiAgdmFyIHNldE9wYWNpdHlBY3RpdmUgPSAoMCwgUmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHNldE9wYWNpdHlUbyhhY3RpdmVPcGFjaXR5ICE9PSBudWxsICYmIGFjdGl2ZU9wYWNpdHkgIT09IHZvaWQgMCA/IGFjdGl2ZU9wYWNpdHkgOiAwLjIsIGR1cmF0aW9uKTtcbiAgfSwgW2FjdGl2ZU9wYWNpdHksIHNldE9wYWNpdHlUb10pO1xuICB2YXIgc2V0T3BhY2l0eUluYWN0aXZlID0gKDAsIFJlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICBzZXRPcGFjaXR5VG8obnVsbCwgZHVyYXRpb24pO1xuICB9LCBbc2V0T3BhY2l0eVRvXSk7XG4gIHZhciBwcmVzc0NvbmZpZyA9ICgwLCBSZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbmNlbGFibGU6ICFyZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbixcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGRlbGF5TG9uZ1ByZXNzOiBkZWxheUxvbmdQcmVzcyxcbiAgICAgIGRlbGF5UHJlc3NTdGFydDogZGVsYXlQcmVzc0luLFxuICAgICAgZGVsYXlQcmVzc0VuZDogZGVsYXlQcmVzc091dCxcbiAgICAgIG9uTG9uZ1ByZXNzOiBvbkxvbmdQcmVzcyxcbiAgICAgIG9uUHJlc3M6IG9uUHJlc3MsXG4gICAgICBvblByZXNzU3RhcnQ6IGZ1bmN0aW9uIG9uUHJlc3NTdGFydChldmVudCkge1xuICAgICAgICB2YXIgaXNHcmFudCA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnICE9IG51bGwgPyBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lID09PSAnb25SZXNwb25kZXJHcmFudCcgOiBldmVudC50eXBlID09PSAna2V5ZG93bic7XG4gICAgICAgIHNldE9wYWNpdHlBY3RpdmUoaXNHcmFudCA/IDAgOiAxNTApO1xuXG4gICAgICAgIGlmIChvblByZXNzSW4gIT0gbnVsbCkge1xuICAgICAgICAgIG9uUHJlc3NJbihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblByZXNzRW5kOiBmdW5jdGlvbiBvblByZXNzRW5kKGV2ZW50KSB7XG4gICAgICAgIHNldE9wYWNpdHlJbmFjdGl2ZSgyNTApO1xuXG4gICAgICAgIGlmIChvblByZXNzT3V0ICE9IG51bGwpIHtcbiAgICAgICAgICBvblByZXNzT3V0KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0sIFtkZWxheUxvbmdQcmVzcywgZGVsYXlQcmVzc0luLCBkZWxheVByZXNzT3V0LCBkaXNhYmxlZCwgb25Mb25nUHJlc3MsIG9uUHJlc3MsIG9uUHJlc3NJbiwgb25QcmVzc091dCwgcmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24sIHNldE9wYWNpdHlBY3RpdmUsIHNldE9wYWNpdHlJbmFjdGl2ZV0pO1xuICB2YXIgcHJlc3NFdmVudEhhbmRsZXJzID0gKDAsIF91c2VQcmVzc0V2ZW50cy5kZWZhdWx0KShob3N0UmVmLCBwcmVzc0NvbmZpZyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfVmlldy5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgcmVzdCwgcHJlc3NFdmVudEhhbmRsZXJzLCB7XG4gICAgYWNjZXNzaWJpbGl0eURpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c2FibGU6ICFkaXNhYmxlZCAmJiBmb2N1c2FibGUgIT09IGZhbHNlLFxuICAgIHJlZjogc2V0UmVmLFxuICAgIHN0eWxlOiBbc3R5bGVzLnJvb3QsICFkaXNhYmxlZCAmJiBzdHlsZXMuYWN0aW9uYWJsZSwgc3R5bGUsIG9wYWNpdHlPdmVycmlkZSAhPSBudWxsICYmIHtcbiAgICAgIG9wYWNpdHk6IG9wYWNpdHlPdmVycmlkZVxuICAgIH0sIHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogZHVyYXRpb25cbiAgICB9XVxuICB9KSk7XG59XG5cbnZhciBzdHlsZXMgPSBfU3R5bGVTaGVldC5kZWZhdWx0LmNyZWF0ZSh7XG4gIHJvb3Q6IHtcbiAgICB0cmFuc2l0aW9uUHJvcGVydHk6ICdvcGFjaXR5JyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjE1cycsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnXG4gIH0sXG4gIGFjdGlvbmFibGU6IHtcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB0b3VjaEFjdGlvbjogJ21hbmlwdWxhdGlvbidcbiAgfVxufSk7XG5cbnZhciBNZW1vZWRUb3VjaGFibGVPcGFjaXR5ID0gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oIC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKFRvdWNoYWJsZU9wYWNpdHkpKTtcbk1lbW9lZFRvdWNoYWJsZU9wYWNpdHkuZGlzcGxheU5hbWUgPSAnVG91Y2hhYmxlT3BhY2l0eSc7XG52YXIgX2RlZmF1bHQgPSBNZW1vZWRUb3VjaGFibGVPcGFjaXR5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFckQsSUFBSUMsYUFBYSxHQUFHQyxzQkFBc0IsQ0FBQ0YsT0FBTyw2QkFBNkIsQ0FBQyxDQUFDO0FBRWpGLElBQUlHLGVBQWUsR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sK0JBQStCLENBQUMsQ0FBQztBQUVyRixJQUFJSSxXQUFXLEdBQUdGLHNCQUFzQixDQUFDRixPQUFPLGdCQUFnQixDQUFDLENBQUM7QUFFbEUsSUFBSUssS0FBSyxHQUFHSCxzQkFBc0IsQ0FBQ0YsT0FBTyxVQUFVLENBQUMsQ0FBQztBQUV0RCxTQUFTRSxzQkFBc0JBLENBQUNJLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDVixVQUFVLEdBQUdVLEdB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