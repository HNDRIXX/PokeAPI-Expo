c2221325f17698ebf865cad87b0302a8
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    this._subscriptionsForType = {};
  }
  var _proto = EventSubscriptionVendor.prototype;
  _proto.addSubscription = function addSubscription(eventType, subscription) {
    (0, _invariant.default)(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
    if (!this._subscriptionsForType[eventType]) {
      this._subscriptionsForType[eventType] = [];
    }
    var key = this._subscriptionsForType[eventType].length;
    this._subscriptionsForType[eventType].push(subscription);
    subscription.eventType = eventType;
    subscription.key = key;
    return subscription;
  };
  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
    if (eventType == null) {
      this._subscriptionsForType = {};
    } else {
      delete this._subscriptionsForType[eventType];
    }
  };
  _proto.removeSubscription = function removeSubscription(subscription) {
    var eventType = subscription.eventType;
    var key = subscription.key;
    var subscriptionsForType = this._subscriptionsForType[eventType];
    if (subscriptionsForType) {
      delete subscriptionsForType[key];
    }
  };
  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
    return this._subscriptionsForType[eventType];
  };
  return EventSubscriptionVendor;
}();
var _default = EventSubscriptionVendor;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsIl9zdWJzY3JpcHRpb25zRm9yVHlwZSIsIl9wcm90byIsInByb3RvdHlwZSIsImFkZFN1YnNjcmlwdGlvbiIsImV2ZW50VHlwZSIsInN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJrZXkiLCJsZW5ndGgiLCJwdXNoIiwicmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbnNGb3JUeXBlIiwiZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIl9FdmVudFN1YnNjcmlwdGlvblZlbmRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBFdmVudFN1YnNjcmlwdGlvblZlbmRvciBzdG9yZXMgYSBzZXQgb2YgRXZlbnRTdWJzY3JpcHRpb25zIHRoYXQgYXJlXG4gKiBzdWJzY3JpYmVkIHRvIGEgcGFydGljdWxhciBldmVudCB0eXBlLlxuICovXG52YXIgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFdmVudFN1YnNjcmlwdGlvblZlbmRvcigpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgc3Vic2NyaXB0aW9uIGtleWVkIGJ5IGFuIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHBhcmFtIHtFdmVudFN1YnNjcmlwdGlvbn0gc3Vic2NyaXB0aW9uXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gYWRkU3Vic2NyaXB0aW9uKGV2ZW50VHlwZSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoc3Vic2NyaXB0aW9uLnN1YnNjcmliZXIgPT09IHRoaXMsICdUaGUgc3Vic2NyaWJlciBvZiB0aGUgc3Vic2NyaXB0aW9uIGlzIGluY29ycmVjdGx5IHNldC4nKTtcblxuICAgIGlmICghdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXSkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXSA9IFtdO1xuICAgIH1cblxuICAgIHZhciBrZXkgPSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdLmxlbmd0aDtcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0ucHVzaChzdWJzY3JpcHRpb24pO1xuXG4gICAgc3Vic2NyaXB0aW9uLmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICBzdWJzY3JpcHRpb24ua2V5ID0ga2V5O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBidWxrIHNldCBvZiB0aGUgc3Vic2NyaXB0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBldmVudFR5cGUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudCB0eXBlIHdob3NlXG4gICAqICAgcmVnaXN0ZXJlZCBzdXBzY3JpcHRpb25zIHRvIHJlbW92ZSwgaWYgbnVsbCByZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZUFsbFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiByZW1vdmVBbGxTdWJzY3JpcHRpb25zKGV2ZW50VHlwZSkge1xuICAgIGlmIChldmVudFR5cGUgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLiBJbnN0ZWFkIG9mIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgY2FsbFxuICAgKiBgc3Vic2NyaXB0aW9uLnJlbW92ZSgpYCBkaXJlY3RseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiByZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gICAgdmFyIGV2ZW50VHlwZSA9IHN1YnNjcmlwdGlvbi5ldmVudFR5cGU7XG4gICAgdmFyIGtleSA9IHN1YnNjcmlwdGlvbi5rZXk7XG4gICAgdmFyIHN1YnNjcmlwdGlvbnNGb3JUeXBlID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcblxuICAgIGlmIChzdWJzY3JpcHRpb25zRm9yVHlwZSkge1xuICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNGb3JUeXBlW2tleV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBzdWJzY3JpcHRpb25zIHRoYXQgYXJlIGN1cnJlbnRseSByZWdpc3RlcmVkIGZvciB0aGVcbiAgICogZ2l2ZW4gZXZlbnQgdHlwZS5cbiAgICpcbiAgICogTm90ZTogVGhpcyBhcnJheSBjYW4gYmUgcG90ZW50aWFsbHkgc3BhcnNlIGFzIHN1YnNjcmlwdGlvbnMgYXJlIGRlbGV0ZWRcbiAgICogZnJvbSBpdCB3aGVuIHRoZXkgYXJlIHJlbW92ZWQuXG4gICAqXG4gICAqIFRPRE86IFRoaXMgcmV0dXJucyBhIG51bGxhYmxlIGFycmF5LiB3YXQ/XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHJldHVybnMgez9hcnJheX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUgPSBmdW5jdGlvbiBnZXRTdWJzY3JpcHRpb25zRm9yVHlwZShldmVudFR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgfTtcblxuICByZXR1cm4gRXZlbnRTdWJzY3JpcHRpb25WZW5kb3I7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtB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