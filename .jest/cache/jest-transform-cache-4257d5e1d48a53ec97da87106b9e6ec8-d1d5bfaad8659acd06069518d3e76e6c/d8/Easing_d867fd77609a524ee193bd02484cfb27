81644fe5bb1de7aa75a585a04dcb301a
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _bezier2 = _interopRequireDefault(require("./bezier"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _ease;
var Easing = function () {
  function Easing() {}
  Easing.step0 = function step0(n) {
    return n > 0 ? 1 : 0;
  };
  Easing.step1 = function step1(n) {
    return n >= 1 ? 1 : 0;
  };
  Easing.linear = function linear(t) {
    return t;
  };
  Easing.ease = function ease(t) {
    if (!_ease) {
      _ease = Easing.bezier(0.42, 0, 1, 1);
    }
    return _ease(t);
  };
  Easing.quad = function quad(t) {
    return t * t;
  };
  Easing.cubic = function cubic(t) {
    return t * t * t;
  };
  Easing.poly = function poly(n) {
    return function (t) {
      return Math.pow(t, n);
    };
  };
  Easing.sin = function sin(t) {
    return 1 - Math.cos(t * Math.PI / 2);
  };
  Easing.circle = function circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  };
  Easing.exp = function exp(t) {
    return Math.pow(2, 10 * (t - 1));
  };
  Easing.elastic = function elastic(bounciness) {
    if (bounciness === void 0) {
      bounciness = 1;
    }
    var p = bounciness * Math.PI;
    return function (t) {
      return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
    };
  };
  Easing.back = function back(s) {
    if (s === void 0) {
      s = 1.70158;
    }
    return function (t) {
      return t * t * ((s + 1) * t - s);
    };
  };
  Easing.bounce = function bounce(t) {
    if (t < 1 / 2.75) {
      return 7.5625 * t * t;
    }
    if (t < 2 / 2.75) {
      var _t = t - 1.5 / 2.75;
      return 7.5625 * _t * _t + 0.75;
    }
    if (t < 2.5 / 2.75) {
      var _t2 = t - 2.25 / 2.75;
      return 7.5625 * _t2 * _t2 + 0.9375;
    }
    var t2 = t - 2.625 / 2.75;
    return 7.5625 * t2 * t2 + 0.984375;
  };
  Easing.bezier = function bezier(x1, y1, x2, y2) {
    return (0, _bezier2.default)(x1, y1, x2, y2);
  };
  Easing.in = function _in(easing) {
    return easing;
  };
  Easing.out = function out(easing) {
    return function (t) {
      return 1 - easing(1 - t);
    };
  };
  Easing.inOut = function inOut(easing) {
    return function (t) {
      if (t < 0.5) {
        return easing(t * 2) / 2;
      }
      return 1 - easing((1 - t) * 2) / 2;
    };
  };
  return Easing;
}();
var _default = Easing;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,