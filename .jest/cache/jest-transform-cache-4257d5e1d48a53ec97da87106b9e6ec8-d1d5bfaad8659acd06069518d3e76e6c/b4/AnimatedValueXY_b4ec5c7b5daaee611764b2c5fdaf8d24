7daf4c9dbb9b515b3f78d3226cc233be
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _AnimatedValue = _interopRequireDefault(require("./AnimatedValue"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
var _uniqueId = 1;
var AnimatedValueXY = function (_AnimatedWithChildren) {
  _inheritsLoose(AnimatedValueXY, _AnimatedWithChildren);
  function AnimatedValueXY(valueIn) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    var value = valueIn || {
      x: 0,
      y: 0
    };
    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this.x = new _AnimatedValue.default(value.x);
      _this.y = new _AnimatedValue.default(value.y);
    } else {
      (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
      _this.x = value.x;
      _this.y = value.y;
    }
    _this._listeners = {};
    return _this;
  }
  var _proto = AnimatedValueXY.prototype;
  _proto.setValue = function setValue(value) {
    this.x.setValue(value.x);
    this.y.setValue(value.y);
  };
  _proto.setOffset = function setOffset(offset) {
    this.x.setOffset(offset.x);
    this.y.setOffset(offset.y);
  };
  _proto.flattenOffset = function flattenOffset() {
    this.x.flattenOffset();
    this.y.flattenOffset();
  };
  _proto.extractOffset = function extractOffset() {
    this.x.extractOffset();
    this.y.extractOffset();
  };
  _proto.__getValue = function __getValue() {
    return {
      x: this.x.__getValue(),
      y: this.y.__getValue()
    };
  };
  _proto.resetAnimation = function resetAnimation(callback) {
    this.x.resetAnimation();
    this.y.resetAnimation();
    callback && callback(this.__getValue());
  };
  _proto.stopAnimation = function stopAnimation(callback) {
    this.x.stopAnimation();
    this.y.stopAnimation();
    callback && callback(this.__getValue());
  };
  _proto.addListener = function addListener(callback) {
    var _this2 = this;
    var id = String(_uniqueId++);
    var jointCallback = function jointCallback(_ref) {
      var number = _ref.value;
      callback(_this2.__getValue());
    };
    this._listeners[id] = {
      x: this.x.addListener(jointCallback),
      y: this.y.addListener(jointCallback)
    };
    return id;
  };
  _proto.removeListener = function removeListener(id) {
    this.x.removeListener(this._listeners[id].x);
    this.y.removeListener(this._listeners[id].y);
    delete this._listeners[id];
  };
  _proto.removeAllListeners = function removeAllListeners() {
    this.x.removeAllListeners();
    this.y.removeAllListeners();
    this._listeners = {};
  };
  _proto.getLayout = function getLayout() {
    return {
      left: this.x,
      top: this.y
    };
  };
  _proto.getTranslateTransform = function getTranslateTransform() {
    return [{
      translateX: this.x
    }, {
      translateY: this.y
    }];
  };
  return AnimatedValueXY;
}(_AnimatedWithChildren2.default);
var _default = AnimatedValueXY;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfQW5pbWF0ZWRWYWx1ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuMiIsIl9pbnZhcmlhbnQiLCJvYmoiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl91bmlxdWVJZCIsIkFuaW1hdGVkVmFsdWVYWSIsIl9BbmltYXRlZFdpdGhDaGlsZHJlbiIsInZhbHVlSW4iLCJfdGhpcyIsImNhbGwiLCJ2YWx1ZSIsIngiLCJ5IiwiX2xpc3RlbmVycyIsIl9wcm90byIsInNldFZhbHVlIiwic2V0T2Zmc2V0Iiwib2Zmc2V0IiwiZmxhdHRlbk9mZnNldCIsImV4dHJhY3RPZmZzZXQiLCJfX2dldFZhbHVlIiwicmVzZXRBbmltYXRpb24iLCJjYWxsYmFjayIsInN0b3BBbmltYXRpb24iLCJhZGRMaXN0ZW5lciIsIl90aGlzMiIsImlkIiwiU3RyaW5nIiwiam9pbnRDYWxsYmFjayIsIl9yZWYiLCJudW1iZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImdldExheW91dCIsImxlZnQiLCJ0b3AiLCJnZXRUcmFuc2xhdGVUcmFuc2Zvcm0iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWRWYWx1ZVhZLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9BbmltYXRlZFZhbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BbmltYXRlZFZhbHVlXCIpKTtcblxudmFyIF9BbmltYXRlZFdpdGhDaGlsZHJlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FuaW1hdGVkV2l0aENoaWxkcmVuXCIpKTtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF91bmlxdWVJZCA9IDE7XG4vKipcbiAqIDJEIFZhbHVlIGZvciBkcml2aW5nIDJEIGFuaW1hdGlvbnMsIHN1Y2ggYXMgcGFuIGdlc3R1cmVzLiBBbG1vc3QgaWRlbnRpY2FsXG4gKiBBUEkgdG8gbm9ybWFsIGBBbmltYXRlZC5WYWx1ZWAsIGJ1dCBtdWx0aXBsZXhlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbFxuICovXG5cbnZhciBBbmltYXRlZFZhbHVlWFkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRlZFdpdGhDaGlsZHJlbikge1xuICBfaW5oZXJpdHNMb29zZShBbmltYXRlZFZhbHVlWFksIF9BbmltYXRlZFdpdGhDaGlsZHJlbik7XG5cbiAgZnVuY3Rpb24gQW5pbWF0ZWRWYWx1ZVhZKHZhbHVlSW4pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9BbmltYXRlZFdpdGhDaGlsZHJlbi5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgdmFyIHZhbHVlID0gdmFsdWVJbiB8fCB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07IC8vIGZpeG1lOiBzaG91bGRuJ3QgbmVlZCBgOiBhbnlgXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlLnggPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZS55ID09PSAnbnVtYmVyJykge1xuICAgICAgX3RoaXMueCA9IG5ldyBfQW5pbWF0ZWRWYWx1ZS5kZWZhdWx0KHZhbHVlLngpO1xuICAgICAgX3RoaXMueSA9IG5ldyBfQW5pbWF0ZWRWYWx1ZS5kZWZhdWx0KHZhbHVlLnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX2ludmFyaWFudC5kZWZhdWx0KSh2YWx1ZS54IGluc3RhbmNlb2YgX0FuaW1hdGVkVmFsdWUuZGVmYXVsdCAmJiB2YWx1ZS55IGluc3RhbmNlb2YgX0FuaW1hdGVkVmFsdWUuZGVmYXVsdCwgJ0FuaW1hdGVkVmFsdWVYWSBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gb2JqZWN0IG9mIG51bWJlcnMgb3IgJyArICdBbmltYXRlZFZhbHVlcy4nKTtcbiAgICAgIF90aGlzLnggPSB2YWx1ZS54O1xuICAgICAgX3RoaXMueSA9IHZhbHVlLnk7XG4gICAgfVxuXG4gICAgX3RoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogRGlyZWN0bHkgc2V0IHRoZSB2YWx1ZS4gVGhpcyB3aWxsIHN0b3AgYW55IGFuaW1hdGlvbnMgcnVubmluZyBvbiB0aGUgdmFsdWVcbiAgICogYW5kIHVwZGF0ZSBhbGwgdGhlIGJvdW5kIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI3NldHZhbHVlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGVkVmFsdWVYWS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLnguc2V0VmFsdWUodmFsdWUueCk7XG4gICAgdGhpcy55LnNldFZhbHVlKHZhbHVlLnkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGFuIG9mZnNldCB0aGF0IGlzIGFwcGxpZWQgb24gdG9wIG9mIHdoYXRldmVyIHZhbHVlIGlzIHNldCwgd2hldGhlclxuICAgKiB2aWEgYHNldFZhbHVlYCwgYW4gYW5pbWF0aW9uLCBvciBgQW5pbWF0ZWQuZXZlbnRgLiBVc2VmdWwgZm9yIGNvbXBlbnNhdGluZ1xuICAgKiB0aGluZ3MgbGlrZSB0aGUgc3RhcnQgb2YgYSBwYW4gZ2VzdHVyZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvYW5pbWF0ZWR2YWx1ZXh5Lmh0bWwjc2V0b2Zmc2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldE9mZnNldCA9IGZ1bmN0aW9uIHNldE9mZnNldChvZmZzZXQpIHtcbiAgICB0aGlzLnguc2V0T2Zmc2V0KG9mZnNldC54KTtcbiAgICB0aGlzLnkuc2V0T2Zmc2V0KG9mZnNldC55KTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2VzIHRoZSBvZmZzZXQgdmFsdWUgaW50byB0aGUgYmFzZSB2YWx1ZSBhbmQgcmVzZXRzIHRoZSBvZmZzZXQgdG8gemVyby5cbiAgICogVGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgdmFsdWUgaXMgdW5jaGFuZ2VkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNmbGF0dGVub2Zmc2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZsYXR0ZW5PZmZzZXQgPSBmdW5jdGlvbiBmbGF0dGVuT2Zmc2V0KCkge1xuICAgIHRoaXMueC5mbGF0dGVuT2Zmc2V0KCk7XG4gICAgdGhpcy55LmZsYXR0ZW5PZmZzZXQoKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgb2Zmc2V0IHZhbHVlIHRvIHRoZSBiYXNlIHZhbHVlLCBhbmQgcmVzZXRzIHRoZSBiYXNlIHZhbHVlIHRvXG4gICAqIHplcm8uIFRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIHZhbHVlIGlzIHVuY2hhbmdlZC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvYW5pbWF0ZWR2YWx1ZXh5Lmh0bWwjZXh0cmFjdG9mZnNldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHRyYWN0T2Zmc2V0ID0gZnVuY3Rpb24gZXh0cmFjdE9mZnNldCgpIHtcbiAgICB0aGlzLnguZXh0cmFjdE9mZnNldCgpO1xuICAgIHRoaXMueS5leHRyYWN0T2Zmc2V0KCk7XG4gIH07XG5cbiAgX3Byb3RvLl9fZ2V0VmFsdWUgPSBmdW5jdGlvbiBfX2dldFZhbHVlKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLnguX19nZXRWYWx1ZSgpLFxuICAgICAgeTogdGhpcy55Ll9fZ2V0VmFsdWUoKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFN0b3BzIGFueSBhbmltYXRpb24gYW5kIHJlc2V0cyB0aGUgdmFsdWUgdG8gaXRzIG9yaWdpbmFsLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNyZXNldGFuaW1hdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldEFuaW1hdGlvbiA9IGZ1bmN0aW9uIHJlc2V0QW5pbWF0aW9uKGNhbGxiYWNrKSB7XG4gICAgdGhpcy54LnJlc2V0QW5pbWF0aW9uKCk7XG4gICAgdGhpcy55LnJlc2V0QW5pbWF0aW9uKCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sodGhpcy5fX2dldFZhbHVlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBTdG9wcyBhbnkgcnVubmluZyBhbmltYXRpb24gb3IgdHJhY2tpbmcuIGBjYWxsYmFja2AgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgKiBmaW5hbCB2YWx1ZSBhZnRlciBzdG9wcGluZyB0aGUgYW5pbWF0aW9uLCB3aGljaCBpcyB1c2VmdWwgZm9yIHVwZGF0aW5nXG4gICAqIHN0YXRlIHRvIG1hdGNoIHRoZSBhbmltYXRpb24gcG9zaXRpb24gd2l0aCBsYXlvdXQuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI3N0b3BhbmltYXRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uIHN0b3BBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLnguc3RvcEFuaW1hdGlvbigpO1xuICAgIHRoaXMueS5zdG9wQW5pbWF0aW9uKCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sodGhpcy5fX2dldFZhbHVlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGFuIGFzeW5jaHJvbm91cyBsaXN0ZW5lciB0byB0aGUgdmFsdWUgc28geW91IGNhbiBvYnNlcnZlIHVwZGF0ZXMgZnJvbVxuICAgKiBhbmltYXRpb25zLiAgVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSB0aGVyZSBpcyBubyB3YXkgdG8gc3luY2hyb25vdXNseSByZWFkXG4gICAqIHRoZSB2YWx1ZSBiZWNhdXNlIGl0IG1pZ2h0IGJlIGRyaXZlbiBuYXRpdmVseS5cbiAgICpcbiAgICogUmV0dXJucyBhIHN0cmluZyB0aGF0IHNlcnZlcyBhcyBhbiBpZGVudGlmaWVyIGZvciB0aGUgbGlzdGVuZXIuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI2FkZGxpc3RlbmVyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBpZCA9IFN0cmluZyhfdW5pcXVlSWQrKyk7XG5cbiAgICB2YXIgam9pbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGpvaW50Q2FsbGJhY2soX3JlZikge1xuICAgICAgdmFyIG51bWJlciA9IF9yZWYudmFsdWU7XG4gICAgICBjYWxsYmFjayhfdGhpczIuX19nZXRWYWx1ZSgpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzW2lkXSA9IHtcbiAgICAgIHg6IHRoaXMueC5hZGRMaXN0ZW5lcihqb2ludENhbGxiYWNrKSxcbiAgICAgIHk6IHRoaXMueS5hZGRMaXN0ZW5lcihqb2ludENhbGxiYWNrKVxuICAgIH07XG4gICAgcmV0dXJuIGlkO1xuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgbGlzdGVuZXIuIFRoZSBgaWRgIHBhcmFtIHNoYWxsIG1hdGNoIHRoZSBpZGVudGlmaWVyXG4gICAqIHByZXZpb3VzbHkgcmV0dXJuZWQgYnkgYGFkZExpc3RlbmVyKClgLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNyZW1vdmVsaXN0ZW5lclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGlkKSB7XG4gICAgdGhpcy54LnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyc1tpZF0ueCk7XG4gICAgdGhpcy55LnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyc1tpZF0ueSk7XG4gICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tpZF07XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI3JlbW92ZWFsbGxpc3RlbmVyc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy54LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMueS5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgYHt4LCB5fWAgaW50byBge2xlZnQsIHRvcH1gIGZvciB1c2UgaW4gc3R5bGUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI2dldGxheW91dFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRMYXlvdXQgPSBmdW5jdGlvbiBnZXRMYXlvdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHRoaXMueCxcbiAgICAgIHRvcDogdGhpcy55XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgYHt4LCB5fWAgaW50byBhIHVzZWFibGUgdHJhbnNsYXRpb24gdHJhbnNmb3JtLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNnZXR0cmFuc2xhdGV0cmFuc2Zvcm1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0VHJhbnNsYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gZ2V0VHJhbnNsYXRlVHJhbnNmb3JtKCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdHJhbnNsYXRlWDogdGhpcy54XG4gICAgfSwge1xuICAgICAgdHJhbnNsYXRlWTogdGhpcy55XG4gICAgfV07XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGVkVmFsdWVYWTtcbn0oX0FuaW1hdGVkV2l0aENoaWxkcmVuMi5kZWZhdWx0KTtcblxudmFyIF9kZWZhdWx0ID0gQW5pbWF0ZWRWYWx1ZVhZO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxjQUFjLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLGtCQUFrQixDQUFDLENBQUM7QUFFdkUsSUFBSUMsc0JBQXNCLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLHlCQUF5QixDQUFDLENBQUM7QUFFdEYsSUFBSUUsVUFBVSxHQUFHSCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFdEUsU0FBU0Qsc0JBQXNCQSxDQUFDSSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1AsVUFBVSxHQUFHTyxHQUFHLEdBQUc7SUFBRU4sT0FBTyxFQUFFTTtFQUFJLENBQUM7QUFBRTtBQUU5RixTQUFTQyxjQUFjQSxDQUFDQyxRQUFRLEVBQUVDLFVBQVUsRUFBRTtFQUFFRCxRQUFRLENBQUNFLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENB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