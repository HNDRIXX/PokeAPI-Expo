135bcc84e5646ff8de9cba7b182aaef0
"use strict";

exports.__esModule = true;
exports.default = usePlatformMethods;
var _UIManager = _interopRequireDefault(require("../../exports/UIManager"));
var _createDOMProps = _interopRequireDefault(require("../createDOMProps"));
var _useStable = _interopRequireDefault(require("../useStable"));
var _react = require("react");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var emptyObject = {};
function setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {
  if (node != null && nativeProps) {
    var domProps = (0, _createDOMProps.default)(null, _objectSpread(_objectSpread({
      pointerEvents: pointerEvents
    }, nativeProps), {}, {
      classList: [classList, nativeProps.className],
      style: [style, nativeProps.style]
    }));
    var nextDomStyle = domProps.style;
    if (previousStyleRef.current != null) {
      if (domProps.style == null) {
        domProps.style = {};
      }
      for (var styleName in previousStyleRef.current) {
        if (domProps.style[styleName] == null) {
          domProps.style[styleName] = '';
        }
      }
    }
    previousStyleRef.current = nextDomStyle;
    _UIManager.default.updateView(node, domProps);
  }
}
function usePlatformMethods(_ref) {
  var classList = _ref.classList,
    pointerEvents = _ref.pointerEvents,
    style = _ref.style;
  var previousStyleRef = (0, _react.useRef)(null);
  var setNativePropsArgsRef = (0, _react.useRef)(null);
  setNativePropsArgsRef.current = {
    classList: classList,
    pointerEvents: pointerEvents,
    style: style
  };
  var ref = (0, _useStable.default)(function () {
    return function (hostNode) {
      if (hostNode != null) {
        hostNode.measure = function (callback) {
          return _UIManager.default.measure(hostNode, callback);
        };
        hostNode.measureLayout = function (relativeToNode, success, failure) {
          return _UIManager.default.measureLayout(hostNode, relativeToNode, failure, success);
        };
        hostNode.measureInWindow = function (callback) {
          return _UIManager.default.measureInWindow(hostNode, callback);
        };
        hostNode.setNativeProps = function (nativeProps) {
          var _ref2 = setNativePropsArgsRef.current || emptyObject,
            classList = _ref2.classList,
            style = _ref2.style,
            pointerEvents = _ref2.pointerEvents;
          setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);
        };
      }
    };
  });
  return ref;
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,