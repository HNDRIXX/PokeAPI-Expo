2401525ea4e1e3d8ac2590dab027cc9b
"use strict";

exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _createElement = _interopRequireDefault(require("../createElement"));
var _css = _interopRequireDefault(require("../StyleSheet/css"));
var forwardedProps = _interopRequireWildcard(require("../../modules/forwardedProps"));
var _pick = _interopRequireDefault(require("../../modules/pick"));
var _useElementLayout = _interopRequireDefault(require("../../modules/useElementLayout"));
var _useMergeRefs = _interopRequireDefault(require("../../modules/useMergeRefs"));
var _usePlatformMethods = _interopRequireDefault(require("../../modules/usePlatformMethods"));
var _useResponderEvents = _interopRequireDefault(require("../../modules/useResponderEvents"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
var _TextAncestorContext = _interopRequireDefault(require("../Text/TextAncestorContext"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var forwardPropsList = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, forwardedProps.defaultProps), forwardedProps.accessibilityProps), forwardedProps.clickProps), forwardedProps.focusProps), forwardedProps.keyboardProps), forwardedProps.mouseProps), forwardedProps.touchProps), forwardedProps.styleProps), {}, {
  href: true,
  lang: true,
  onScroll: true,
  onWheel: true,
  pointerEvents: true
});
var pickProps = function pickProps(props) {
  return (0, _pick.default)(props, forwardPropsList);
};
var View = React.forwardRef(function (props, forwardedRef) {
  var hrefAttrs = props.hrefAttrs,
    onLayout = props.onLayout,
    onMoveShouldSetResponder = props.onMoveShouldSetResponder,
    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
    onResponderEnd = props.onResponderEnd,
    onResponderGrant = props.onResponderGrant,
    onResponderMove = props.onResponderMove,
    onResponderReject = props.onResponderReject,
    onResponderRelease = props.onResponderRelease,
    onResponderStart = props.onResponderStart,
    onResponderTerminate = props.onResponderTerminate,
    onResponderTerminationRequest = props.onResponderTerminationRequest,
    onScrollShouldSetResponder = props.onScrollShouldSetResponder,
    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,
    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,
    onStartShouldSetResponder = props.onStartShouldSetResponder,
    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture;
  if (process.env.NODE_ENV !== 'production') {
    React.Children.toArray(props.children).forEach(function (item) {
      if (typeof item === 'string') {
        console.error("Unexpected text node: " + item + ". A text node cannot be a child of a <View>.");
      }
    });
  }
  var hasTextAncestor = React.useContext(_TextAncestorContext.default);
  var hostRef = React.useRef(null);
  (0, _useElementLayout.default)(hostRef, onLayout);
  (0, _useResponderEvents.default)(hostRef, {
    onMoveShouldSetResponder: onMoveShouldSetResponder,
    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,
    onResponderEnd: onResponderEnd,
    onResponderGrant: onResponderGrant,
    onResponderMove: onResponderMove,
    onResponderReject: onResponderReject,
    onResponderRelease: onResponderRelease,
    onResponderStart: onResponderStart,
    onResponderTerminate: onResponderTerminate,
    onResponderTerminationRequest: onResponderTerminationRequest,
    onScrollShouldSetResponder: onScrollShouldSetResponder,
    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,
    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,
    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,
    onStartShouldSetResponder: onStartShouldSetResponder,
    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture
  });
  var component = 'div';
  var style = _StyleSheet.default.compose(hasTextAncestor && styles.inline, props.style);
  var supportedProps = pickProps(props);
  supportedProps.classList = classList;
  supportedProps.style = style;
  if (props.href != null) {
    component = 'a';
    if (hrefAttrs != null) {
      var download = hrefAttrs.download,
        rel = hrefAttrs.rel,
        target = hrefAttrs.target;
      if (download != null) {
        supportedProps.download = download;
      }
      if (rel != null) {
        supportedProps.rel = rel;
      }
      if (typeof target === 'string') {
        supportedProps.target = target.charAt(0) !== '_' ? '_' + target : target;
      }
    }
  }
  var platformMethodsRef = (0, _usePlatformMethods.default)(supportedProps);
  var setRef = (0, _useMergeRefs.default)(hostRef, platformMethodsRef, forwardedRef);
  supportedProps.ref = setRef;
  return (0, _createElement.default)(component, supportedProps);
});
View.displayName = 'View';
var classes = _css.default.create({
  view: {
    alignItems: 'stretch',
    border: '0 solid black',
    boxSizing: 'border-box',
    display: 'flex',
    flexBasis: 'auto',
    flexDirection: 'column',
    flexShrink: 0,
    margin: 0,
    minHeight: 0,
    minWidth: 0,
    padding: 0,
    position: 'relative',
    zIndex: 0
  }
});
var classList = [classes.view];
var styles = _StyleSheet.default.create({
  inline: {
    display: 'inline-flex'
  }
});
var _default = View;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9jcmVhdGVFbGVtZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jc3MiLCJmb3J3YXJkZWRQcm9wcyIsIl9waWNrIiwiX3VzZUVsZW1lbnRMYXlvdXQiLCJfdXNlTWVyZ2VSZWZzIiwiX3VzZVBsYXRmb3JtTWV0aG9kcyIsIl91c2VSZXNwb25kZXJFdmVudHMiLCJfU3R5bGVTaGVldCIsIl9UZXh0QW5jZXN0b3JDb250ZXh0Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZm9yd2FyZFByb3BzTGlzdCIsImRlZmF1bHRQcm9wcyIsImFjY2Vzc2liaWxpdHlQcm9wcyIsImNsaWNrUHJvcHMiLCJmb2N1c1Byb3BzIiwia2V5Ym9hcmRQcm9wcyIsIm1vdXNlUHJvcHMiLCJ0b3VjaFByb3BzIiwic3R5bGVQcm9wcyIsImhyZWYiLCJsYW5nIiwib25TY3JvbGwiLCJvbldoZWVsIiwicG9pbnRlckV2ZW50cyIsInBpY2tQcm9wcyIsInByb3BzIiwiVmlldyIsImZvcndhcmRSZWYiLCJmb3J3YXJkZWRSZWYiLCJocmVmQXR0cnMiLCJvbkxheW91dCIsIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlciIsIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJvblJlc3BvbmRlckVuZCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlck1vdmUiLCJvblJlc3BvbmRlclJlamVjdCIsIm9uUmVzcG9uZGVyUmVsZWFzZSIsIm9uUmVzcG9uZGVyU3RhcnQiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXIiLCJvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJvblNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlciIsIm9uU2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkNoaWxkcmVuIiwidG9BcnJheSIsImNoaWxkcmVuIiwiaXRlbSIsImNvbnNvbGUiLCJlcnJvciIsImhhc1RleHRBbmNlc3RvciIsInVzZUNvbnRleHQiLCJob3N0UmVmIiwidXNlUmVmIiwiY29tcG9uZW50Iiwic3R5bGUiLCJjb21wb3NlIiwic3R5bGVzIiwiaW5saW5lIiwic3VwcG9ydGVkUHJvcHMiLCJjbGFzc0xpc3QiLCJkb3dubG9hZCIsInJlbCIsImNoYXJBdCIsInBsYXRmb3JtTWV0aG9kc1JlZiIsInNldFJlZiIsInJlZiIsImRpc3BsYXlOYW1lIiwiY2xhc3NlcyIsImNyZWF0ZSIsInZpZXciLCJhbGlnbkl0ZW1zIiwiYm9yZGVyIiwiYm94U2l6aW5nIiwiZGlzcGxheSIsImZsZXhCYXNpcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4U2hyaW5rIiwibWFyZ2luIiwibWluSGVpZ2h0IiwibWluV2lkdGgiLCJwYWRkaW5nIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZUVsZW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jcmVhdGVFbGVtZW50XCIpKTtcblxudmFyIF9jc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TdHlsZVNoZWV0L2Nzc1wiKSk7XG5cbnZhciBmb3J3YXJkZWRQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL2ZvcndhcmRlZFByb3BzXCIpKTtcblxudmFyIF9waWNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9waWNrXCIpKTtcblxudmFyIF91c2VFbGVtZW50TGF5b3V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy91c2VFbGVtZW50TGF5b3V0XCIpKTtcblxudmFyIF91c2VNZXJnZVJlZnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL3VzZU1lcmdlUmVmc1wiKSk7XG5cbnZhciBfdXNlUGxhdGZvcm1NZXRob2RzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy91c2VQbGF0Zm9ybU1ldGhvZHNcIikpO1xuXG52YXIgX3VzZVJlc3BvbmRlckV2ZW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL21vZHVsZXMvdXNlUmVzcG9uZGVyRXZlbnRzXCIpKTtcblxudmFyIF9TdHlsZVNoZWV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfVGV4dEFuY2VzdG9yQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1RleHQvVGV4dEFuY2VzdG9yQ29udGV4dFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGZvcndhcmRQcm9wc0xpc3QgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9yd2FyZGVkUHJvcHMuZGVmYXVsdFByb3BzKSwgZm9yd2FyZGVkUHJvcHMuYWNjZXNzaWJpbGl0eVByb3BzKSwgZm9yd2FyZGVkUHJvcHMuY2xpY2tQcm9wcyksIGZvcndhcmRlZFByb3BzLmZvY3VzUHJvcHMpLCBmb3J3YXJkZWRQcm9wcy5rZXlib2FyZFByb3BzKSwgZm9yd2FyZGVkUHJvcHMubW91c2VQcm9wcyksIGZvcndhcmRlZFByb3BzLnRvdWNoUHJvcHMpLCBmb3J3YXJkZWRQcm9wcy5zdHlsZVByb3BzKSwge30sIHtcbiAgaHJlZjogdHJ1ZSxcbiAgbGFuZzogdHJ1ZSxcbiAgb25TY3JvbGw6IHRydWUsXG4gIG9uV2hlZWw6IHRydWUsXG4gIHBvaW50ZXJFdmVudHM6IHRydWVcbn0pO1xuXG52YXIgcGlja1Byb3BzID0gZnVuY3Rpb24gcGlja1Byb3BzKHByb3BzKSB7XG4gIHJldHVybiAoMCwgX3BpY2suZGVmYXVsdCkocHJvcHMsIGZvcndhcmRQcm9wc0xpc3QpO1xufTtcblxudmFyIFZpZXcgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaHJlZkF0dHJzID0gcHJvcHMuaHJlZkF0dHJzLFxuICAgICAgb25MYXlvdXQgPSBwcm9wcy5vbkxheW91dCxcbiAgICAgIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlciA9IHByb3BzLm9uTW92ZVNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUgPSBwcm9wcy5vbk1vdmVTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlLFxuICAgICAgb25SZXNwb25kZXJFbmQgPSBwcm9wcy5vblJlc3BvbmRlckVuZCxcbiAgICAgIG9uUmVzcG9uZGVyR3JhbnQgPSBwcm9wcy5vblJlc3BvbmRlckdyYW50LFxuICAgICAgb25SZXNwb25kZXJNb3ZlID0gcHJvcHMub25SZXNwb25kZXJNb3ZlLFxuICAgICAgb25SZXNwb25kZXJSZWplY3QgPSBwcm9wcy5vblJlc3BvbmRlclJlamVjdCxcbiAgICAgIG9uUmVzcG9uZGVyUmVsZWFzZSA9IHByb3BzLm9uUmVzcG9uZGVyUmVsZWFzZSxcbiAgICAgIG9uUmVzcG9uZGVyU3RhcnQgPSBwcm9wcy5vblJlc3BvbmRlclN0YXJ0LFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGUgPSBwcm9wcy5vblJlc3BvbmRlclRlcm1pbmF0ZSxcbiAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0ID0gcHJvcHMub25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QsXG4gICAgICBvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlciA9IHByb3BzLm9uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgb25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlID0gcHJvcHMub25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlLFxuICAgICAgb25TZWxlY3Rpb25DaGFuZ2VTaG91bGRTZXRSZXNwb25kZXIgPSBwcm9wcy5vblNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSA9IHByb3BzLm9uU2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSxcbiAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIgPSBwcm9wcy5vblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUgPSBwcm9wcy5vblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgdGV4dCBub2RlOiBcIiArIGl0ZW0gKyBcIi4gQSB0ZXh0IG5vZGUgY2Fubm90IGJlIGEgY2hpbGQgb2YgYSA8Vmlldz4uXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc1RleHRBbmNlc3RvciA9IFJlYWN0LnVzZUNvbnRleHQoX1RleHRBbmNlc3RvckNvbnRleHQuZGVmYXVsdCk7XG4gIHZhciBob3N0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAoMCwgX3VzZUVsZW1lbnRMYXlvdXQuZGVmYXVsdCkoaG9zdFJlZiwgb25MYXlvdXQpO1xuICAoMCwgX3VzZVJlc3BvbmRlckV2ZW50cy5kZWZhdWx0KShob3N0UmVmLCB7XG4gICAgb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyOiBvbk1vdmVTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSxcbiAgICBvblJlc3BvbmRlckVuZDogb25SZXNwb25kZXJFbmQsXG4gICAgb25SZXNwb25kZXJHcmFudDogb25SZXNwb25kZXJHcmFudCxcbiAgICBvblJlc3BvbmRlck1vdmU6IG9uUmVzcG9uZGVyTW92ZSxcbiAgICBvblJlc3BvbmRlclJlamVjdDogb25SZXNwb25kZXJSZWplY3QsXG4gICAgb25SZXNwb25kZXJSZWxlYXNlOiBvblJlc3BvbmRlclJlbGVhc2UsXG4gICAgb25SZXNwb25kZXJTdGFydDogb25SZXNwb25kZXJTdGFydCxcbiAgICBvblJlc3BvbmRlclRlcm1pbmF0ZTogb25SZXNwb25kZXJUZXJtaW5hdGUsXG4gICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0LFxuICAgIG9uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyOiBvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlcixcbiAgICBvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IG9uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSxcbiAgICBvblNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlcjogb25TZWxlY3Rpb25DaGFuZ2VTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgb25TZWxlY3Rpb25DaGFuZ2VTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiBvblNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUsXG4gICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogb25TdGFydFNob3VsZFNldFJlc3BvbmRlcixcbiAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogb25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmVcbiAgfSk7XG4gIHZhciBjb21wb25lbnQgPSAnZGl2JztcblxuICB2YXIgc3R5bGUgPSBfU3R5bGVTaGVldC5kZWZhdWx0LmNvbXBvc2UoaGFzVGV4dEFuY2VzdG9yICYmIHN0eWxlcy5pbmxpbmUsIHByb3BzLnN0eWxlKTtcblxuICB2YXIgc3VwcG9ydGVkUHJvcHMgPSBwaWNrUHJvcHMocHJvcHMpO1xuICBzdXBwb3J0ZWRQcm9wcy5jbGFzc0xpc3QgPSBjbGFzc0xpc3Q7XG4gIHN1cHBvcnRlZFByb3BzLnN0eWxlID0gc3R5bGU7XG5cbiAgaWYgKHByb3BzLmhyZWYgIT0gbnVsbCkge1xuICAgIGNvbXBvbmVudCA9ICdhJztcblxuICAgIGlmIChocmVmQXR0cnMgIT0gbnVsbCkge1xuICAgICAgdmFyIGRvd25sb2FkID0gaHJlZkF0dHJzLmRvd25sb2FkLFxuICAgICAgICAgIHJlbCA9IGhyZWZBdHRycy5yZWwsXG4gICAgICAgICAgdGFyZ2V0ID0gaHJlZkF0dHJzLnRhcmdldDtcblxuICAgICAgaWYgKGRvd25sb2FkICE9IG51bGwpIHtcbiAgICAgICAgc3VwcG9ydGVkUHJvcHMuZG93bmxvYWQgPSBkb3dubG9hZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbCAhPSBudWxsKSB7XG4gICAgICAgIHN1cHBvcnRlZFByb3BzLnJlbCA9IHJlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN1cHBvcnRlZFByb3BzLnRhcmdldCA9IHRhcmdldC5jaGFyQXQoMCkgIT09ICdfJyA/ICdfJyArIHRhcmdldCA6IHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGxhdGZvcm1NZXRob2RzUmVmID0gKDAsIF91c2VQbGF0Zm9ybU1ldGhvZHMuZGVmYXVsdCkoc3VwcG9ydGVkUHJvcHMpO1xuICB2YXIgc2V0UmVmID0gKDAsIF91c2VNZXJnZVJlZnMuZGVmYXVsdCkoaG9zdFJlZiwgcGxhdGZvcm1NZXRob2RzUmVmLCBmb3J3YXJkZWRSZWYpO1xuICBzdXBwb3J0ZWRQcm9wcy5yZWYgPSBzZXRSZWY7XG4gIHJldHVybiAoMCwgX2NyZWF0ZUVsZW1lbnQuZGVmYXVsdCkoY29tcG9uZW50LCBzdXBwb3J0ZWRQcm9wcyk7XG59KTtcblZpZXcuZGlzcGxheU5hbWUgPSAnVmlldyc7XG5cbnZhciBjbGFzc2VzID0gX2Nzcy5kZWZhdWx0LmNyZWF0ZSh7XG4gIHZpZXc6IHtcbiAgICBhbGlnbkl0ZW1zOiAnc3RyZXRjaCcsXG4gICAgYm9yZGVyOiAnMCBzb2xpZCBibGFjaycsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIG1pbkhlaWdodDogMCxcbiAgICBtaW5XaWR0aDogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHpJbmRleDogMFxuICB9XG59KTtcblxudmFyIGNsYXNzTGlzdCA9IFtjbGFzc2VzLnZpZXddO1xuXG52YXIgc3R5bGVzID0gX1N0eWxlU2hlZXQuZGVmYXVsdC5jcmVhdGUoe1xuICBpbmxpbmU6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnXG4gIH1cbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBWaWV3O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFckQsSUFBSUMsY0FBYyxHQUFHQyxzQkFBc0IsQ0FBQ0YsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDO0FBRXhFLElBQUlHLElBQUksR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sb0JBQW9CLENBQUMsQ0FBQztBQUUvRCxJQUFJSSxjQUFjLEdBQUdMLHVCQUF1QixDQUFDQyxPQUFPLCtCQUErQixDQUFDLENBQUM7QUFFckYsSUFBSUssS0FBSyxHQUFHSCxzQkFBc0IsQ0FBQ0YsT0FBTyxxQkFBcUIsQ0FBQyxDQUFDO0FBRWpFLElBQUlNLGlCQUFpQixHQUFHSixzQkFBc0IsQ0FBQ0YsT0FBTyxpQ0FBaUMsQ0FBQyxDQUFDO0FBRXpGLElBQUlPLGFBQWEsR0FBR0wsc0JBQXNCLENBQUNGLE9BQU8sNkJBQTZCLENBQUMsQ0FBQztBQUVqRixJQUFJUSxtQkFBbUIsR0FBR04sc0JBQXNCLENBQUNGLE9BQU8sbUNBQW1DLENBQUMsQ0FBQztBQUU3RixJQUFJUyxtQkFBbUIsR0FBR1Asc0JBQXNCLENBQUNGLE9BQU8sbUNBQW1DLENBQUMsQ0FBQztBQUU3RixJQUFJVSxXQUFXLEdBQUdSLHNCQUFzQixDQUFDRixPQUFPLGdCQUFnQixDQUFDLENBQUM7QUFFbEUsSUFBSVcsb0JBQW9CLEdBQUdULHNCQUFzQixDQUFDRixPQUFPLDhCQUE4QixDQUFDLENBQUM7QUFFekYsU0FB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