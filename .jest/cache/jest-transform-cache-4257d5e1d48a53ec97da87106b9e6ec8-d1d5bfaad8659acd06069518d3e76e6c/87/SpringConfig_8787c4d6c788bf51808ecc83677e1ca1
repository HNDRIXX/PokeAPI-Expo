84600c7560bf45597ccff38f55b39c52
'use strict';

exports.__esModule = true;
exports.default = void 0;
function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}
function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }
  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }
  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }
  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }
  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }
  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }
  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }
  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}
var _default = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIHN0aWZmbmVzc0Zyb21PcmlnYW1pVmFsdWUob1ZhbHVlKSB7XG4gIHJldHVybiAob1ZhbHVlIC0gMzApICogMy42MiArIDE5NDtcbn1cblxuZnVuY3Rpb24gZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUob1ZhbHVlKSB7XG4gIHJldHVybiAob1ZhbHVlIC0gOCkgKiAzICsgMjU7XG59XG5cbmZ1bmN0aW9uIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uKHRlbnNpb24sIGZyaWN0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKHRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGZyaWN0aW9uKVxuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tQm91bmNpbmVzc0FuZFNwZWVkKGJvdW5jaW5lc3MsIHNwZWVkKSB7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIC0gc3RhcnRWYWx1ZSkgLyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3ROb3JtYWwobiwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzdGFydCArIG4gKiAoZW5kIC0gc3RhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFySW50ZXJwb2xhdGlvbih0LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHQgKiBlbmQgKyAoMSAtIHQpICogc3RhcnQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKHQsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gbGluZWFySW50ZXJwb2xhdGlvbigyICogdCAtIHQgKiB0LCBzdGFydCwgZW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24xKHgpIHtcbiAgICByZXR1cm4gMC4wMDA3ICogTWF0aC5wb3coeCwgMykgLSAwLjAzMSAqIE1hdGgucG93KHgsIDIpICsgMC42NCAqIHggKyAxLjI4O1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjIoeCkge1xuICAgIHJldHVybiAwLjAwMDA0NCAqIE1hdGgucG93KHgsIDMpIC0gMC4wMDYgKiBNYXRoLnBvdyh4LCAyKSArIDAuMzYgKiB4ICsgMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24zKHgpIHtcbiAgICByZXR1cm4gMC4wMDAwMDA0NSAqIE1hdGgucG93KHgsIDMpIC0gMC4wMDAzMzIgKiBNYXRoLnBvdyh4LCAyKSArIDAuMTA3OCAqIHggKyA1Ljg0O1xuICB9XG5cbiAgZnVuY3Rpb24gYjNOb2JvdW5jZSh0ZW5zaW9uKSB7XG4gICAgaWYgKHRlbnNpb24gPD0gMTgpIHtcbiAgICAgIHJldHVybiBiM0ZyaWN0aW9uMSh0ZW5zaW9uKTtcbiAgICB9IGVsc2UgaWYgKHRlbnNpb24gPiAxOCAmJiB0ZW5zaW9uIDw9IDQ0KSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjIodGVuc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBiM0ZyaWN0aW9uMyh0ZW5zaW9uKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYiA9IG5vcm1hbGl6ZShib3VuY2luZXNzIC8gMS43LCAwLCAyMCk7XG4gIGIgPSBwcm9qZWN0Tm9ybWFsKGIsIDAsIDAuOCk7XG4gIHZhciBzID0gbm9ybWFsaXplKHNwZWVkIC8gMS43LCAwLCAyMCk7XG4gIHZhciBib3VuY3lUZW5zaW9uID0gcHJvamVjdE5vcm1hbChzLCAwLjUsIDIwMCk7XG4gIHZhciBib3VuY3lGcmljdGlvbiA9IHF1YWRyYXRpY091dEludGVycG9sYXRpb24oYiwgYjNOb2JvdW5jZShib3VuY3lUZW5zaW9uKSwgMC4wMSk7XG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeVRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeUZyaWN0aW9uKVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uOiBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbixcbiAgZnJvbUJvdW5jaW5lc3NBbmRTcGVlZDogZnJvbUJvdW5jaW5lc3NBbmRTcGVlZFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFTQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsU0FBU0MseUJBQXlCQSxDQUFDQyxNQUFNLEVBQUU7RUFDekMsT0FBTyxDQUFDQSxNQUFNLEdBQUcsRUFBRSxJQUFJLElBQUksR0FBRyxHQUFHO0FBQ25DO0FBRUEsU0FBU0MsdUJBQXVCQSxDQUFDRCxNQUFNLEVBQUU7RUFDdkMsT0FBTyxDQUFDQSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQzlCO0FBRUEsU0FBU0UsNkJBQTZCQSxDQUFDQyxPQUFPLEVBQUVDLFFBQVEsRUFBRTtFQUN4RCxPQUFPO0lBQ0xDLFNBQVMsRUFBRU4seUJBQXlCLENBQUNJLE9BQU8sQ0FBQztJQUM3Q0csT0FBTyxFQUFFTCx1QkFBdUIsQ0FBQ0csUUFBUTtFQUMzQyxDQUFDO0FBQ0g7QUFFQSxTQUFTRyxzQkFBc0JBLENBQUNDLFVBQVUsRUFBRUMsS0FBSyxFQUFFO0VBQ2pELFNBQVNDLFNBQVNBLENBQUNDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUU7SUFDOUMsT0FBTyxDQUFDRixLQUFLLEdBQUdDLFVBQVUsS0FBS0MsUUFBUSxHQUFHRCxVQUFVLENBQUM7RUFDdkQ7RUFFQSxTQUFTRSxhQUFhQSxDQUFDQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsR0FBRyxFQUFFO0lBQ3BDLE9BQU9ELEtBQUssR0FBR0QsQ0FBQyxJQUFJRSxHQUFHLEdBQUdELEtBQUssQ0FBQztFQUNsQztFQUVBLFNBQVNF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