0c1ac76a303f44179ba4553785bd91bd
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _AnimatedInterpolation = _interopRequireDefault(require("./AnimatedInterpolation"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
var AnimatedDiffClamp = function (_AnimatedWithChildren) {
  _inheritsLoose(AnimatedDiffClamp, _AnimatedWithChildren);
  function AnimatedDiffClamp(a, min, max) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = a;
    _this._min = min;
    _this._max = max;
    _this._value = _this._lastValue = _this._a.__getValue();
    return _this;
  }
  var _proto = AnimatedDiffClamp.prototype;
  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();
    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };
  _proto.interpolate = function interpolate(config) {
    return new _AnimatedInterpolation.default(this, config);
  };
  _proto.__getValue = function __getValue() {
    var value = this._a.__getValue();
    var diff = value - this._lastValue;
    this._lastValue = value;
    this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
    return this._value;
  };
  _proto.__attach = function __attach() {
    this._a.__addChild(this);
  };
  _proto.__detach = function __detach() {
    this._a.__removeChild(this);
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: 'diffclamp',
      input: this._a.__getNativeTag(),
      min: this._min,
      max: this._max
    };
  };
  return AnimatedDiffClamp;
}(_AnimatedWithChildren2.default);
var _default = AnimatedDiffClamp;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfQW5pbWF0ZWROb2RlIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuMiIsIm9iaiIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwicCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQW5pbWF0ZWREaWZmQ2xhbXAiLCJfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJhIiwibWluIiwibWF4IiwiX3RoaXMiLCJjYWxsIiwiX2EiLCJfbWluIiwiX21heCIsIl92YWx1ZSIsIl9sYXN0VmFsdWUiLCJfX2dldFZhbHVlIiwiX3Byb3RvIiwiX19tYWtlTmF0aXZlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJ2YWx1ZSIsImRpZmYiLCJNYXRoIiwiX19hdHRhY2giLCJfX2FkZENoaWxkIiwiX19kZXRhY2giLCJfX3JlbW92ZUNoaWxkIiwiX19nZXROYXRpdmVDb25maWciLCJ0eXBlIiwiaW5wdXQiLCJfX2dldE5hdGl2ZVRhZyIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWREaWZmQ2xhbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0FuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5pbWF0ZWRJbnRlcnBvbGF0aW9uXCIpKTtcblxudmFyIF9BbmltYXRlZE5vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FuaW1hdGVkTm9kZVwiKSk7XG5cbnZhciBfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BbmltYXRlZFdpdGhDaGlsZHJlblwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgQW5pbWF0ZWREaWZmQ2xhbXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRlZFdpdGhDaGlsZHJlbikge1xuICBfaW5oZXJpdHNMb29zZShBbmltYXRlZERpZmZDbGFtcCwgX0FuaW1hdGVkV2l0aENoaWxkcmVuKTtcblxuICBmdW5jdGlvbiBBbmltYXRlZERpZmZDbGFtcChhLCBtaW4sIG1heCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0FuaW1hdGVkV2l0aENoaWxkcmVuLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5fYSA9IGE7XG4gICAgX3RoaXMuX21pbiA9IG1pbjtcbiAgICBfdGhpcy5fbWF4ID0gbWF4O1xuICAgIF90aGlzLl92YWx1ZSA9IF90aGlzLl9sYXN0VmFsdWUgPSBfdGhpcy5fYS5fX2dldFZhbHVlKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGVkRGlmZkNsYW1wLnByb3RvdHlwZTtcblxuICBfcHJvdG8uX19tYWtlTmF0aXZlID0gZnVuY3Rpb24gX19tYWtlTmF0aXZlKCkge1xuICAgIHRoaXMuX2EuX19tYWtlTmF0aXZlKCk7XG5cbiAgICBfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ucHJvdG90eXBlLl9fbWFrZU5hdGl2ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgX0FuaW1hdGVkSW50ZXJwb2xhdGlvbi5kZWZhdWx0KHRoaXMsIGNvbmZpZyk7XG4gIH07XG5cbiAgX3Byb3RvLl9fZ2V0VmFsdWUgPSBmdW5jdGlvbiBfX2dldFZhbHVlKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuX2EuX19nZXRWYWx1ZSgpO1xuXG4gICAgdmFyIGRpZmYgPSB2YWx1ZSAtIHRoaXMuX2xhc3RWYWx1ZTtcbiAgICB0aGlzLl9sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLl92YWx1ZSA9IE1hdGgubWluKE1hdGgubWF4KHRoaXMuX3ZhbHVlICsgZGlmZiwgdGhpcy5fbWluKSwgdGhpcy5fbWF4KTtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLl9fYXR0YWNoID0gZnVuY3Rpb24gX19hdHRhY2goKSB7XG4gICAgdGhpcy5fYS5fX2FkZENoaWxkKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5fX2RldGFjaCA9IGZ1bmN0aW9uIF9fZGV0YWNoKCkge1xuICAgIHRoaXMuX2EuX19yZW1vdmVDaGlsZCh0aGlzKTtcblxuICAgIF9BbmltYXRlZFdpdGhDaGlsZHJlbi5wcm90b3R5cGUuX19kZXRhY2guY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uX19nZXROYXRpdmVDb25maWcgPSBmdW5jdGlvbiBfX2dldE5hdGl2ZUNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2RpZmZjbGFtcCcsXG4gICAgICBpbnB1dDogdGhpcy5fYS5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgbWluOiB0aGlzLl9taW4sXG4gICAgICBtYXg6IHRoaXMuX21heFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGVkRGlmZkNsYW1wO1xufShfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4yLmRlZmF1bHQpO1xuXG52YXIgX2RlZmF1bHQgPSBBbmltYXRlZERpZmZDbGFtcDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFTQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsc0JBQXNCLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLDBCQUEwQixDQUFDLENBQUM7QUFFdkYsSUFBSUMsYUFBYSxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXJFLElBQUlFLHNCQUFzQixHQUFHSCxzQkFBc0IsQ0FBQ0MsT0FBTyx5QkFBeUIsQ0FBQyxDQUFDO0FBRXRGLFNBQVNELHNCQUFzQkEsQ0FBQ0ksR0FBRyxF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