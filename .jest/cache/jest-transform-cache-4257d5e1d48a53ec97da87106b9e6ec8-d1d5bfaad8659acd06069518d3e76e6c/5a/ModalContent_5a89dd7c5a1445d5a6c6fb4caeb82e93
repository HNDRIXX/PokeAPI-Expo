06437d22dbacbad6067f487ef183eb63
"use strict";

exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");
var _View = _interopRequireDefault(require("../View"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var ModalContent = React.forwardRef(function (props, forwardedRef) {
  var active = props.active,
    children = props.children,
    onRequestClose = props.onRequestClose,
    transparent = props.transparent;
  React.useEffect(function () {
    if (_ExecutionEnvironment.canUseDOM) {
      var closeOnEscape = function closeOnEscape(e) {
        if (active && e.key === 'Escape') {
          e.stopPropagation();
          if (onRequestClose) {
            onRequestClose();
          }
        }
      };
      document.addEventListener('keyup', closeOnEscape, false);
      return function () {
        return document.removeEventListener('keyup', closeOnEscape, false);
      };
    }
  }, [active, onRequestClose]);
  var style = React.useMemo(function () {
    return [styles.modal, transparent ? styles.modalTransparent : styles.modalOpaque];
  }, [transparent]);
  return React.createElement(_View.default, {
    accessibilityRole: active ? 'dialog' : null,
    "aria-modal": true,
    ref: forwardedRef,
    style: style
  }, React.createElement(_View.default, {
    style: styles.container
  }, children));
});
var styles = _StyleSheet.default.create({
  modal: {
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  modalTransparent: {
    backgroundColor: 'transparent'
  },
  modalOpaque: {
    backgroundColor: 'white'
  },
  container: {
    top: 0,
    flex: 1
  }
});
var _default = ModalContent;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9FeGVjdXRpb25FbnZpcm9ubWVudCIsIl9WaWV3IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9TdHlsZVNoZWV0Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiTW9kYWxDb250ZW50IiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiYWN0aXZlIiwiY2hpbGRyZW4iLCJvblJlcXVlc3RDbG9zZSIsInRyYW5zcGFyZW50IiwidXNlRWZmZWN0IiwiY2FuVXNlRE9NIiwiY2xvc2VPbkVzY2FwZSIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3R5bGUiLCJ1c2VNZW1vIiwic3R5bGVzIiwibW9kYWwiLCJtb2RhbFRyYW5zcGFyZW50IiwibW9kYWxPcGFxdWUiLCJjcmVhdGVFbGVtZW50IiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJyZWYiLCJjb250YWluZXIiLCJjcmVhdGUiLCJwb3NpdGlvbiIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImJhY2tncm91bmRDb2xvciIsImZsZXgiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIk1vZGFsQ29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIF9WaWV3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVmlld1wiKSk7XG5cbnZhciBfU3R5bGVTaGVldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1N0eWxlU2hlZXRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE5pY29sYXMgR2FsbGFnaGVyLlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbnZhciBNb2RhbENvbnRlbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICB2YXIgYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIG9uUmVxdWVzdENsb3NlID0gcHJvcHMub25SZXF1ZXN0Q2xvc2UsXG4gICAgICB0cmFuc3BhcmVudCA9IHByb3BzLnRyYW5zcGFyZW50O1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgICB2YXIgY2xvc2VPbkVzY2FwZSA9IGZ1bmN0aW9uIGNsb3NlT25Fc2NhcGUoZSkge1xuICAgICAgICBpZiAoYWN0aXZlICYmIGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICBpZiAob25SZXF1ZXN0Q2xvc2UpIHtcbiAgICAgICAgICAgIG9uUmVxdWVzdENsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGNsb3NlT25Fc2NhcGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGNsb3NlT25Fc2NhcGUsIGZhbHNlKTtcbiAgICAgIH07XG4gICAgfVxuICB9LCBbYWN0aXZlLCBvblJlcXVlc3RDbG9zZV0pO1xuICB2YXIgc3R5bGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW3N0eWxlcy5tb2RhbCwgdHJhbnNwYXJlbnQgPyBzdHlsZXMubW9kYWxUcmFuc3BhcmVudCA6IHN0eWxlcy5tb2RhbE9wYXF1ZV07XG4gIH0sIFt0cmFuc3BhcmVudF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1ZpZXcuZGVmYXVsdCwge1xuICAgIGFjY2Vzc2liaWxpdHlSb2xlOiBhY3RpdmUgPyAnZGlhbG9nJyA6IG51bGwsXG4gICAgXCJhcmlhLW1vZGFsXCI6IHRydWUsXG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9WaWV3LmRlZmF1bHQsIHtcbiAgICBzdHlsZTogc3R5bGVzLmNvbnRhaW5lclxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5cbnZhciBzdHlsZXMgPSBfU3R5bGVTaGVldC5kZWZhdWx0LmNyZWF0ZSh7XG4gIG1vZGFsOiB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH0sXG4gIG1vZGFsVHJhbnNwYXJlbnQ6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfSxcbiAgbW9kYWxPcGFxdWU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgdG9wOiAwLFxuICAgIGZsZXg6IDFcbiAgfVxufSk7XG5cbnZhciBfZGVmYXVsdCA9IE1vZGFsQ29udGVudDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXJELElBQUlDLHFCQUFxQixHQUFHRCxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFFcEUsSUFBSUUsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0gsT0FBTyxVQUFVLENBQUMsQ0FBQztBQUV0RCxJQUFJSSxXQUFXLEdBQUdELHNCQUFzQixDQUFDSCxPQUFPLGdCQUFnQixDQUFDLENBQUM7QUFFbEUsU0FBU0csc0JBQXNCQSxDQUFDRSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdB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