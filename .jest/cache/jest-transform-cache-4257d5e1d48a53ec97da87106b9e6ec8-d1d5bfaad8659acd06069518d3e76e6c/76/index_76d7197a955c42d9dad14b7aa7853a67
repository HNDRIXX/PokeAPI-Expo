ede86f731b57b19c96d1d9697e9b1583
"use strict";

exports.__esModule = true;
exports.default = void 0;
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};
var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};
var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = twoArgumentPooler;
var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};
var PooledClass = {
  addPoolingTo: addPoolingTo,
  twoArgumentPooler: twoArgumentPooler
};
var _default = PooledClass;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJ0d29Bcmd1bWVudFBvb2xlciIsImExIiwiYTIiLCJLbGFzcyIsImluc3RhbmNlUG9vbCIsImxlbmd0aCIsImluc3RhbmNlIiwicG9wIiwiY2FsbCIsInN0YW5kYXJkUmVsZWFzZXIiLCJkZXN0cnVjdG9yIiwicG9vbFNpemUiLCJwdXNoIiwiREVGQVVMVF9QT09MX1NJWkUiLCJERUZBVUxUX1BPT0xFUiIsImFkZFBvb2xpbmdUbyIsIkNvcHlDb25zdHJ1Y3RvciIsInBvb2xlciIsIk5ld0tsYXNzIiwiZ2V0UG9vbGVkIiwicmVsZWFzZSIsIlBvb2xlZENsYXNzIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogRnJvbSBSZWFjdCAxNi4wLjBcbiAqL1xudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gdHdvQXJndW1lbnRQb29sZXIoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG5cbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG52YXIgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uIHN0YW5kYXJkUmVsZWFzZXIoaW5zdGFuY2UpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuXG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gIH1cbn07XG5cbnZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xudmFyIERFRkFVTFRfUE9PTEVSID0gdHdvQXJndW1lbnRQb29sZXI7XG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cblxudmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uIGFkZFBvb2xpbmdUbyhDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICAvLyBDYXN0aW5nIGFzIGFueSBzbyB0aGF0IGZsb3cgaWdub3JlcyB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uIGFuZCB0cnVzdHNcbiAgLy8gaXQgdG8gbWF0Y2ggdGhlIHR5cGUgd2UgZGVjbGFyZWRcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuXG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG5cbiAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gIHJldHVybiBOZXdLbGFzcztcbn07XG5cbnZhciBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlclxufTtcbnZhciBfZGVmYXVsdCA9IFBvb2xlZENsYXNzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxVQUFVLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUV0RSxTQUFTRCxzQkFBc0JBLENBQUNFLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDTCxVQUFVLEdBQUdLLEdBQUcsR0FBRztJQUFFSixPQUFPLEVBQUVJO0VBQUksQ0FBQztBQUFFO0FBWTlGLElBQUlDLGlCQUFpQixHQUFHLFNBQVNBLGlCQUFpQkEsQ0FBQ0MsRUFBRSxFQUFFQyxFQUFFLEVBQUU7RUFDekQsSUFBSUMsS0FBSyxHQUFHLElBQUk7RUFFaEIsSUFBSUEsS0FBSyxDQUFDQyxZQUFZLENBQUNDLE1BQU0sRUFBRTtJQUM3QixJQUFJQyxRQUFRLEdBQUdILEtBQUssQ0FBQ0MsWUFBWSxDQUFDRyxHQUFHLENBQUMsQ0FBQztJQUN2Q0osS0FBSyxDQUFDSyxJQUFJLENBQUNGLFFBQVEsRUFBRUwsRUFBRSxFQUFFQyxFQUFFLENBQUM7SUFDNUIsT0FBT0ksUUFBUTtFQUNqQixDQUFDLE1BQU07SUFDTCxPQUFPLElBQUlILEtBQUssQ0FBQ0YsRUFBRSxFQUFFQyxFQUFFLENBQUM7RUFDMUI7QUFDRixDQUFDO0FBRUQsSUFBSU8sZ0JBQWdCLEdBQUcsU0FBU0EsZ0JBQWdCQSxDQUFDSCxRQUFRLEVBQUU7RUFDekQsSUFBSUgsS0FBSyxHQUFHLElBQUk7RUFDaEJHLFFBQVEsQ0FBQ0ksVUFBVSxDQUFDLENBQUM7RUFFckIsSUFBSVAsS0FBSyxDQUFDQyxZQUFZLENBQUNDLE1BQU0sR0FBR0YsS0FBSyxDQUFDUSxRQUFRLEVBQUU7SUFDOUNSLEtBQUssQ0FBQ0MsWUFBWSxDQUFDUSxJQUFJLENBQUNOLFFBQVEsQ0FBQztFQUNuQztBQUNGLENBQUM7QUFFRCxJQUFJTyxpQkFBaUIsR0FBRyxFQUFFO0FBQzFCLElBQUlDLGNBQWMsR0FBR2QsaUJBQWlCO0FBV3RDLElBQUllLFlBQVksR0FBRyxTQUFTQSxZQUFZQSxDQUFDQyxlQUFlLEVBQUVDLE1BQU0sRUFBRTtFQUdoRSxJQUFJQyxRQUFRLEdBQUdGLGVBQWU7RUFDOUJFLFFBQVEsQ0FBQ2QsWUFBWSxHQUFHLEVBQUU7RUFDMUJjLFFBQVEsQ0FBQ0MsU0FBUyxHQUFHRixNQUFNLElBQUlILGNBQWM7RUFFN0MsSUFBSSxDQUFDSSxRQUFRLENBQUNQLFFBQVEsRUFBRTtJQUN0Qk8sUUFBUSxDQUFDUCxRQUFRLEdBQUdFLGlCQUFpQjtFQUN2QztFQUVBSyxRQUFRLENBQUNFLE9BQU8sR0FBR1gsZ0JBQWdCO0VBQ25DLE9BQU9TLFFBQVE7QUFDakIsQ0FBQztBQUVELElBQUlHLFdBQVcsR0FBRztFQUNoQk4sWUFBWSxFQUFFQSxZQUFZO0VBQzFCZixpQkFBaUIsRUFBRUE7QUFDckIsQ0FBQztBQUNELElBQUlzQixRQUFRLEdBQUdELFdBQVc7QUFDMUI1QixPQUFPLENBQUNFLE9BQU8sR0FBRzJCLFFBQVE7QUFDMUJDLE1BQU0sQ0FBQzlCLE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxPQUFPIiwiaWdub3JlTGlzdCI6W119