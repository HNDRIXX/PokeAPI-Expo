08af135d4ef03475bad12d5543f76dbe
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _AnimatedInterpolation = _interopRequireDefault(require("./AnimatedInterpolation"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
var _InteractionManager = _interopRequireDefault(require("../../../../exports/InteractionManager"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === 'function') {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);
  animatedStyles.forEach(function (animatedStyle) {
    return animatedStyle.update();
  });
}
var AnimatedValue = function (_AnimatedWithChildren) {
  _inheritsLoose(AnimatedValue, _AnimatedWithChildren);
  function AnimatedValue(value) {
    var _this;
    _this = _AnimatedWithChildren.call(this) || this;
    if (typeof value !== 'number') {
      throw new Error('AnimatedValue: Attempting to set value to undefined');
    }
    _this._startingValue = _this._value = value;
    _this._offset = 0;
    _this._animation = null;
    return _this;
  }
  var _proto = AnimatedValue.prototype;
  _proto.__detach = function __detach() {
    var _this2 = this;
    if (this.__isNative) {
      NativeAnimatedAPI.getValue(this.__getNativeTag(), function (value) {
        _this2._value = value;
      });
    }
    this.stopAnimation();
    _AnimatedWithChildren.prototype.__detach.call(this);
  };
  _proto.__getValue = function __getValue() {
    return this._value + this._offset;
  };
  _proto.setValue = function setValue(value) {
    if (this._animation) {
      this._animation.stop();
      this._animation = null;
    }
    this._updateValue(value, !this.__isNative);
    if (this.__isNative) {
      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
    }
  };
  _proto.setOffset = function setOffset(offset) {
    this._offset = offset;
    if (this.__isNative) {
      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
    }
  };
  _proto.flattenOffset = function flattenOffset() {
    this._value += this._offset;
    this._offset = 0;
    if (this.__isNative) {
      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
    }
  };
  _proto.extractOffset = function extractOffset() {
    this._offset += this._value;
    this._value = 0;
    if (this.__isNative) {
      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
    }
  };
  _proto.stopAnimation = function stopAnimation(callback) {
    this.stopTracking();
    this._animation && this._animation.stop();
    this._animation = null;
    callback && callback(this.__getValue());
  };
  _proto.resetAnimation = function resetAnimation(callback) {
    this.stopAnimation(callback);
    this._value = this._startingValue;
  };
  _proto._onAnimatedValueUpdateReceived = function _onAnimatedValueUpdateReceived(value) {
    this._updateValue(value, false);
  };
  _proto.interpolate = function interpolate(config) {
    return new _AnimatedInterpolation.default(this, config);
  };
  _proto.animate = function animate(animation, callback) {
    var _this3 = this;
    var handle = null;
    if (animation.__isInteraction) {
      handle = _InteractionManager.default.createInteractionHandle();
    }
    var previousAnimation = this._animation;
    this._animation && this._animation.stop();
    this._animation = animation;
    animation.start(this._value, function (value) {
      _this3._updateValue(value, true);
    }, function (result) {
      _this3._animation = null;
      if (handle !== null) {
        _InteractionManager.default.clearInteractionHandle(handle);
      }
      callback && callback(result);
    }, previousAnimation, this);
  };
  _proto.stopTracking = function stopTracking() {
    this._tracking && this._tracking.__detach();
    this._tracking = null;
  };
  _proto.track = function track(tracking) {
    this.stopTracking();
    this._tracking = tracking;
  };
  _proto._updateValue = function _updateValue(value, flush) {
    if (value === undefined) {
      throw new Error('AnimatedValue: Attempting to set value to undefined');
    }
    this._value = value;
    if (flush) {
      _flush(this);
    }
    _AnimatedWithChildren.prototype.__callListeners.call(this, this.__getValue());
  };
  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: 'value',
      value: this._value,
      offset: this._offset
    };
  };
  return AnimatedValue;
}(_AnimatedWithChildren2.default);
var _default = AnimatedValue;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,