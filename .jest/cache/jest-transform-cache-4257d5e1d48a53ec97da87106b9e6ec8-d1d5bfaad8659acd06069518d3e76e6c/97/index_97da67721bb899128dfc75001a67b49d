c47cd6c3f396e804121c416a563b45a0
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _InteractionManager = _interopRequireDefault(require("../../../exports/InteractionManager"));
var _TouchHistoryMath = _interopRequireDefault(require("../TouchHistoryMath"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var currentCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = _TouchHistoryMath.default.currentCentroidX;
var currentCentroidY = _TouchHistoryMath.default.currentCentroidY;
var PanResponder = {
  _initializeGestureState: function _initializeGestureState(gestureState) {
    gestureState.moveX = 0;
    gestureState.moveY = 0;
    gestureState.x0 = 0;
    gestureState.y0 = 0;
    gestureState.dx = 0;
    gestureState.dy = 0;
    gestureState.vx = 0;
    gestureState.vy = 0;
    gestureState.numberActiveTouches = 0;
    gestureState._accountsForMovesUpTo = 0;
  },
  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    var movedAfter = gestureState._accountsForMovesUpTo;
    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var nextDX = gestureState.dx + (x - prevX);
    var nextDY = gestureState.dy + (y - prevY);
    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
    gestureState.vx = (nextDX - gestureState.dx) / dt;
    gestureState.vy = (nextDY - gestureState.dy) / dt;
    gestureState.dx = nextDX;
    gestureState.dy = nextDY;
    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
  },
  create: function create(config) {
    var interactionState = {
      handle: null,
      shouldCancelClick: false,
      timeout: null
    };
    var gestureState = {
      stateID: Math.random(),
      moveX: 0,
      moveY: 0,
      x0: 0,
      y0: 0,
      dx: 0,
      dy: 0,
      vx: 0,
      vy: 0,
      numberActiveTouches: 0,
      _accountsForMovesUpTo: 0
    };
    var panHandlers = {
      onStartShouldSetResponder: function onStartShouldSetResponder(event) {
        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
      },
      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {
        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
      },
      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {
        if (event.nativeEvent.touches.length === 1) {
          PanResponder._initializeGestureState(gestureState);
        }
        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
      },
      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {
        var touchHistory = event.touchHistory;
        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return false;
        }
        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
      },
      onResponderGrant: function onResponderGrant(event) {
        if (!interactionState.handle) {
          interactionState.handle = _InteractionManager.default.createInteractionHandle();
        }
        if (interactionState.timeout) {
          clearInteractionTimeout(interactionState);
        }
        interactionState.shouldCancelClick = true;
        gestureState.x0 = currentCentroidX(event.touchHistory);
        gestureState.y0 = currentCentroidY(event.touchHistory);
        gestureState.dx = 0;
        gestureState.dy = 0;
        if (config.onPanResponderGrant) {
          config.onPanResponderGrant(event, gestureState);
        }
        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
      },
      onResponderReject: function onResponderReject(event) {
        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
      },
      onResponderRelease: function onResponderRelease(event) {
        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
        setInteractionTimeout(interactionState);
        PanResponder._initializeGestureState(gestureState);
      },
      onResponderStart: function onResponderStart(event) {
        var touchHistory = event.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        if (config.onPanResponderStart) {
          config.onPanResponderStart(event, gestureState);
        }
      },
      onResponderMove: function onResponderMove(event) {
        var touchHistory = event.touchHistory;
        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return;
        }
        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        if (config.onPanResponderMove) {
          config.onPanResponderMove(event, gestureState);
        }
      },
      onResponderEnd: function onResponderEnd(event) {
        var touchHistory = event.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
      },
      onResponderTerminate: function onResponderTerminate(event) {
        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
        setInteractionTimeout(interactionState);
        PanResponder._initializeGestureState(gestureState);
      },
      onResponderTerminationRequest: function onResponderTerminationRequest(event) {
        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
      },
      onClickCapture: function onClickCapture(event) {
        if (interactionState.shouldCancelClick === true) {
          event.stopPropagation();
          event.preventDefault();
        }
      }
    };
    return {
      panHandlers: panHandlers,
      getInteractionHandle: function getInteractionHandle() {
        return interactionState.handle;
      }
    };
  }
};
function clearInteractionHandle(interactionState, callback, event, gestureState) {
  if (interactionState.handle) {
    _InteractionManager.default.clearInteractionHandle(interactionState.handle);
    interactionState.handle = null;
  }
  if (callback) {
    callback(event, gestureState);
  }
}
function clearInteractionTimeout(interactionState) {
  clearTimeout(interactionState.timeout);
}
function setInteractionTimeout(interactionState) {
  interactionState.timeout = setTimeout(function () {
    interactionState.shouldCancelClick = false;
  }, 250);
}
var _default = PanResponder;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfSW50ZXJhY3Rpb25NYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfVG91Y2hIaXN0b3J5TWF0aCIsIm9iaiIsImN1cnJlbnRDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIiLCJjdXJyZW50Q2VudHJvaWRZT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyIiwicHJldmlvdXNDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIiLCJwcmV2aW91c0NlbnRyb2lkWU9mVG91Y2hlc0NoYW5nZWRBZnRlciIsImN1cnJlbnRDZW50cm9pZFgiLCJjdXJyZW50Q2VudHJvaWRZIiwiUGFuUmVzcG9uZGVyIiwiX2luaXRpYWxpemVHZXN0dXJlU3RhdGUiLCJnZXN0dXJlU3RhdGUiLCJtb3ZlWCIsIm1vdmVZIiwieDAiLCJ5MCIsImR4IiwiZHkiLCJ2eCIsInZ5IiwibnVtYmVyQWN0aXZlVG91Y2hlcyIsIl9hY2NvdW50c0Zvck1vdmVzVXBUbyIsIl91cGRhdGVHZXN0dXJlU3RhdGVPbk1vdmUiLCJ0b3VjaEhpc3RvcnkiLCJtb3ZlZEFmdGVyIiwicHJldlgiLCJ4IiwicHJldlkiLCJ5IiwibmV4dERYIiwibmV4dERZIiwiZHQiLCJtb3N0UmVjZW50VGltZVN0YW1wIiwiY3JlYXRlIiwiY29uZmlnIiwiaW50ZXJhY3Rpb25TdGF0ZSIsImhhbmRsZSIsInNob3VsZENhbmNlbENsaWNrIiwidGltZW91dCIsInN0YXRlSUQiLCJNYXRoIiwicmFuZG9tIiwicGFuSGFuZGxlcnMiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiZXZlbnQiLCJvblN0YXJ0U2hvdWxkU2V0UGFuUmVzcG9uZGVyIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIiwib25Nb3ZlU2hvdWxkU2V0UGFuUmVzcG9uZGVyIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJuYXRpdmVFdmVudCIsInRvdWNoZXMiLCJsZW5ndGgiLCJvblN0YXJ0U2hvdWxkU2V0UGFuUmVzcG9uZGVyQ2FwdHVyZSIsIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJvbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXJDYXB0dXJlIiwib25SZXNwb25kZXJHcmFudCIsImNyZWF0ZUludGVyYWN0aW9uSGFuZGxlIiwiY2xlYXJJbnRlcmFjdGlvblRpbWVvdXQiLCJvblBhblJlc3BvbmRlckdyYW50Iiwib25TaG91bGRCbG9ja05hdGl2ZVJlc3BvbmRlciIsIm9uUmVzcG9uZGVyUmVqZWN0IiwiY2xlYXJJbnRlcmFjdGlvbkhhbmRsZSIsIm9uUGFuUmVzcG9uZGVyUmVqZWN0Iiwib25SZXNwb25kZXJSZWxlYXNlIiwib25QYW5SZXNwb25kZXJSZWxlYXNlIiwic2V0SW50ZXJhY3Rpb25UaW1lb3V0Iiwib25SZXNwb25kZXJTdGFydCIsIm9uUGFuUmVzcG9uZGVyU3RhcnQiLCJvblJlc3BvbmRlck1vdmUiLCJvblBhblJlc3BvbmRlck1vdmUiLCJvblJlc3BvbmRlckVuZCIsIm9uUGFuUmVzcG9uZGVyRW5kIiwib25SZXNwb25kZXJUZXJtaW5hdGUiLCJvblBhblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25QYW5SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiLCJvbkNsaWNrQ2FwdHVyZSIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZ2V0SW50ZXJhY3Rpb25IYW5kbGUiLCJjYWxsYmFjayIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9JbnRlcmFjdGlvbk1hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9leHBvcnRzL0ludGVyYWN0aW9uTWFuYWdlclwiKSk7XG5cbnZhciBfVG91Y2hIaXN0b3J5TWF0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1RvdWNoSGlzdG9yeU1hdGhcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3VycmVudENlbnRyb2lkWE9mVG91Y2hlc0NoYW5nZWRBZnRlciA9IF9Ub3VjaEhpc3RvcnlNYXRoLmRlZmF1bHQuY3VycmVudENlbnRyb2lkWE9mVG91Y2hlc0NoYW5nZWRBZnRlcjtcbnZhciBjdXJyZW50Q2VudHJvaWRZT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyID0gX1RvdWNoSGlzdG9yeU1hdGguZGVmYXVsdC5jdXJyZW50Q2VudHJvaWRZT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyO1xudmFyIHByZXZpb3VzQ2VudHJvaWRYT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyID0gX1RvdWNoSGlzdG9yeU1hdGguZGVmYXVsdC5wcmV2aW91c0NlbnRyb2lkWE9mVG91Y2hlc0NoYW5nZWRBZnRlcjtcbnZhciBwcmV2aW91c0NlbnRyb2lkWU9mVG91Y2hlc0NoYW5nZWRBZnRlciA9IF9Ub3VjaEhpc3RvcnlNYXRoLmRlZmF1bHQucHJldmlvdXNDZW50cm9pZFlPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXI7XG52YXIgY3VycmVudENlbnRyb2lkWCA9IF9Ub3VjaEhpc3RvcnlNYXRoLmRlZmF1bHQuY3VycmVudENlbnRyb2lkWDtcbnZhciBjdXJyZW50Q2VudHJvaWRZID0gX1RvdWNoSGlzdG9yeU1hdGguZGVmYXVsdC5jdXJyZW50Q2VudHJvaWRZO1xuLyoqXG4gKiBgUGFuUmVzcG9uZGVyYCByZWNvbmNpbGVzIHNldmVyYWwgdG91Y2hlcyBpbnRvIGEgc2luZ2xlIGdlc3R1cmUuIEl0IG1ha2VzXG4gKiBzaW5nbGUtdG91Y2ggZ2VzdHVyZXMgcmVzaWxpZW50IHRvIGV4dHJhIHRvdWNoZXMsIGFuZCBjYW4gYmUgdXNlZCB0b1xuICogcmVjb2duaXplIHNpbXBsZSBtdWx0aS10b3VjaCBnZXN0dXJlcy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBgUGFuUmVzcG9uZGVyYCBob2xkcyBhbiBgSW50ZXJhY3Rpb25NYW5hZ2VyYCBoYW5kbGUgdG8gYmxvY2tcbiAqIGxvbmctcnVubmluZyBKUyBldmVudHMgZnJvbSBpbnRlcnJ1cHRpbmcgYWN0aXZlIGdlc3R1cmVzLlxuICpcbiAqIEl0IHByb3ZpZGVzIGEgcHJlZGljdGFibGUgd3JhcHBlciBvZiB0aGUgcmVzcG9uZGVyIGhhbmRsZXJzIHByb3ZpZGVkIGJ5IHRoZVxuICogW2dlc3R1cmUgcmVzcG9uZGVyIHN5c3RlbV0oZG9jcy9nZXN0dXJlLXJlc3BvbmRlci1zeXN0ZW0uaHRtbCkuXG4gKiBGb3IgZWFjaCBoYW5kbGVyLCBpdCBwcm92aWRlcyBhIG5ldyBgZ2VzdHVyZVN0YXRlYCBvYmplY3QgYWxvbmdzaWRlIHRoZVxuICogbmF0aXZlIGV2ZW50IG9iamVjdDpcbiAqXG4gKiBgYGBcbiAqIG9uUGFuUmVzcG9uZGVyTW92ZTogKGV2ZW50LCBnZXN0dXJlU3RhdGUpID0+IHt9XG4gKiBgYGBcbiAqXG4gKiBBIG5hdGl2ZSBldmVudCBpcyBhIHN5bnRoZXRpYyB0b3VjaCBldmVudCB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAqXG4gKiAgLSBgbmF0aXZlRXZlbnRgXG4gKiAgICAgICsgYGNoYW5nZWRUb3VjaGVzYCAtIEFycmF5IG9mIGFsbCB0b3VjaCBldmVudHMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgZXZlbnRcbiAqICAgICAgKyBgaWRlbnRpZmllcmAgLSBUaGUgSUQgb2YgdGhlIHRvdWNoXG4gKiAgICAgICsgYGxvY2F0aW9uWGAgLSBUaGUgWCBwb3NpdGlvbiBvZiB0aGUgdG91Y2gsIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50XG4gKiAgICAgICsgYGxvY2F0aW9uWWAgLSBUaGUgWSBwb3NpdGlvbiBvZiB0aGUgdG91Y2gsIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50XG4gKiAgICAgICsgYHBhZ2VYYCAtIFRoZSBYIHBvc2l0aW9uIG9mIHRoZSB0b3VjaCwgcmVsYXRpdmUgdG8gdGhlIHJvb3QgZWxlbWVudFxuICogICAgICArIGBwYWdlWWAgLSBUaGUgWSBwb3NpdGlvbiBvZiB0aGUgdG91Y2gsIHJlbGF0aXZlIHRvIHRoZSByb290IGVsZW1lbnRcbiAqICAgICAgKyBgdGFyZ2V0YCAtIFRoZSBub2RlIGlkIG9mIHRoZSBlbGVtZW50IHJlY2VpdmluZyB0aGUgdG91Y2ggZXZlbnRcbiAqICAgICAgKyBgdGltZXN0YW1wYCAtIEEgdGltZSBpZGVudGlmaWVyIGZvciB0aGUgdG91Y2gsIHVzZWZ1bCBmb3IgdmVsb2NpdHkgY2FsY3VsYXRpb25cbiAqICAgICAgKyBgdG91Y2hlc2AgLSBBcnJheSBvZiBhbGwgY3VycmVudCB0b3VjaGVzIG9uIHRoZSBzY3JlZW5cbiAqXG4gKiBBIGBnZXN0dXJlU3RhdGVgIG9iamVjdCBoYXMgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSBgc3RhdGVJRGAgLSBJRCBvZiB0aGUgZ2VzdHVyZVN0YXRlLSBwZXJzaXN0ZWQgYXMgbG9uZyBhcyB0aGVyZSBhdCBsZWFzdFxuICogICAgIG9uZSB0b3VjaCBvbiBzY3JlZW5cbiAqICAtIGBtb3ZlWGAgLSB0aGUgbGF0ZXN0IHNjcmVlbiBjb29yZGluYXRlcyBvZiB0aGUgcmVjZW50bHktbW92ZWQgdG91Y2hcbiAqICAtIGBtb3ZlWWAgLSB0aGUgbGF0ZXN0IHNjcmVlbiBjb29yZGluYXRlcyBvZiB0aGUgcmVjZW50bHktbW92ZWQgdG91Y2hcbiAqICAtIGB4MGAgLSB0aGUgc2NyZWVuIGNvb3JkaW5hdGVzIG9mIHRoZSByZXNwb25kZXIgZ3JhbnRcbiAqICAtIGB5MGAgLSB0aGUgc2NyZWVuIGNvb3JkaW5hdGVzIG9mIHRoZSByZXNwb25kZXIgZ3JhbnRcbiAqICAtIGBkeGAgLSBhY2N1bXVsYXRlZCBkaXN0YW5jZSBvZiB0aGUgZ2VzdHVyZSBzaW5jZSB0aGUgdG91Y2ggc3RhcnRlZFxuICogIC0gYGR5YCAtIGFjY3VtdWxhdGVkIGRpc3RhbmNlIG9mIHRoZSBnZXN0dXJlIHNpbmNlIHRoZSB0b3VjaCBzdGFydGVkXG4gKiAgLSBgdnhgIC0gY3VycmVudCB2ZWxvY2l0eSBvZiB0aGUgZ2VzdHVyZVxuICogIC0gYHZ5YCAtIGN1cnJlbnQgdmVsb2NpdHkgb2YgdGhlIGdlc3R1cmVcbiAqICAtIGBudW1iZXJBY3RpdmVUb3VjaGVzYCAtIE51bWJlciBvZiB0b3VjaGVzIGN1cnJlbnRseSBvbiBzY3JlZW5cbiAqXG4gKiAjIyMgQmFzaWMgVXNhZ2VcbiAqXG4gKiBgYGBcbiAqICAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICB0aGlzLl9wYW5SZXNwb25kZXIgPSBQYW5SZXNwb25kZXIuY3JlYXRlKHtcbiAqICAgICAgIC8vIEFzayB0byBiZSB0aGUgcmVzcG9uZGVyOlxuICogICAgICAgb25TdGFydFNob3VsZFNldFBhblJlc3BvbmRlcjogKGV2dCwgZ2VzdHVyZVN0YXRlKSA9PiB0cnVlLFxuICogICAgICAgb25TdGFydFNob3VsZFNldFBhblJlc3BvbmRlckNhcHR1cmU6IChldnQsIGdlc3R1cmVTdGF0ZSkgPT4gdHJ1ZSxcbiAqICAgICAgIG9uTW92ZVNob3VsZFNldFBhblJlc3BvbmRlcjogKGV2dCwgZ2VzdHVyZVN0YXRlKSA9PiB0cnVlLFxuICogICAgICAgb25Nb3ZlU2hvdWxkU2V0UGFuUmVzcG9uZGVyQ2FwdHVyZTogKGV2dCwgZ2VzdHVyZVN0YXRlKSA9PiB0cnVlLFxuICpcbiAqICAgICAgIG9uUGFuUmVzcG9uZGVyR3JhbnQ6IChldnQsIGdlc3R1cmVTdGF0ZSkgPT4ge1xuICogICAgICAgICAvLyBUaGUgZ2VzdHVyZSBoYXMgc3RhcnRlZC4gU2hvdyB2aXN1YWwgZmVlZGJhY2sgc28gdGhlIHVzZXIga25vd3NcbiAqICAgICAgICAgLy8gd2hhdCBpcyBoYXBwZW5pbmchXG4gKlxuICogICAgICAgICAvLyBnZXN0dXJlU3RhdGUuZHt4LHl9IHdpbGwgYmUgc2V0IHRvIHplcm8gbm93XG4gKiAgICAgICB9LFxuICogICAgICAgb25QYW5SZXNwb25kZXJNb3ZlOiAoZXZ0LCBnZXN0dXJlU3RhdGUpID0+IHtcbiAqICAgICAgICAgLy8gVGhlIG1vc3QgcmVjZW50IG1vdmUgZGlzdGFuY2UgaXMgZ2VzdHVyZVN0YXRlLm1vdmV7WCxZfVxuICpcbiAqICAgICAgICAgLy8gVGhlIGFjY3VtdWxhdGVkIGdlc3R1cmUgZGlzdGFuY2Ugc2luY2UgYmVjb21pbmcgcmVzcG9uZGVyIGlzXG4gKiAgICAgICAgIC8vIGdlc3R1cmVTdGF0ZS5ke3gseX1cbiAqICAgICAgIH0sXG4gKiAgICAgICBvblBhblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogKGV2dCwgZ2VzdHVyZVN0YXRlKSA9PiB0cnVlLFxuICogICAgICAgb25QYW5SZXNwb25kZXJSZWxlYXNlOiAoZXZ0LCBnZXN0dXJlU3RhdGUpID0+IHtcbiAqICAgICAgICAgLy8gVGhlIHVzZXIgaGFzIHJlbGVhc2VkIGFsbCB0b3VjaGVzIHdoaWxlIHRoaXMgdmlldyBpcyB0aGVcbiAqICAgICAgICAgLy8gcmVzcG9uZGVyLiBUaGlzIHR5cGljYWxseSBtZWFucyBhIGdlc3R1cmUgaGFzIHN1Y2NlZWRlZFxuICogICAgICAgfSxcbiAqICAgICAgIG9uUGFuUmVzcG9uZGVyVGVybWluYXRlOiAoZXZ0LCBnZXN0dXJlU3RhdGUpID0+IHtcbiAqICAgICAgICAgLy8gQW5vdGhlciBjb21wb25lbnQgaGFzIGJlY29tZSB0aGUgcmVzcG9uZGVyLCBzbyB0aGlzIGdlc3R1cmVcbiAqICAgICAgICAgLy8gc2hvdWxkIGJlIGNhbmNlbGxlZFxuICogICAgICAgfSxcbiAqICAgICAgIG9uU2hvdWxkQmxvY2tOYXRpdmVSZXNwb25kZXI6IChldnQsIGdlc3R1cmVTdGF0ZSkgPT4ge1xuICogICAgICAgICAvLyBSZXR1cm5zIHdoZXRoZXIgdGhpcyBjb21wb25lbnQgc2hvdWxkIGJsb2NrIG5hdGl2ZSBjb21wb25lbnRzIGZyb20gYmVjb21pbmcgdGhlIEpTXG4gKiAgICAgICAgIC8vIHJlc3BvbmRlci4gUmV0dXJucyB0cnVlIGJ5IGRlZmF1bHQuIElzIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBvbiBhbmRyb2lkLlxuICogICAgICAgICByZXR1cm4gdHJ1ZTtcbiAqICAgICAgIH0sXG4gKiAgICAgfSk7XG4gKiAgIH0sXG4gKlxuICogICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiAoXG4gKiAgICAgICA8VmlldyB7Li4udGhpcy5fcGFuUmVzcG9uZGVyLnBhbkhhbmRsZXJzfSAvPlxuICogICAgICk7XG4gKiAgIH0sXG4gKlxuICogYGBgXG4gKlxuICogIyMjIFdvcmtpbmcgRXhhbXBsZVxuICpcbiAqIFRvIHNlZSBpdCBpbiBhY3Rpb24sIHRyeSB0aGVcbiAqIFtQYW5SZXNwb25kZXIgZXhhbXBsZSBpbiBSTlRlc3Rlcl0oaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9ibG9iL21hc3Rlci9STlRlc3Rlci9qcy9QYW5SZXNwb25kZXJFeGFtcGxlLmpzKVxuICovXG5cbnZhciBQYW5SZXNwb25kZXIgPSB7XG4gIC8qKlxuICAgKlxuICAgKiBBIGdyYXBoaWNhbCBleHBsYW5hdGlvbiBvZiB0aGUgdG91Y2ggZGF0YSBmbG93OlxuICAgKlxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgKiB8IFJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlIHwgICAgICAgICAgICAgfFRvdWNoSGlzdG9yeU1hdGggICAgICAgICAgICAgICAgfFxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgKy0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgKiB8R2xvYmFsIHN0b3JlIG9mIHRvdWNoSGlzdG9yeXwgICAgICAgICAgICAgfEFsbG9jYXRpb24tbGVzcyBtYXRoIHV0aWwgICAgICAgfFxuICAgKiB8aW5jbHVkaW5nIGFjdGl2ZW5lc3MsIHN0YXJ0IHwgICAgICAgICAgICAgfG9uIHRvdWNoIGhpc3RvcnkgKGNlbnRyb2lkcyAgICAgfFxuICAgKiB8cG9zaXRpb24sIHByZXYvY3VyIHBvc2l0aW9uLnwgICAgICAgICAgICAgfGFuZCBtdWx0aXRvdWNoIG1vdmVtZW50IGV0YykgICAgfFxuICAgKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiArLS0tLV4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgKy0tLS1eLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgKiAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgfCAocmVjb3JkcyByZWxldmFudCBoaXN0b3J5ICAgICAgICAgICAgICAgIHxcbiAgICogICAgICB8ICBvZiB0b3VjaGVzIHJlbGV2YW50IGZvciAgICAgICAgICAgICAgICAgfFxuICAgKiAgICAgIHwgIGltcGxlbWVudGluZyBoaWdoZXIgbGV2ZWwgICAgICAgICAgICAgICB8XG4gICAqICAgICAgfCAgZ2VzdHVyZXMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiArLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgKy0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgKiB8IFJlc3BvbmRlckV2ZW50UGx1Z2luICAgICAgIHwgICAgICAgICAgICAgfCAgICB8ICAgWW91ciBBcHAvQ29tcG9uZW50ICAgICAgfFxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgKy0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgKiB8TmVnb3RpYXRlcyB3aGljaCB2aWV3IGdldHMgIHwgTG93IGxldmVsICAgfCAgICB8ICAgICAgICAgICAgIEhpZ2ggbGV2ZWwgICAgfFxuICAgKiB8b25SZXNwb25kZXJNb3ZlIGV2ZW50cy4gICAgIHwgZXZlbnRzIHcvICAgfCAgKy0rLS0tLS0tLSsgICAgIGV2ZW50cyB3LyAgICAgfFxuICAgKiB8QWxzbyByZWNvcmRzIGhpc3RvcnkgaW50byAgIHwgdG91Y2hIaXN0b3J5fCAgfCAgIFBhbiAgIHwgICAgIG11bHRpdG91Y2ggKyAgfFxuICAgKiB8UmVzcG9uZGVyVG91Y2hIaXN0b3J5U3RvcmUuICstLS0tLS0tLS0tLS0tLS0tPlJlc3BvbmRlcistLS0tLT4gYWNjdW11bGF0aXZlfFxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgYXR0YWNoZWQgdG8gfCAgfCAgICAgICAgIHwgICAgIGRpc3RhbmNlIGFuZCAgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2ggZXZlbnQgfCAgKy0tLS0tLS0tLSsgICAgIHZlbG9jaXR5LiAgICAgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgKlxuICAgKlxuICAgKlxuICAgKiBHZXN0dXJlIHRoYXQgY2FsY3VsYXRlcyBjdW11bGF0aXZlIG1vdmVtZW50IG92ZXIgdGltZSBpbiBhIHdheSB0aGF0IGp1c3RcbiAgICogXCJkb2VzIHRoZSByaWdodCB0aGluZ1wiIGZvciBtdWx0aXBsZSB0b3VjaGVzLiBUaGUgXCJyaWdodCB0aGluZ1wiIGlzIHZlcnlcbiAgICogbnVhbmNlZC4gV2hlbiBtb3ZpbmcgdHdvIHRvdWNoZXMgaW4gb3Bwb3NpdGUgZGlyZWN0aW9ucywgdGhlIGN1bXVsYXRpdmVcbiAgICogZGlzdGFuY2UgaXMgemVybyBpbiBlYWNoIGRpbWVuc2lvbi4gV2hlbiB0d28gdG91Y2hlcyBtb3ZlIGluIHBhcmFsbGVsIGZpdmVcbiAgICogcGl4ZWxzIGluIHRoZSBzYW1lIGRpcmVjdGlvbiwgdGhlIGN1bXVsYXRpdmUgZGlzdGFuY2UgaXMgZml2ZSwgbm90IHRlbi4gSWZcbiAgICogdHdvIHRvdWNoZXMgc3RhcnQsIG9uZSBtb3ZlcyBmaXZlIGluIGEgZGlyZWN0aW9uLCB0aGVuIHN0b3BzIGFuZCB0aGUgb3RoZXJcbiAgICogdG91Y2ggbW92ZXMgZml2ZXMgaW4gdGhlIHNhbWUgZGlyZWN0aW9uLCB0aGUgY3VtdWxhdGl2ZSBkaXN0YW5jZSBpcyB0ZW4uXG4gICAqXG4gICAqIFRoaXMgbG9naWMgcmVxdWlyZXMgYSBraW5kIG9mIHByb2Nlc3Npbmcgb2YgdGltZSBcImNsdXN0ZXJzXCIgb2YgdG91Y2ggZXZlbnRzXG4gICAqIHNvIHRoYXQgdHdvIHRvdWNoIG1vdmVzIHRoYXQgZXNzZW50aWFsbHkgb2NjdXIgaW4gcGFyYWxsZWwgYnV0IG1vdmUgZXZlcnlcbiAgICogb3RoZXIgZnJhbWUgcmVzcGVjdGl2ZWx5LCBhcmUgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBzYW1lIG1vdmVtZW50LlxuICAgKlxuICAgKiBFeHBsYW5hdGlvbiBvZiBzb21lIG9mIHRoZSBub24tb2J2aW91cyBmaWVsZHM6XG4gICAqXG4gICAqIC0gbW92ZVgvbW92ZVk6IElmIG5vIG1vdmUgZXZlbnQgaGFzIGJlZW4gb2JzZXJ2ZWQsIHRoZW4gYChtb3ZlWCwgbW92ZVkpYCBpc1xuICAgKiAgIGludmFsaWQuIElmIGEgbW92ZSBldmVudCBoYXMgYmVlbiBvYnNlcnZlZCwgYChtb3ZlWCwgbW92ZVkpYCBpcyB0aGVcbiAgICogICBjZW50cm9pZCBvZiB0aGUgbW9zdCByZWNlbnRseSBtb3ZlZCBcImNsdXN0ZXJcIiBvZiBhY3RpdmUgdG91Y2hlcy5cbiAgICogICAoQ3VycmVudGx5IGFsbCBtb3ZlIGhhdmUgdGhlIHNhbWUgdGltZVN0YW1wLCBidXQgbGF0ZXIgd2Ugc2hvdWxkIGFkZCBzb21lXG4gICAqICAgdGhyZXNob2xkIGZvciB3aGF0IGlzIGNvbnNpZGVyZWQgdG8gYmUgXCJtb3ZpbmdcIikuIElmIGEgcGFsbSBpc1xuICAgKiAgIGFjY2lkZW50YWxseSBjb3VudGVkIGFzIGEgdG91Y2gsIGJ1dCBhIGZpbmdlciBpcyBtb3ZpbmcgZ3JlYXRseSwgdGhlIHBhbG1cbiAgICogICB3aWxsIG1vdmUgc2xpZ2h0bHksIGJ1dCB3ZSBvbmx5IHdhbnQgdG8gY291bnQgdGhlIHNpbmdsZSBtb3ZpbmcgdG91Y2guXG4gICAqIC0geDAveTA6IENlbnRyb2lkIGxvY2F0aW9uIChub24tY3VtdWxhdGl2ZSkgYXQgdGhlIHRpbWUgb2YgYmVjb21pbmdcbiAgICogICByZXNwb25kZXIuXG4gICAqIC0gZHgvZHk6IEN1bXVsYXRpdmUgdG91Y2ggZGlzdGFuY2UgLSBub3QgdGhlIHNhbWUgdGhpbmcgYXMgc3VtIG9mIGVhY2ggdG91Y2hcbiAgICogICBkaXN0YW5jZS4gQWNjb3VudHMgZm9yIHRvdWNoIG1vdmVzIHRoYXQgYXJlIGNsdXN0ZXJlZCB0b2dldGhlciBpbiB0aW1lLFxuICAgKiAgIG1vdmluZyB0aGUgc2FtZSBkaXJlY3Rpb24uIE9ubHkgdmFsaWQgd2hlbiBjdXJyZW50bHkgcmVzcG9uZGVyIChvdGhlcndpc2UsXG4gICAqICAgaXQgb25seSByZXByZXNlbnRzIHRoZSBkcmFnIGRpc3RhbmNlIGJlbG93IHRoZSB0aHJlc2hvbGQpLlxuICAgKiAtIHZ4L3Z5OiBWZWxvY2l0eS5cbiAgICovXG4gIF9pbml0aWFsaXplR2VzdHVyZVN0YXRlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZUdlc3R1cmVTdGF0ZShnZXN0dXJlU3RhdGUpIHtcbiAgICBnZXN0dXJlU3RhdGUubW92ZVggPSAwO1xuICAgIGdlc3R1cmVTdGF0ZS5tb3ZlWSA9IDA7XG4gICAgZ2VzdHVyZVN0YXRlLngwID0gMDtcbiAgICBnZXN0dXJlU3RhdGUueTAgPSAwO1xuICAgIGdlc3R1cmVTdGF0ZS5keCA9IDA7XG4gICAgZ2VzdHVyZVN0YXRlLmR5ID0gMDtcbiAgICBnZXN0dXJlU3RhdGUudnggPSAwO1xuICAgIGdlc3R1cmVTdGF0ZS52eSA9IDA7XG4gICAgZ2VzdHVyZVN0YXRlLm51bWJlckFjdGl2ZVRvdWNoZXMgPSAwOyAvLyBBbGwgYGdlc3R1cmVTdGF0ZWAgYWNjb3VudHMgZm9yIHRpbWVTdGFtcHMgdXAgdW50aWw6XG5cbiAgICBnZXN0dXJlU3RhdGUuX2FjY291bnRzRm9yTW92ZXNVcFRvID0gMDtcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBpcyBudWFuY2VkIGFuZCBpcyBuZWNlc3NhcnkuIEl0IGlzIGluY29ycmVjdCB0byBjb250aW51b3VzbHkgdGFrZSBhbGxcbiAgICogYWN0aXZlICphbmQqIHJlY2VudGx5IG1vdmVkIHRvdWNoZXMsIGZpbmQgdGhlIGNlbnRyb2lkLCBhbmQgdHJhY2sgaG93IHRoYXRcbiAgICogcmVzdWx0IGNoYW5nZXMgb3ZlciB0aW1lLiBJbnN0ZWFkLCB3ZSBtdXN0IHRha2UgYWxsIHJlY2VudGx5IG1vdmVkXG4gICAqIHRvdWNoZXMsIGFuZCBjYWxjdWxhdGUgaG93IHRoZSBjZW50cm9pZCBoYXMgY2hhbmdlZCBqdXN0IGZvciB0aG9zZVxuICAgKiByZWNlbnRseSBtb3ZlZCB0b3VjaGVzLCBhbmQgYXBwZW5kIHRoYXQgY2hhbmdlIHRvIGFuIGFjY3VtdWxhdG9yLiBUaGlzIGlzXG4gICAqIHRvIChhdCBsZWFzdCkgaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSB1c2VyIGlzIG1vdmluZyB0aHJlZSBmaW5nZXJzLCBhbmRcbiAgICogdGhlbiBvbmUgb2YgdGhlIGZpbmdlcnMgc3RvcHMgYnV0IHRoZSBvdGhlciB0d28gY29udGludWUuXG4gICAqXG4gICAqIFRoaXMgaXMgdmVyeSBkaWZmZXJlbnQgdGhhbiB0YWtpbmcgYWxsIG9mIHRoZSByZWNlbnRseSBtb3ZlZCB0b3VjaGVzIGFuZFxuICAgKiBzdG9yaW5nIHRoZWlyIGNlbnRyb2lkIGFzIGBkeC9keWAuIEZvciBjb3JyZWN0bmVzcywgd2UgbXVzdCAqYWNjdW11bGF0ZVxuICAgKiBjaGFuZ2VzKiBpbiB0aGUgY2VudHJvaWQgb2YgcmVjZW50bHkgbW92ZWQgdG91Y2hlcy5cbiAgICpcbiAgICogVGhlcmUgaXMgYWxzbyBzb21lIG51YW5jZSB3aXRoIGhvdyB3ZSBoYW5kbGUgbXVsdGlwbGUgbW92ZWQgdG91Y2hlcyBpbiBhXG4gICAqIHNpbmdsZSBldmVudC4gV2l0aCB0aGUgd2F5IGBSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlcmAgZGlzcGF0Y2hlcyB0b3VjaGVzIGFzXG4gICAqIGluZGl2aWR1YWwgZXZlbnRzLCBtdWx0aXBsZSB0b3VjaGVzIGdlbmVyYXRlIHR3byAnbW92ZScgZXZlbnRzLCBlYWNoIG9mXG4gICAqIHRoZW0gdHJpZ2dlcmluZyBgb25SZXNwb25kZXJNb3ZlYC4gQnV0IHdpdGggdGhlIHdheSBgUGFuUmVzcG9uZGVyYCB3b3JrcyxcbiAgICogYWxsIG9mIHRoZSBnZXN0dXJlIGluZmVyZW5jZSBpcyBwZXJmb3JtZWQgb24gdGhlIGZpcnN0IGRpc3BhdGNoLCBzaW5jZSBpdFxuICAgKiBsb29rcyBhdCBhbGwgb2YgdGhlIHRvdWNoZXMgKGV2ZW4gdGhlIG9uZXMgZm9yIHdoaWNoIHRoZXJlIGhhc24ndCBiZWVuIGFcbiAgICogbmF0aXZlIGRpc3BhdGNoIHlldCkuIFRoZXJlZm9yZSwgYFBhblJlc3BvbmRlcmAgZG9lcyBub3QgY2FsbFxuICAgKiBgb25SZXNwb25kZXJNb3ZlYCBwYXNzZWQgdGhlIGZpcnN0IGRpc3BhdGNoLiBUaGlzIGRpdmVyZ2VzIGZyb20gdGhlXG4gICAqIHR5cGljYWwgcmVzcG9uZGVyIGNhbGxiYWNrIHBhdHRlcm4gKHdpdGhvdXQgdXNpbmcgYFBhblJlc3BvbmRlcmApLCBidXRcbiAgICogYXZvaWRzIG1vcmUgZGlzcGF0Y2hlcyB0aGFuIG5lY2Vzc2FyeS5cbiAgICovXG4gIF91cGRhdGVHZXN0dXJlU3RhdGVPbk1vdmU6IGZ1bmN0aW9uIF91cGRhdGVHZXN0dXJlU3RhdGVPbk1vdmUoZ2VzdHVyZVN0YXRlLCB0b3VjaEhpc3RvcnkpIHtcbiAgICBnZXN0dXJlU3RhdGUubnVtYmVyQWN0aXZlVG91Y2hlcyA9IHRvdWNoSGlzdG9yeS5udW1iZXJBY3RpdmVUb3VjaGVzO1xuICAgIGdlc3R1cmVTdGF0ZS5tb3ZlWCA9IGN1cnJlbnRDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIodG91Y2hIaXN0b3J5LCBnZXN0dXJlU3RhdGUuX2FjY291bnRzRm9yTW92ZXNVcFRvKTtcbiAgICBnZXN0dXJlU3RhdGUubW92ZVkgPSBjdXJyZW50Q2VudHJvaWRZT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyKHRvdWNoSGlzdG9yeSwgZ2VzdHVyZVN0YXRlLl9hY2NvdW50c0Zvck1vdmVzVXBUbyk7XG4gICAgdmFyIG1vdmVkQWZ0ZXIgPSBnZXN0dXJlU3RhdGUuX2FjY291bnRzRm9yTW92ZXNVcFRvO1xuICAgIHZhciBwcmV2WCA9IHByZXZpb3VzQ2VudHJvaWRYT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyKHRvdWNoSGlzdG9yeSwgbW92ZWRBZnRlcik7XG4gICAgdmFyIHggPSBjdXJyZW50Q2VudHJvaWRYT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyKHRvdWNoSGlzdG9yeSwgbW92ZWRBZnRlcik7XG4gICAgdmFyIHByZXZZID0gcHJldmlvdXNDZW50cm9pZFlPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIodG91Y2hIaXN0b3J5LCBtb3ZlZEFmdGVyKTtcbiAgICB2YXIgeSA9IGN1cnJlbnRDZW50cm9pZFlPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIodG91Y2hIaXN0b3J5LCBtb3ZlZEFmdGVyKTtcbiAgICB2YXIgbmV4dERYID0gZ2VzdHVyZVN0YXRlLmR4ICsgKHggLSBwcmV2WCk7XG4gICAgdmFyIG5leHREWSA9IGdlc3R1cmVTdGF0ZS5keSArICh5IC0gcHJldlkpOyAvLyBUT0RPOiBUaGlzIG11c3QgYmUgZmlsdGVyZWQgaW50ZWxsaWdlbnRseS5cblxuICAgIHZhciBkdCA9IHRvdWNoSGlzdG9yeS5tb3N0UmVjZW50VGltZVN0YW1wIC0gZ2VzdHVyZVN0YXRlLl9hY2NvdW50c0Zvck1vdmVzVXBUbztcbiAgICBnZXN0dXJlU3RhdGUudnggPSAobmV4dERYIC0gZ2VzdHVyZVN0YXRlLmR4KSAvIGR0O1xuICAgIGdlc3R1cmVTdGF0ZS52eSA9IChuZXh0RFkgLSBnZXN0dXJlU3RhdGUuZHkpIC8gZHQ7XG4gICAgZ2VzdHVyZVN0YXRlLmR4ID0gbmV4dERYO1xuICAgIGdlc3R1cmVTdGF0ZS5keSA9IG5leHREWTtcbiAgICBnZXN0dXJlU3RhdGUuX2FjY291bnRzRm9yTW92ZXNVcFRvID0gdG91Y2hIaXN0b3J5Lm1vc3RSZWNlbnRUaW1lU3RhbXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgRW5oYW5jZWQgdmVyc2lvbnMgb2YgYWxsIG9mIHRoZSByZXNwb25kZXIgY2FsbGJhY2tzXG4gICAqIHRoYXQgcHJvdmlkZSBub3Qgb25seSB0aGUgdHlwaWNhbCBgUmVzcG9uZGVyU3ludGhldGljRXZlbnRgLCBidXQgYWxzbyB0aGVcbiAgICogYFBhblJlc3BvbmRlcmAgZ2VzdHVyZSBzdGF0ZS4gIFNpbXBseSByZXBsYWNlIHRoZSB3b3JkIGBSZXNwb25kZXJgIHdpdGhcbiAgICogYFBhblJlc3BvbmRlcmAgaW4gZWFjaCBvZiB0aGUgdHlwaWNhbCBgb25SZXNwb25kZXIqYCBjYWxsYmFja3MuIEZvclxuICAgKiBleGFtcGxlLCB0aGUgYGNvbmZpZ2Agb2JqZWN0IHdvdWxkIGxvb2sgbGlrZTpcbiAgICpcbiAgICogIC0gYG9uTW92ZVNob3VsZFNldFBhblJlc3BvbmRlcjogKGUsIGdlc3R1cmVTdGF0ZSkgPT4gey4uLn1gXG4gICAqICAtIGBvbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXJDYXB0dXJlOiAoZSwgZ2VzdHVyZVN0YXRlKSA9PiB7Li4ufWBcbiAgICogIC0gYG9uU3RhcnRTaG91bGRTZXRQYW5SZXNwb25kZXI6IChlLCBnZXN0dXJlU3RhdGUpID0+IHsuLi59YFxuICAgKiAgLSBgb25TdGFydFNob3VsZFNldFBhblJlc3BvbmRlckNhcHR1cmU6IChlLCBnZXN0dXJlU3RhdGUpID0+IHsuLi59YFxuICAgKiAgLSBgb25QYW5SZXNwb25kZXJSZWplY3Q6IChlLCBnZXN0dXJlU3RhdGUpID0+IHsuLi59YFxuICAgKiAgLSBgb25QYW5SZXNwb25kZXJHcmFudDogKGUsIGdlc3R1cmVTdGF0ZSkgPT4gey4uLn1gXG4gICAqICAtIGBvblBhblJlc3BvbmRlclN0YXJ0OiAoZSwgZ2VzdHVyZVN0YXRlKSA9PiB7Li4ufWBcbiAgICogIC0gYG9uUGFuUmVzcG9uZGVyRW5kOiAoZSwgZ2VzdHVyZVN0YXRlKSA9PiB7Li4ufWBcbiAgICogIC0gYG9uUGFuUmVzcG9uZGVyUmVsZWFzZTogKGUsIGdlc3R1cmVTdGF0ZSkgPT4gey4uLn1gXG4gICAqICAtIGBvblBhblJlc3BvbmRlck1vdmU6IChlLCBnZXN0dXJlU3RhdGUpID0+IHsuLi59YFxuICAgKiAgLSBgb25QYW5SZXNwb25kZXJUZXJtaW5hdGU6IChlLCBnZXN0dXJlU3RhdGUpID0+IHsuLi59YFxuICAgKiAgLSBgb25QYW5SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IChlLCBnZXN0dXJlU3RhdGUpID0+IHsuLi59YFxuICAgKiAgLSBgb25TaG91bGRCbG9ja05hdGl2ZVJlc3BvbmRlcjogKGUsIGdlc3R1cmVTdGF0ZSkgPT4gey4uLn1gXG4gICAqXG4gICAqICBJbiBnZW5lcmFsLCBmb3IgZXZlbnRzIHRoYXQgaGF2ZSBjYXB0dXJlIGVxdWl2YWxlbnRzLCB3ZSB1cGRhdGUgdGhlXG4gICAqICBnZXN0dXJlU3RhdGUgb25jZSBpbiB0aGUgY2FwdHVyZSBwaGFzZSBhbmQgY2FuIHVzZSBpdCBpbiB0aGUgYnViYmxlIHBoYXNlXG4gICAqICBhcyB3ZWxsLlxuICAgKlxuICAgKiAgQmUgY2FyZWZ1bCB3aXRoIG9uU3RhcnRTaG91bGQqIGNhbGxiYWNrcy4gVGhleSBvbmx5IHJlZmxlY3QgdXBkYXRlZFxuICAgKiAgYGdlc3R1cmVTdGF0ZWAgZm9yIHN0YXJ0L2VuZCBldmVudHMgdGhhdCBidWJibGUvY2FwdHVyZSB0byB0aGUgTm9kZS5cbiAgICogIE9uY2UgdGhlIG5vZGUgaXMgdGhlIHJlc3BvbmRlciwgeW91IGNhbiByZWx5IG9uIGV2ZXJ5IHN0YXJ0L2VuZCBldmVudFxuICAgKiAgYmVpbmcgcHJvY2Vzc2VkIGJ5IHRoZSBnZXN0dXJlIGFuZCBgZ2VzdHVyZVN0YXRlYCBiZWluZyB1cGRhdGVkXG4gICAqICBhY2NvcmRpbmdseS4gKG51bWJlckFjdGl2ZVRvdWNoZXMpIG1heSBub3QgYmUgdG90YWxseSBhY2N1cmF0ZSB1bmxlc3MgeW91XG4gICAqICBhcmUgdGhlIHJlc3BvbmRlci5cbiAgICovXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGNvbmZpZykge1xuICAgIHZhciBpbnRlcmFjdGlvblN0YXRlID0ge1xuICAgICAgaGFuZGxlOiBudWxsLFxuICAgICAgc2hvdWxkQ2FuY2VsQ2xpY2s6IGZhbHNlLFxuICAgICAgdGltZW91dDogbnVsbFxuICAgIH07XG4gICAgdmFyIGdlc3R1cmVTdGF0ZSA9IHtcbiAgICAgIC8vIFVzZWZ1bCBmb3IgZGVidWdnaW5nXG4gICAgICBzdGF0ZUlEOiBNYXRoLnJhbmRvbSgpLFxuICAgICAgbW92ZVg6IDAsXG4gICAgICBtb3ZlWTogMCxcbiAgICAgIHgwOiAwLFxuICAgICAgeTA6IDAsXG4gICAgICBkeDogMCxcbiAgICAgIGR5OiAwLFxuICAgICAgdng6IDAsXG4gICAgICB2eTogMCxcbiAgICAgIG51bWJlckFjdGl2ZVRvdWNoZXM6IDAsXG4gICAgICBfYWNjb3VudHNGb3JNb3Zlc1VwVG86IDBcbiAgICB9O1xuICAgIHZhciBwYW5IYW5kbGVycyA9IHtcbiAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IGZ1bmN0aW9uIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5vblN0YXJ0U2hvdWxkU2V0UGFuUmVzcG9uZGVyID09IG51bGwgPyBmYWxzZSA6IGNvbmZpZy5vblN0YXJ0U2hvdWxkU2V0UGFuUmVzcG9uZGVyKGV2ZW50LCBnZXN0dXJlU3RhdGUpO1xuICAgICAgfSxcbiAgICAgIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24gb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBjb25maWcub25Nb3ZlU2hvdWxkU2V0UGFuUmVzcG9uZGVyID09IG51bGwgPyBmYWxzZSA6IGNvbmZpZy5vbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXIoZXZlbnQsIGdlc3R1cmVTdGF0ZSk7XG4gICAgICB9LFxuICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IGZ1bmN0aW9uIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlKGV2ZW50KSB7XG4gICAgICAgIC8vIFRPRE86IEFjdHVhbGx5LCB3ZSBzaG91bGQgcmVpbml0aWFsaXplIHRoZSBzdGF0ZSBhbnkgdGltZVxuICAgICAgICAvLyB0b3VjaGVzLmxlbmd0aCBpbmNyZWFzZXMgZnJvbSAwIGFjdGl2ZSB0byA+IDAgYWN0aXZlLlxuICAgICAgICBpZiAoZXZlbnQubmF0aXZlRXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBQYW5SZXNwb25kZXIuX2luaXRpYWxpemVHZXN0dXJlU3RhdGUoZ2VzdHVyZVN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdlc3R1cmVTdGF0ZS5udW1iZXJBY3RpdmVUb3VjaGVzID0gZXZlbnQudG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXM7XG4gICAgICAgIHJldHVybiBjb25maWcub25TdGFydFNob3VsZFNldFBhblJlc3BvbmRlckNhcHR1cmUgIT0gbnVsbCA/IGNvbmZpZy5vblN0YXJ0U2hvdWxkU2V0UGFuUmVzcG9uZGVyQ2FwdHVyZShldmVudCwgZ2VzdHVyZVN0YXRlKSA6IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IGZ1bmN0aW9uIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRvdWNoSGlzdG9yeSA9IGV2ZW50LnRvdWNoSGlzdG9yeTsgLy8gUmVzcG9uZGVyIHN5c3RlbSBpbmNvcnJlY3RseSBkaXNwYXRjaGVzIHNob3VsZCogdG8gY3VycmVudCByZXNwb25kZXJcbiAgICAgICAgLy8gRmlsdGVyIG91dCBhbnkgdG91Y2ggbW92ZXMgcGFzdCB0aGUgZmlyc3Qgb25lIC0gd2Ugd291bGQgaGF2ZVxuICAgICAgICAvLyBhbHJlYWR5IHByb2Nlc3NlZCBtdWx0aS10b3VjaCBnZW9tZXRyeSBkdXJpbmcgdGhlIGZpcnN0IGV2ZW50LlxuXG4gICAgICAgIGlmIChnZXN0dXJlU3RhdGUuX2FjY291bnRzRm9yTW92ZXNVcFRvID09PSB0b3VjaEhpc3RvcnkubW9zdFJlY2VudFRpbWVTdGFtcCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIFBhblJlc3BvbmRlci5fdXBkYXRlR2VzdHVyZVN0YXRlT25Nb3ZlKGdlc3R1cmVTdGF0ZSwgdG91Y2hIaXN0b3J5KTtcblxuICAgICAgICByZXR1cm4gY29uZmlnLm9uTW92ZVNob3VsZFNldFBhblJlc3BvbmRlckNhcHR1cmUgPyBjb25maWcub25Nb3ZlU2hvdWxkU2V0UGFuUmVzcG9uZGVyQ2FwdHVyZShldmVudCwgZ2VzdHVyZVN0YXRlKSA6IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIG9uUmVzcG9uZGVyR3JhbnQ6IGZ1bmN0aW9uIG9uUmVzcG9uZGVyR3JhbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFpbnRlcmFjdGlvblN0YXRlLmhhbmRsZSkge1xuICAgICAgICAgIGludGVyYWN0aW9uU3RhdGUuaGFuZGxlID0gX0ludGVyYWN0aW9uTWFuYWdlci5kZWZhdWx0LmNyZWF0ZUludGVyYWN0aW9uSGFuZGxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJhY3Rpb25TdGF0ZS50aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJJbnRlcmFjdGlvblRpbWVvdXQoaW50ZXJhY3Rpb25TdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnRlcmFjdGlvblN0YXRlLnNob3VsZENhbmNlbENsaWNrID0gdHJ1ZTtcbiAgICAgICAgZ2VzdHVyZVN0YXRlLngwID0gY3VycmVudENlbnRyb2lkWChldmVudC50b3VjaEhpc3RvcnkpO1xuICAgICAgICBnZXN0dXJlU3RhdGUueTAgPSBjdXJyZW50Q2VudHJvaWRZKGV2ZW50LnRvdWNoSGlzdG9yeSk7XG4gICAgICAgIGdlc3R1cmVTdGF0ZS5keCA9IDA7XG4gICAgICAgIGdlc3R1cmVTdGF0ZS5keSA9IDA7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5vblBhblJlc3BvbmRlckdyYW50KSB7XG4gICAgICAgICAgY29uZmlnLm9uUGFuUmVzcG9uZGVyR3JhbnQoZXZlbnQsIGdlc3R1cmVTdGF0ZSk7XG4gICAgICAgIH0gLy8gVE9ETzogdDc0NjcxMjQgaW52ZXN0aWdhdGUgaWYgdGhpcyBjYW4gYmUgcmVtb3ZlZFxuXG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy5vblNob3VsZEJsb2NrTmF0aXZlUmVzcG9uZGVyID09IG51bGwgPyB0cnVlIDogY29uZmlnLm9uU2hvdWxkQmxvY2tOYXRpdmVSZXNwb25kZXIoZXZlbnQsIGdlc3R1cmVTdGF0ZSk7XG4gICAgICB9LFxuICAgICAgb25SZXNwb25kZXJSZWplY3Q6IGZ1bmN0aW9uIG9uUmVzcG9uZGVyUmVqZWN0KGV2ZW50KSB7XG4gICAgICAgIGNsZWFySW50ZXJhY3Rpb25IYW5kbGUoaW50ZXJhY3Rpb25TdGF0ZSwgY29uZmlnLm9uUGFuUmVzcG9uZGVyUmVqZWN0LCBldmVudCwgZ2VzdHVyZVN0YXRlKTtcbiAgICAgIH0sXG4gICAgICBvblJlc3BvbmRlclJlbGVhc2U6IGZ1bmN0aW9uIG9uUmVzcG9uZGVyUmVsZWFzZShldmVudCkge1xuICAgICAgICBjbGVhckludGVyYWN0aW9uSGFuZGxlKGludGVyYWN0aW9uU3RhdGUsIGNvbmZpZy5vblBhblJlc3BvbmRlclJlbGVhc2UsIGV2ZW50LCBnZXN0dXJlU3RhdGUpO1xuICAgICAgICBzZXRJbnRlcmFjdGlvblRpbWVvdXQoaW50ZXJhY3Rpb25TdGF0ZSk7XG5cbiAgICAgICAgUGFuUmVzcG9uZGVyLl9pbml0aWFsaXplR2VzdHVyZVN0YXRlKGdlc3R1cmVTdGF0ZSk7XG4gICAgICB9LFxuICAgICAgb25SZXNwb25kZXJTdGFydDogZnVuY3Rpb24gb25SZXNwb25kZXJTdGFydChldmVudCkge1xuICAgICAgICB2YXIgdG91Y2hIaXN0b3J5ID0gZXZlbnQudG91Y2hIaXN0b3J5O1xuICAgICAgICBnZXN0dXJlU3RhdGUubnVtYmVyQWN0aXZlVG91Y2hlcyA9IHRvdWNoSGlzdG9yeS5udW1iZXJBY3RpdmVUb3VjaGVzO1xuXG4gICAgICAgIGlmIChjb25maWcub25QYW5SZXNwb25kZXJTdGFydCkge1xuICAgICAgICAgIGNvbmZpZy5vblBhblJlc3BvbmRlclN0YXJ0KGV2ZW50LCBnZXN0dXJlU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25SZXNwb25kZXJNb3ZlOiBmdW5jdGlvbiBvblJlc3BvbmRlck1vdmUoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRvdWNoSGlzdG9yeSA9IGV2ZW50LnRvdWNoSGlzdG9yeTsgLy8gR3VhcmQgYWdhaW5zdCB0aGUgZGlzcGF0Y2ggb2YgdHdvIHRvdWNoIG1vdmVzIHdoZW4gdGhlcmUgYXJlIHR3b1xuICAgICAgICAvLyBzaW11bHRhbmVvdXNseSBjaGFuZ2VkIHRvdWNoZXMuXG5cbiAgICAgICAgaWYgKGdlc3R1cmVTdGF0ZS5fYWNjb3VudHNGb3JNb3Zlc1VwVG8gPT09IHRvdWNoSGlzdG9yeS5tb3N0UmVjZW50VGltZVN0YW1wKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIEZpbHRlciBvdXQgYW55IHRvdWNoIG1vdmVzIHBhc3QgdGhlIGZpcnN0IG9uZSAtIHdlIHdvdWxkIGhhdmVcbiAgICAgICAgLy8gYWxyZWFkeSBwcm9jZXNzZWQgbXVsdGktdG91Y2ggZ2VvbWV0cnkgZHVyaW5nIHRoZSBmaXJzdCBldmVudC5cblxuXG4gICAgICAgIFBhblJlc3BvbmRlci5fdXBkYXRlR2VzdHVyZVN0YXRlT25Nb3ZlKGdlc3R1cmVTdGF0ZSwgdG91Y2hIaXN0b3J5KTtcblxuICAgICAgICBpZiAoY29uZmlnLm9uUGFuUmVzcG9uZGVyTW92ZSkge1xuICAgICAgICAgIGNvbmZpZy5vblBhblJlc3BvbmRlck1vdmUoZXZlbnQsIGdlc3R1cmVTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblJlc3BvbmRlckVuZDogZnVuY3Rpb24gb25SZXNwb25kZXJFbmQoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRvdWNoSGlzdG9yeSA9IGV2ZW50LnRvdWNoSGlzdG9yeTtcbiAgICAgICAgZ2VzdHVyZVN0YXRlLm51bWJlckFjdGl2ZVRvdWNoZXMgPSB0b3VjaEhpc3RvcnkubnVtYmVyQWN0aXZlVG91Y2hlcztcbiAgICAgICAgY2xlYXJJbnRlcmFjdGlvbkhhbmRsZShpbnRlcmFjdGlvblN0YXRlLCBjb25maWcub25QYW5SZXNwb25kZXJFbmQsIGV2ZW50LCBnZXN0dXJlU3RhdGUpO1xuICAgICAgfSxcbiAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRlOiBmdW5jdGlvbiBvblJlc3BvbmRlclRlcm1pbmF0ZShldmVudCkge1xuICAgICAgICBjbGVhckludGVyYWN0aW9uSGFuZGxlKGludGVyYWN0aW9uU3RhdGUsIGNvbmZpZy5vblBhblJlc3BvbmRlclRlcm1pbmF0ZSwgZXZlbnQsIGdlc3R1cmVTdGF0ZSk7XG4gICAgICAgIHNldEludGVyYWN0aW9uVGltZW91dChpbnRlcmFjdGlvblN0YXRlKTtcblxuICAgICAgICBQYW5SZXNwb25kZXIuX2luaXRpYWxpemVHZXN0dXJlU3RhdGUoZ2VzdHVyZVN0YXRlKTtcbiAgICAgIH0sXG4gICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogZnVuY3Rpb24gb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5vblBhblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCA9PSBudWxsID8gdHJ1ZSA6IGNvbmZpZy5vblBhblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdChldmVudCwgZ2VzdHVyZVN0YXRlKTtcbiAgICAgIH0sXG4gICAgICAvLyBXZSBkbyBub3Qgd2FudCB0byB0cmlnZ2VyICdjbGljaycgYWN0aXZhdGVkIGdlc3R1cmVzIG9yIG5hdGl2ZSBiZWhhdmlvcnNcbiAgICAgIC8vIG9uIGFueSBwYW4gdGFyZ2V0IHRoYXQgaXMgdW5kZXIgYSBtb3VzZSBjdXJzb3Igd2hlbiBpdCBpcyByZWxlYXNlZC5cbiAgICAgIC8vIEJyb3dzZXJzIHdpbGwgbmF0aXZlbHkgY2FuY2VsICdjbGljaycgZXZlbnRzIG9uIGEgdGFyZ2V0IGlmIGEgbm9uLW1vdXNlXG4gICAgICAvLyBhY3RpdmUgcG9pbnRlciBtb3Zlcy5cbiAgICAgIG9uQ2xpY2tDYXB0dXJlOiBmdW5jdGlvbiBvbkNsaWNrQ2FwdHVyZShldmVudCkge1xuICAgICAgICBpZiAoaW50ZXJhY3Rpb25TdGF0ZS5zaG91bGRDYW5jZWxDbGljayA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBwYW5IYW5kbGVyczogcGFuSGFuZGxlcnMsXG4gICAgICBnZXRJbnRlcmFjdGlvbkhhbmRsZTogZnVuY3Rpb24gZ2V0SW50ZXJhY3Rpb25IYW5kbGUoKSB7XG4gICAgICAgIHJldHVybiBpbnRlcmFjdGlvblN0YXRlLmhhbmRsZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGVhckludGVyYWN0aW9uSGFuZGxlKGludGVyYWN0aW9uU3RhdGUsIGNhbGxiYWNrLCBldmVudCwgZ2VzdHVyZVN0YXRlKSB7XG4gIGlmIChpbnRlcmFjdGlvblN0YXRlLmhhbmRsZSkge1xuICAgIF9JbnRlcmFjdGlvbk1hbmFnZXIuZGVmYXVsdC5jbGVhckludGVyYWN0aW9uSGFuZGxlKGludGVyYWN0aW9uU3RhdGUuaGFuZGxlKTtcblxuICAgIGludGVyYWN0aW9uU3RhdGUuaGFuZGxlID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrKGV2ZW50LCBnZXN0dXJlU3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFySW50ZXJhY3Rpb25UaW1lb3V0KGludGVyYWN0aW9uU3RhdGUpIHtcbiAgY2xlYXJUaW1lb3V0KGludGVyYWN0aW9uU3RhdGUudGltZW91dCk7XG59XG5cbmZ1bmN0aW9uIHNldEludGVyYWN0aW9uVGltZW91dChpbnRlcmFjdGlvblN0YXRlKSB7XG4gIGludGVyYWN0aW9uU3RhdGUudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGludGVyYWN0aW9uU3RhdGUuc2hvdWxkQ2FuY2VsQ2xpY2sgPSBmYWxzZTtcbiAgfSwgMjUwKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gUGFuUmVzcG9uZGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxtQkFBbUIsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sc0NBQXNDLENBQUMsQ0FBQztBQUVoRyxJQUFJQyxpQkFBaUIsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sc0JBQXNCLENBQUMsQ0FBQztBQUU5RSxTQUFTRCxzQkFBc0JBLENBQUNHLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDTixVQUFVLEdBQUdNLEdBQUcsR0FBRztJQUFFTCxPQUFPLEVBQUVLO0VBQUksQ0FBQztBQUFFO0FBRTlGLElBQUlDLHFDQUFxQyxHQUFHRixpQkFBaUIsQ0FBQ0osT0FBTyxDQUFDTSxxQ0FBcUM7QUFDM0csSUFBSUMscUNBQXFDLEdBQUdILGlCQUFpQixDQUFDSixPQUFPLENBQUNPLHFDQUFxQztBQUMzRyxJQUFJQyxzQ0FBc0MsR0FBR0osaUJBQWlCLENBQUNKLE9BQU8sQ0FBQ1Esc0NBQXNDO0FBQzdHLElBQUlDLHNDQUFzQyxHQUFHTCxpQkFBaUIsQ0FBQ0osT0FBTyxDQUFDUyxzQ0FBc0M7QUFDN0csSUFBSUMsZ0JBQWdC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