d61184ad49a1631ea3212754dd7d6866
'use strict';

exports.__esModule = true;
exports.default = createEventHandle;
var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");
var emptyFunction = function emptyFunction() {};
function supportsPassiveEvents() {
  var supported = false;
  if (_ExecutionEnvironment.canUseDOM) {
    try {
      var options = {};
      Object.defineProperty(options, 'passive', {
        get: function get() {
          supported = true;
          return false;
        }
      });
      window.addEventListener('test', null, options);
      window.removeEventListener('test', null, options);
    } catch (e) {}
  }
  return supported;
}
var canUsePassiveEvents = supportsPassiveEvents();
function getOptions(options) {
  if (options == null) {
    return false;
  }
  return canUsePassiveEvents ? options : Boolean(options.capture);
}
function isPropagationStopped() {
  return this.cancelBubble;
}
function isDefaultPrevented() {
  return this.defaultPrevented;
}
function normalizeEvent(event) {
  event.nativeEvent = event;
  event.persist = emptyFunction;
  event.isDefaultPrevented = isDefaultPrevented;
  event.isPropagationStopped = isPropagationStopped;
  return event;
}
function createEventHandle(type, options) {
  var opts = getOptions(options);
  return function (target, listener) {
    if (target == null || typeof target.addEventListener !== 'function') {
      throw new Error('createEventHandle: called on an invalid target.');
    }
    var element = target;
    if (listener != null) {
      var compatListener = function compatListener(e) {
        return listener(normalizeEvent(e));
      };
      element.addEventListener(type, compatListener, opts);
      return function removeListener() {
        if (element != null) {
          element.removeEventListener(type, compatListener, opts);
        }
      };
    } else {
      return emptyFunction;
    }
  };
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjcmVhdGVFdmVudEhhbmRsZSIsIl9FeGVjdXRpb25FbnZpcm9ubWVudCIsInJlcXVpcmUiLCJlbXB0eUZ1bmN0aW9uIiwic3VwcG9ydHNQYXNzaXZlRXZlbnRzIiwic3VwcG9ydGVkIiwiY2FuVXNlRE9NIiwib3B0aW9ucyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlIiwiY2FuVXNlUGFzc2l2ZUV2ZW50cyIsImdldE9wdGlvbnMiLCJCb29sZWFuIiwiY2FwdHVyZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY2FuY2VsQnViYmxlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsIm5vcm1hbGl6ZUV2ZW50IiwiZXZlbnQiLCJuYXRpdmVFdmVudCIsInBlcnNpc3QiLCJ0eXBlIiwib3B0cyIsInRhcmdldCIsImxpc3RlbmVyIiwiRXJyb3IiLCJlbGVtZW50IiwiY29tcGF0TGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUV2ZW50SGFuZGxlO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZnVuY3Rpb24gc3VwcG9ydHNQYXNzaXZlRXZlbnRzKCkge1xuICB2YXIgc3VwcG9ydGVkID0gZmFsc2U7IC8vIENoZWNrIGlmIGJyb3dzZXIgc3VwcG9ydHMgZXZlbnQgd2l0aCBwYXNzaXZlIGxpc3RlbmVyc1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNTYWZlbHlfZGV0ZWN0aW5nX29wdGlvbl9zdXBwb3J0XG5cbiAgaWYgKF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRpb25zLCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbnZhciBjYW5Vc2VQYXNzaXZlRXZlbnRzID0gc3VwcG9ydHNQYXNzaXZlRXZlbnRzKCk7XG5cbmZ1bmN0aW9uIGdldE9wdGlvbnMob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhblVzZVBhc3NpdmVFdmVudHMgPyBvcHRpb25zIDogQm9vbGVhbihvcHRpb25zLmNhcHR1cmUpO1xufVxuLyoqXG4gKiBTaGltIGdlbmVyaWMgQVBJIGNvbXBhdGliaWxpdHkgd2l0aCBSZWFjdERPTSdzIHN5bnRoZXRpYyBldmVudHMsIHdpdGhvdXQgbmVlZGluZyB0aGVcbiAqIGxhcmdlIGFtb3VudCBvZiBjb2RlIFJlYWN0RE9NIHVzZXMgdG8gZG8gdGhpcy4gSWRlYWxseSB3ZSB3b3VsZG4ndCB1c2UgYSBzeW50aGV0aWNcbiAqIGV2ZW50IHdyYXBwZXIgYXQgYWxsLlxuICovXG5cblxuZnVuY3Rpb24gaXNQcm9wYWdhdGlvblN0b3BwZWQoKSB7XG4gIHJldHVybiB0aGlzLmNhbmNlbEJ1YmJsZTtcbn1cblxuZnVuY3Rpb24gaXNEZWZhdWx0UHJldmVudGVkKCkge1xuICByZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudChldmVudCkge1xuICBldmVudC5uYXRpdmVFdmVudCA9IGV2ZW50O1xuICBldmVudC5wZXJzaXN0ID0gZW1wdHlGdW5jdGlvbjtcbiAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gaXNEZWZhdWx0UHJldmVudGVkO1xuICBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGlzUHJvcGFnYXRpb25TdG9wcGVkO1xuICByZXR1cm4gZXZlbnQ7XG59XG4vKipcbiAqXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZSh0eXBlLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHRhcmdldCA9PSBudWxsIHx8IHR5cGVvZiB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVFdmVudEhhbmRsZTogY2FsbGVkIG9uIGFuIGludmFsaWQgdGFyZ2V0LicpO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gdGFyZ2V0O1xuXG4gICAgaWYgKGxpc3RlbmVyICE9IG51bGwpIHtcbiAgICAgIHZhciBjb21wYXRMaXN0ZW5lciA9IGZ1bmN0aW9uIGNvbXBhdExpc3RlbmVyKGUpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyKG5vcm1hbGl6ZUV2ZW50KGUpKTtcbiAgICAgIH07XG5cbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjb21wYXRMaXN0ZW5lciwgb3B0cyk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgICAgIGlmIChlbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY29tcGF0TGlzdGVuZXIsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvbjtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBUUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDQyxVQUFVLEdBQUcsSUFBSTtBQUN6QkQsT0FBTyxDQUFDRSxPQUFPLEdBQUdDLGlCQUFpQjtBQUVuQyxJQUFJQyxxQkFBcUIsR0FBR0MsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBRXBFLElBQUlDLGFBQWEsR0FBRyxTQUFTQSxhQUFhQSxDQUFBLEVBQUcsQ0FBQyxDQUFDO0FBRS9DLFNBQVNDLHFCQUFxQkEsQ0FBQSxFQUFHO0VBQy9CLElBQUlDLFNBQVMsR0FBRyxLQUFLO0VBR3JCLElBQUlKLHFCQUFxQixDQUFDSyxTQUFTLEVBQUU7SUFDbkMsSUFBSTtNQUNGLElBQUlDLE9BQU8sR0FBRyxDQUFDLENBQUM7TUFDaEJDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDRixPQUFPLEVBQUUsU0FBUyxFQUFFO1FB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