3cf386f033463029c077aeed2232584c
'use strict';

exports.__esModule = true;
exports.default = void 0;
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var startNativeAnimationNextId = 1;
var Animation = function () {
  function Animation() {}
  var _proto = Animation.prototype;
  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {};
  _proto.stop = function stop() {
    if (this.__nativeId) {
      _NativeAnimatedHelper.default.API.stopAnimation(this.__nativeId);
    }
  };
  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
    throw new Error('This animation type cannot be offloaded to native');
  };
  _proto.__debouncedOnEnd = function __debouncedOnEnd(result) {
    var onEnd = this.__onEnd;
    this.__onEnd = null;
    onEnd && onEnd(result);
  };
  _proto.__startNativeAnimation = function __startNativeAnimation(animatedValue) {
    var startNativeAnimationWaitId = startNativeAnimationNextId + ":startAnimation";
    startNativeAnimationNextId += 1;
    _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
    try {
      animatedValue.__makeNative();
      this.__nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
      _NativeAnimatedHelper.default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    } catch (e) {
      throw e;
    } finally {
      _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
    }
  };
  return Animation;
}();
var _default = Animation;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfTmF0aXZlQW5pbWF0ZWRIZWxwZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsInN0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkIiwiQW5pbWF0aW9uIiwiX3Byb3RvIiwicHJvdG90eXBlIiwic3RhcnQiLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwic3RvcCIsIl9fbmF0aXZlSWQiLCJBUEkiLCJzdG9wQW5pbWF0aW9uIiwiX19nZXROYXRpdmVBbmltYXRpb25Db25maWciLCJFcnJvciIsIl9fZGVib3VuY2VkT25FbmQiLCJyZXN1bHQiLCJfX29uRW5kIiwiX19zdGFydE5hdGl2ZUFuaW1hdGlvbiIsInN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkIiwic2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJfX21ha2VOYXRpdmUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJiaW5kIiwiZSIsInVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfTmF0aXZlQW5pbWF0ZWRIZWxwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9OYXRpdmVBbmltYXRlZEhlbHBlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCA9IDE7IC8vIEltcG9ydGFudCBub3RlOiBzdGFydCgpIGFuZCBzdG9wKCkgd2lsbCBvbmx5IGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuXG4vLyBPbmNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiBzdG9wcGVkIG9yIGZpbmlzaGVkIGl0cyBjb3Vyc2UsIGl0IHdpbGxcbi8vIG5vdCBiZSByZXVzZWQuXG5cbnZhciBBbmltYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRpb24oKSB7fVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGZyb21WYWx1ZSwgb25VcGRhdGUsIG9uRW5kLCBwcmV2aW91c0FuaW1hdGlvbiwgYW5pbWF0ZWRWYWx1ZSkge307XG5cbiAgX3Byb3RvLnN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlmICh0aGlzLl9fbmF0aXZlSWQpIHtcbiAgICAgIF9OYXRpdmVBbmltYXRlZEhlbHBlci5kZWZhdWx0LkFQSS5zdG9wQW5pbWF0aW9uKHRoaXMuX19uYXRpdmVJZCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyA9IGZ1bmN0aW9uIF9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCkge1xuICAgIC8vIFN1YmNsYXNzZXMgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgYW5pbWF0aW9uIGltcGxlbWVudGF0aW9uIGRvbmUgaW4gbmF0aXZlXG4gICAgLy8gc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGFuaW1hdGlvbiB0eXBlIGNhbm5vdCBiZSBvZmZsb2FkZWQgdG8gbmF0aXZlJyk7XG4gIH0gLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBzdWJjbGFzc2VzIHRvIG1ha2Ugc3VyZSBvbkVuZCBpcyBvbmx5IGNhbGxlZCBvbmNlLlxuICA7XG5cbiAgX3Byb3RvLl9fZGVib3VuY2VkT25FbmQgPSBmdW5jdGlvbiBfX2RlYm91bmNlZE9uRW5kKHJlc3VsdCkge1xuICAgIHZhciBvbkVuZCA9IHRoaXMuX19vbkVuZDtcbiAgICB0aGlzLl9fb25FbmQgPSBudWxsO1xuICAgIG9uRW5kICYmIG9uRW5kKHJlc3VsdCk7XG4gIH07XG5cbiAgX3Byb3RvLl9fc3RhcnROYXRpdmVBbmltYXRpb24gPSBmdW5jdGlvbiBfX3N0YXJ0TmF0aXZlQW5pbWF0aW9uKGFuaW1hdGVkVmFsdWUpIHtcbiAgICB2YXIgc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQgPSBzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCArIFwiOnN0YXJ0QW5pbWF0aW9uXCI7XG4gICAgc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgKz0gMTtcblxuICAgIF9OYXRpdmVBbmltYXRlZEhlbHBlci5kZWZhdWx0LkFQSS5zZXRXYWl0aW5nRm9ySWRlbnRpZmllcihzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCk7XG5cbiAgICB0cnkge1xuICAgICAgYW5pbWF0ZWRWYWx1ZS5fX21ha2VOYXRpdmUoKTtcblxuICAgICAgdGhpcy5fX25hdGl2ZUlkID0gX05hdGl2ZUFuaW1hdGVkSGVscGVyLmRlZmF1bHQuZ2VuZXJhdGVOZXdBbmltYXRpb25JZCgpO1xuXG4gICAgICBfTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZGVmYXVsdC5BUEkuc3RhcnRBbmltYXRpbmdOb2RlKHRoaXMuX19uYXRpdmVJZCwgYW5pbWF0ZWRWYWx1ZS5fX2dldE5hdGl2ZVRhZygpLCB0aGlzLl9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCksIHRoaXMuX19kZWJvdW5jZWRPbkVuZC5iaW5kKHRoaXMpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZGVmYXVsdC5BUEkudW5zZXRXYWl0aW5nRm9ySWRlbnRpZmllcihzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IEFuaW1hdGlvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFTQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMscUJBQXFCLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLDBCQUEwQixDQUFDLENBQUM7QUFFdEYsU0FBU0Qsc0JBQXNCQSxDQUFDRSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0wsVUFBVSxHQUFHSyxHQUFHLEdBQUc7SUFBRUosT0FBTyxFQUFFSTtFQUFJLENBQUM7QUFBRTtBQUU5RixJQUFJQywwQkFBMEIsR0FBRyxDQUFDO0FBSWxDLElBQUlDLFNBQVMsR0FBZ0IsWUFBWTtFQUN2QyxTQUFTQSxTQUFTQSxDQUFBLEVBQUcsQ0FBQztFQUV0QixJQUFJQyxNQUFNLEdBQUdELFNBQVMsQ0FBQ0UsU0FBUztFQUVoQ0QsTUFBTSxDQUFDRSxLQUFLLEdBQUcsU0FBU0EsS0FBS0EsQ0FBQ0MsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsaUJBQWlCLEVBQUVDLGFBQWEsRUFBRSxDQUFDLENBQUM7RUFFOUZQLE1BQU0sQ0FBQ1EsSUFBSSxHQUFHLFNBQVNBLElBQUlBLENBQUEsRUFBRztJQUM1QixJQUFJLElBQUksQ0FBQ0MsVUFBVSxFQUFFO01BQ25CZixxQkFBcUIsQ0FBQ0QsT0FBTyxDQUFDaUIsR0FBRyxDQUFDQyxhQUFhLENBQUMsSUFBSSxDQUFDRixVQUFVLENBQUM7SUFDbEU7RUFDRixDQUFDO0VBRURULE1BQU0sQ0FBQ1ksMEJBQTBCLEdBQUcsU0FBU0EsMEJBQTBCQSxDQUFBLEVBQUc7SUFHeEUsTUFBTSxJQUFJQyxLQUFLLENBQUMsbURBQW1ELENBQUM7RUFDdEUsQ0FBQztFQUdEYixNQUFNLENBQUNjLGdCQUFnQixHQUFHLFNBQVNBLGdCQUFnQkEsQ0FBQ0MsTUFBTSxFQUFFO0lBQzFELElBQUlWLEtBQUssR0FBRyxJQUFJLENBQUNXLE9BQU87SUFDeEIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSTtJQUNuQlgsS0FBSyxJQUFJQSxLQUFLLENBQUNVLE1BQU0sQ0FBQztFQUN4QixDQUFDO0VBRURmLE1BQU0sQ0FBQ2lCLHNCQUFzQixHQUFHLFNBQVNBLHNCQUFzQkEsQ0FBQ1YsYUFBYSxFQUFFO0lBQzdFLElBQUlXLDBCQUEwQixHQUFHcEIsMEJBQTBCLEdBQUcsaUJBQWlCO0lBQy9FQSwwQkFBMEIsSUFBSSxDQUFDO0lBRS9CSixxQkFBcUIsQ0FBQ0QsT0FBTyxDQUFDaUIsR0FBRyxDQUFDUyx1QkFBdUIsQ0FBQ0QsMEJBQTBCLENBQUM7SUFFckYsSUFBSTtNQUNGWCxhQUFhLENBQUNhLFlBQVksQ0FBQyxDQUFDO01BRTVCLElBQUksQ0FBQ1gsVUFBVSxHQUFHZixxQkFBcUIsQ0FBQ0QsT0FBTyxDQUFDNEIsc0JBQXNCLENBQUMsQ0FBQztNQUV4RTNCLHFCQUFxQixDQUFDRCxPQUFPLENBQUNpQixHQUFHLENBQUNZLGtCQUFrQixDQUFDLElBQUksQ0FBQ2IsVUFBVSxFQUFFRixhQUFhLENBQUNnQixjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1gsMEJBQTBCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUNVLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1SyxDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO01BQ1YsTUFBTUEsQ0FBQztJQUNULENBQUMsU0FBUztNQUNSL0IscUJBQXFCLENBQUNELE9BQU8sQ0FBQ2lCLEdBQUcsQ0FBQ2dCLHlCQUF5QixDQUFDUiwwQkFBMEIsQ0FBQztJQUN6RjtFQUNGLENBQUM7RUFFRCxPQUFPbkIsU0FBUztBQUNsQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUk0QixRQUFRLEdBQUc1QixTQUFTO0FBQ3hCUixPQUFPLENBQUNFLE9BQU8sR0FBR2tDLFFBQVE7QUFDMUJDLE1BQU0sQ0FBQ3JDLE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxPQUFPIiwiaWdub3JlTGlzdCI6W119