20463222b071c1b936bf32578d718ac0
"use strict";

exports.__esModule = true;
exports.default = void 0;
var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var initialURL = _ExecutionEnvironment.canUseDOM ? window.location.href : '';
var Linking = function () {
  function Linking() {
    var _this = this;
    this._eventCallbacks = {};
    this.addEventListener = function (event, callback) {
      if (!_this._eventCallbacks[event]) {
        _this._eventCallbacks[event] = [callback];
        return;
      }
      _this._eventCallbacks[event].push(callback);
    };
    this.removeEventListener = function (event, callback) {
      var callbacks = _this._eventCallbacks[event];
      var filteredCallbacks = callbacks.filter(function (c) {
        return c.toString() !== callback.toString();
      });
      _this._eventCallbacks[event] = filteredCallbacks;
    };
  }
  var _proto = Linking.prototype;
  _proto._dispatchEvent = function _dispatchEvent(event) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }
    var listeners = this._eventCallbacks[event];
    if (listeners != null && Array.isArray(listeners)) {
      listeners.map(function (listener) {
        listener.apply(void 0, data);
      });
    }
  };
  _proto.canOpenURL = function canOpenURL() {
    return Promise.resolve(true);
  };
  _proto.getInitialURL = function getInitialURL() {
    return Promise.resolve(initialURL);
  };
  _proto.openURL = function openURL(url) {
    try {
      open(url);
      this._dispatchEvent('onOpen', url);
      return Promise.resolve();
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto._validateURL = function _validateURL(url) {
    (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
    (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
  };
  return Linking;
}();
var open = function open(url) {
  if (_ExecutionEnvironment.canUseDOM) {
    var urlToOpen = new URL(url, window.location).toString();
    window.open(urlToOpen, '_blank', 'noopener');
  }
};
var _default = new Linking();
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,