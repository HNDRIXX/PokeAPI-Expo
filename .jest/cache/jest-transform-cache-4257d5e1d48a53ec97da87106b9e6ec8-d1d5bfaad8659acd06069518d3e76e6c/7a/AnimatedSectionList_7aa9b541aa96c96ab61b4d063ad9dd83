16c4b4426f6d829ac078bab3affbbd7a
"use strict";

exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _SectionList = _interopRequireDefault(require("../../../../exports/SectionList"));
var _createAnimatedComponent = _interopRequireDefault(require("../createAnimatedComponent"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var SectionListWithEventThrottle = React.forwardRef(function (props, ref) {
  return React.createElement(_SectionList.default, _extends({
    scrollEventThrottle: 0.0001
  }, props, {
    ref: ref
  }));
});
var _default = (0, _createAnimatedComponent.default)(SectionListWithEventThrottle);
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9TZWN0aW9uTGlzdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJvYmoiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIlNlY3Rpb25MaXN0V2l0aEV2ZW50VGhyb3R0bGUiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjcmVhdGVFbGVtZW50Iiwic2Nyb2xsRXZlbnRUaHJvdHRsZSIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWRTZWN0aW9uTGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9TZWN0aW9uTGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uLy4uL2V4cG9ydHMvU2VjdGlvbkxpc3RcIikpO1xuXG52YXIgX2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY3JlYXRlQW5pbWF0ZWRDb21wb25lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvY29tbWl0L2I4Yzg1NjJcbiAqL1xudmFyIFNlY3Rpb25MaXN0V2l0aEV2ZW50VGhyb3R0bGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1NlY3Rpb25MaXN0LmRlZmF1bHQsIF9leHRlbmRzKHtcbiAgICBzY3JvbGxFdmVudFRocm90dGxlOiAwLjAwMDFcbiAgfSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9KSk7XG59KTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVBbmltYXRlZENvbXBvbmVudC5kZWZhdWx0KShTZWN0aW9uTGlzdFdpdGhFdmVudFRocm90dGxlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFckQsSUFBSUMsWUFBWSxHQUFHQyxzQkFBc0IsQ0FBQ0YsT0FBTyxrQ0FBa0MsQ0FBQyxDQUFDO0FBRXJGLElBQUlHLHdCQUF3QixHQUFHRCxzQkFBc0IsQ0FBQ0YsT0FBTyw2QkFBNkIsQ0FBQyxDQUFDO0FBRTVGLFNBQVNFLHNCQUFzQkEsQ0FBQ0UsR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNSLFVBQVUsR0FBR1EsR0FBRyxHQUFHO0lBQUVQLE9BQU8sRUFBRU87RUFBSSxDQUFDO0FBQUU7QUFFOUYsU0FBU0Msd0JBQXdCQSxDQUFBLEVBQUc7RUFBRSxJQUFJLE9BQU9DLE9BQU8sS0FBSyxVQUFVLEVBQUUsT0FBTyxJQUFJO0VBQUUsSUFBSUMsS0FBSyxHQUFHLElBQUlELE9BQU8sQ0FBQyxDQUFDO0VBQUVELHdCQUF3QixHQUFHLFNBQVNBLHdCQUF3QkEsQ0FBQSxFQUFHO0lBQUUsT0FBT0UsS0FBSztFQUFFLENBQUM7RUFBRSxPQUFPQSxLQUFLO0FBQUU7QUFFak4sU0FBU1IsdUJBQXVCQSxDQUFDSyxHQUFHLEVBQUU7RUFBRSxJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1IsVUFBVSxFQUFFO0lBQUUsT0FBT1EsR0FBRztFQUFFO0VBQUUsSUFBSUEsR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxVQUFVLEVBQUU7SUFBRSxPQUFPO01BQUVQLE9B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