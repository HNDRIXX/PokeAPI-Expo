{"version":3,"names":["react_1","cov_vn7iozq1j","s","require","ComponentController","_super","f","__extends","props","_this","b","call","fetchData","__awaiter","setState","loading","error","fetch","concat","state","offset","apiResponse","_a","sent","json","results_1","Promise","allSettled","results","map","item","url","res","itemJson","typeResult","all","types","type","typeJson","some","existingType","name","push","image","sprites","name_icon","details","species","order","other","front_default","prevState","data","__spreadArray","filteredData","error_1","handleSearch","term","searchTerm","componentDidMount","navigation","prototype","componentDidUpdate","prevProps","filtered","filter","pokemon","toLowerCase","includes","toString","Component"],"sources":["C:\\Users\\Admin\\Desktop\\cnth\\src\\pages\\BoilerplatePages\\ComponentController.tsx"],"sourcesContent":["import { NavigationProp, ParamListBase } from \"@react-navigation/native\";\r\nimport { Component } from \"react\";\r\n\r\ninterface Props {\r\n    navigation: any;\r\n}\r\n\r\ninterface Abilities {\r\n    ability: {\r\n        name: string;\r\n        url: string;\r\n    };\r\n}\r\n\r\ninterface Types {\r\n    name: string;\r\n    url: string;\r\n    image: string;\r\n}\r\n\r\ninterface Stats {\r\n    base_stat: number;\r\n    effort: number;\r\n    stat: {\r\n        name: string;\r\n        url: string;\r\n    };\r\n}\r\n\r\ninterface Size {\r\n    height: number;\r\n    weight: number;\r\n}\r\n\r\ninterface Data {\r\n    name: string;\r\n    url: string;\r\n    order: number;\r\n    types: Array<{ image: string }>;\r\n    image: string;\r\n}\r\n\r\ninterface S {\r\n    data: Array<Data>;\r\n    filteredData: Array<Data>;\r\n    offset: number;\r\n    navigation: NavigationProp<ParamListBase>;\r\n    error: unknown;\r\n    searchTerm: string;\r\n    loading: boolean;\r\n}\r\n\r\nexport default class ComponentController extends Component<Props, S> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            filteredData: [],\r\n            offset: 0,\r\n            error: '',\r\n            searchTerm: '',\r\n            loading: false,\r\n            navigation: props.navigation,\r\n        };\r\n    }\r\n\r\n    fetchData = async () => {\r\n        try {\r\n            this.setState({ loading: true, error: '' });\r\n    \r\n            const apiResponse = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${this.state.offset}`);\r\n            const json = await apiResponse.json();\r\n    \r\n            let results: Array<Data> = [];\r\n    \r\n            await Promise.allSettled(\r\n                json.results.map(async (item: Data) => {\r\n                    const res = await fetch(item.url);\r\n                    const itemJson = await res.json();\r\n    \r\n                    let typeResult: Array<Types> = [];\r\n    \r\n                    await Promise.all(\r\n                        itemJson.types.map(async (type: { type: Types }) => {\r\n                            const res = await fetch(type.type.url);\r\n                            const typeJson = await res.json();\r\n    \r\n                            if (!typeResult.some(existingType => existingType.name === type.type.name)) {\r\n                                typeResult.push({\r\n                                    name: type.type.name,\r\n                                    url: type.type.url,\r\n                                    image: typeJson.sprites['generation-vii']['lets-go-pikachu-lets-go-eevee'].name_icon\r\n                                });\r\n                            }\r\n                        })\r\n                    );\r\n    \r\n                    const details : Data = {\r\n                        name: itemJson.species.name,\r\n                        url: itemJson.species.url,\r\n                        order: itemJson.order,\r\n                        types: typeResult,\r\n                        image: itemJson.sprites.other['official-artwork'].front_default\r\n                    };\r\n    \r\n                    results.push(details);\r\n                })\r\n            );\r\n    \r\n            this.setState(prevState => ({\r\n                data: [...prevState.data, ...results],\r\n                filteredData: [...prevState.data, ...results]\r\n            }));\r\n        } catch (error) {\r\n            this.setState({ error: error as string });\r\n        } finally {\r\n            this.setState({ loading: false });\r\n        }\r\n    }    \r\n\r\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<S>): void {\r\n        if (prevState.searchTerm !== this.state.searchTerm) {\r\n            const filtered = this.state.data.filter((pokemon) =>\r\n                pokemon.name.toLowerCase().includes(this.state.searchTerm.toLowerCase()) ||\r\n                pokemon.order.toString().includes(this.state.searchTerm)\r\n            );\r\n            \r\n            this.setState({ filteredData: filtered });\r\n        }\r\n\r\n        if (prevState.offset !== this.state.offset) {\r\n            this.fetchData();\r\n        }\r\n    }\r\n    \r\n    handleSearch = (term: string) => {\r\n        this.setState({ searchTerm: term });\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        this.fetchData();\r\n    };\r\n}"],"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","ignoreList":[]}