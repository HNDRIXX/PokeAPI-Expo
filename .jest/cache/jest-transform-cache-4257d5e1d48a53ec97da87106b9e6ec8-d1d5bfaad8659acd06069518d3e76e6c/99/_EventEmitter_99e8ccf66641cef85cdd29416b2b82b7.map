{"version":3,"names":["exports","__esModule","default","_invariant","_interopRequireDefault","require","_EmitterSubscription","_EventSubscriptionVendor","obj","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","_proto","prototype","addListener","eventType","listener","context","addSubscription","removeAllListeners","removeAllSubscriptions","removeSubscription","subscription","emitter","listenerCount","subscriptions","getSubscriptionsForType","filter","length","emit","_len","arguments","args","Array","_key","i","l","apply","removeListener","console","error","remove","_default","module"],"sources":["_EventEmitter.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _EmitterSubscription = _interopRequireDefault(require(\"./_EmitterSubscription\"));\n\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./_EventSubscriptionVendor\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nvar EventEmitter = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  ;\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nvar _default = EventEmitter;\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"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","ignoreList":[]}